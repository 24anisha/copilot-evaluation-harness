{
    "case_id": "case-0",
    "repo_name": "google/yapf",
    "file_path": "yapf/yapflib/reformatter.py",
    "code_snippet": "  if prev_line is None:\n    \n    \n    if first_token.newlines is not None:\n      first_token.newlines = None\n    return 0\n\n  if first_token.is_docstring:\n    if (prev_line.first.value == 'class' and\n        style.Get('BLANK_LINE_BEFORE_CLASS_DOCSTRING')):\n      \n      return ONE_BLANK_LINE\n    elif (prev_line.first.value.startswith('#') and\n          style.Get('BLANK_LINE_BEFORE_MODULE_DOCSTRING')):\n      \n      return ONE_BLANK_LINE\n    \n    return NO_BLANK_LINES\n\n  if first_token.is_name and not indent_depth:\n    if prev_line.first.value in {'from', 'import'}:\n      \n      \n      return 1 + style.Get(\n          'BLANK_LINES_BETWEEN_TOP_LEVEL_IMPORTS_AND_VARIABLES')\n\n  prev_last_token = prev_line.last\n  if prev_last_token.is_docstring:\n    if (not indent_depth and first_token.value in {'class', 'def', 'async'}):\n      \n      \n      return 1 + style.Get('BLANK_LINES_AROUND_TOP_LEVEL_DEFINITION')\n    if (first_nested and\n        not style.Get('BLANK_LINE_BEFORE_NESTED_CLASS_OR_DEF') and\n        _IsClassOrDef(first_token)):\n      first_token.newlines = None\n      return NO_BLANK_LINES\n    if _NoBlankLinesBeforeCurrentToken(prev_last_token.value, first_token,\n                                       prev_last_token):\n      return NO_BLANK_LINES\n    else:\n      return ONE_BLANK_LINE\n\n  if _IsClassOrDef(first_token):\n    \n    \n    if not indent_depth:\n      \n      is_inline_comment = prev_last_token.whitespace_prefix.count('\\n') == 0\n      if (not prev_line.disable and prev_last_token.is_comment and\n          not is_inline_comment):\n        \n        if _NoBlankLinesBeforeCurrentToken(prev_last_token.value, first_token,\n                                           prev_last_token):\n          \n          \n          index = len(final_lines) - 1\n          while index > 0:\n            if not final_lines[index - 1].is_comment:\n              break\n            index -= 1\n          if final_lines[index - 1].first.value == '@':\n            final_lines[index].first.AdjustNewlinesBefore(NO_BLANK_LINES)\n          else:\n            prev_last_token.AdjustNewlinesBefore(\n                1 + style.Get('BLANK_LINES_AROUND_TOP_LEVEL_DEFINITION'))\n          if first_token.newlines is not None:\n            first_token.newlines = None\n          return NO_BLANK_LINES\n    elif _IsClassOrDef(prev_line.first):\n      if first_nested and not style.Get(\n          'BLANK_LINE_BEFORE_NESTED_CLASS_OR_DEF'):\n        first_token.newlines = None\n        return NO_BLANK_LINES\n\n  \n  \n  if first_token.is_comment:\n    first_token_lineno = first_token.lineno - first_token.value.count('\\n')\n  else:\n    first_token_lineno = first_token.lineno\n\n  prev_last_token_lineno = prev_last_token.lineno\n  if prev_last_token.is_multiline_string:\n    prev_last_token_lineno += prev_last_token.value.count('\\n')\n\n  if first_token_lineno - prev_last_token_lineno > 1:\n    return ONE_BLANK_LINE\n\n  return NO_BLANK_LINES",
    "line_range": [
        605,
        715
    ],
    "command_specific_fields": {
        "method_name": "_CalculateNumberOfNewlines"
    },
    "language": "python",
    "commit": "1afbf7112ae61a467276c9401b3c113e6f676d0f",
    "prompt": ""
}