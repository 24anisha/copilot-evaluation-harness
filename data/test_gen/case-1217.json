{
    "case_id": "case-1217",
    "repo_name": "maurosoria/dirsearch",
    "file_path": "lib/utils/diff.py",
    "code_snippet": "            )\n\n\n\n    def compare_to(self, content):\n\n        \"\"\"\n\n        DynamicContentParser.compare_to() workflow\n\n\n\n          1. Check if the wildcard response is static or not, if yes, compare 2 responses\n\n          2. If it's not static, get static patterns (splitting by space) in both responses\n\n            and check if they match\n\n          3. In some rare cases, checking static patterns fails, so make a final confirmation\n\n            if the similarity ratio of 2 responses is not high enough to prove they are the same\n\n        \"\"\"\n\n\n\n        if self._is_static and content == self._base_content:\n\n            return True\n\n\n\n        diff = self._differ.compare(self._base_content.split(), content.split())\n\n        static_patterns_are_matched = self._static_patterns == self.get_static_patterns(diff)\n\n        match_ratio = difflib.SequenceMatcher(None, self._base_content, content).ratio()\n\n        return static_patterns_are_matched or match_ratio > MAX_MATCH_RATIO\n",
    "line_range": [
        35,
        54
    ],
    "command_specific_fields": {
        "method_name": "compare_to"
    },
    "language": "python",
    "commit": "59bc9ce43063a1036cf0077f2f1e68883397dac4",
    "prompt": ""
}