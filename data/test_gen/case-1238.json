{
    "case_id": "case-1238",
    "repo_name": "dbcli/mycli",
    "file_path": "mycli/clistyle.py",
    "code_snippet": "\n\ndef style_factory(name, cli_style):\n\n    try:\n\n        style = pygments.styles.get_style_by_name(name)\n\n    except ClassNotFound:\n\n        style = pygments.styles.get_style_by_name('native')\n\n\n\n    prompt_styles = []\n\n    # prompt-toolkit used pygments tokens for styling before, switched to style\n\n    # names in 2.0. Convert old token types to new style names, for backwards compatibility.\n\n    for token in cli_style:\n\n        if token.startswith('Token.'):\n\n            # treat as pygments token (1.0)\n\n            token_type, style_value = parse_pygments_style(\n\n                token, style, cli_style)\n\n            if token_type in TOKEN_TO_PROMPT_STYLE:\n\n                prompt_style = TOKEN_TO_PROMPT_STYLE[token_type]\n\n                prompt_styles.append((prompt_style, style_value))\n\n            else:\n\n                # we don't want to support tokens anymore\n\n                logger.error('Unhandled style / class name: %s', token)\n\n        else:\n\n            # treat as prompt style name (2.0). See default style names here:\n\n            # https://github.com/jonathanslenders/python-prompt-toolkit/blob/master/prompt_toolkit/styles/defaults.py\n\n            prompt_styles.append((token, cli_style[token]))\n\n\n\n    override_style = Style([('bottom-toolbar', 'noreverse')])\n\n    return merge_styles([\n\n        style_from_pygments_cls(style),\n\n        override_style,\n\n        Style(prompt_styles)\n\n    ])\n",
    "line_range": [
        92,
        124
    ],
    "command_specific_fields": {
        "method_name": "style_factory"
    },
    "language": "python",
    "commit": "af5a17d980450e184cfc25e56e0e91a1389d378d",
    "prompt": ""
}