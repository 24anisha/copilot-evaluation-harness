{
    "case_id": "case-199",
    "repo_name": "trekhleb/javascript-algorithms",
    "file_path": "src/algorithms/sorting/quick-sort/QuickSort.js",
    "code_snippet": "   * @return {*[]}\n\n   */\n\n  sort(originalArray) {\n\n    // Clone original array to prevent it from modification.\n\n    const array = [...originalArray];\n\n\n\n    // If array has less than or equal to one elements then it is already sorted.\n\n    if (array.length <= 1) {\n\n      return array;\n\n    }\n\n\n\n    // Init left and right arrays.\n\n    const leftArray = [];\n\n    const rightArray = [];\n\n\n\n    // Take the first element of array as a pivot.\n\n    const pivotElement = array.shift();\n\n    const centerArray = [pivotElement];\n\n\n\n    // Split all array elements between left, center and right arrays.\n\n    while (array.length) {\n\n      const currentElement = array.shift();\n\n\n\n      // Call visiting callback.\n\n      this.callbacks.visitingCallback(currentElement);\n\n\n\n      if (this.comparator.equal(currentElement, pivotElement)) {\n\n        centerArray.push(currentElement);\n\n      } else if (this.comparator.lessThan(currentElement, pivotElement)) {\n\n        leftArray.push(currentElement);\n\n      } else {\n\n        rightArray.push(currentElement);\n\n      }\n\n    }\n\n\n\n    // Sort left and right arrays.\n\n    const leftArraySorted = this.sort(leftArray);\n\n    const rightArraySorted = this.sort(rightArray);\n\n\n\n    // Let's now join sorted left array with center array and with sorted right array.\n\n    return leftArraySorted.concat(centerArray, rightArraySorted);\n\n  }\n",
    "line_range": [
        6,
        47
    ],
    "command_specific_fields": {
        "method_name": "sort"
    },
    "language": "javascript",
    "commit": "ca3d16dcce7a493ae12c03ca20ede4fd7801f7a2",
    "prompt": ""
}