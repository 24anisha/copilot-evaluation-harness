{
    "case_id": "case-0",
    "repo_name": "dthree/cash",
    "file_path": "src/commands/head.js",
    "code_snippet": "{\n    options = options || {};\n    args = args || '';\n    const source = (args.stdin === undefined) ? 'files' : 'stdin';\n\n    const lines = (options.lines) ? Math.abs(options.lines) : 10;\n    if (!Number.isInteger(lines)) {\n      this.log(`head: ${options.lines}: invalid number of lines`);\n      return 0;\n    }\n\n    /* istanbul ignore next */\n    if (source === 'stdin') {\n      let stdout = head.readLines(args.stdin[0], lines);\n      stdout = stdout.replace(/\\n$/, '');\n      if (stdout.trim() !== '') {\n        this.log(stdout);\n      }\n      return 0;\n    }\n\n    let files = args.files || args;\n    files = (typeof files === 'object' && files !== null && !Array.isArray(files)) ? [] : files;\n    files = (files === undefined) ? [] : files;\n    files = (typeof files === 'string') ? String(files).split(' ') : files;\n    files = files.filter(arg => String(arg).trim() !== '');\n    files = expand(files);\n\n    let stdout = '';\n    const verbose = ((files.length > 1 && !options.silent) || options.verbose);\n\n    for (let i = 0; i < files.length; i++) {\n      try {\n        const content = fs.readFileSync(files[i]).toString();\n        if (verbose) {\n          stdout += `${i > 0 ? '\\n' : ''}==> ${files[i]} <==\\n`;\n        }\n        stdout += head.readLines(content, lines);\n      } catch (e) {\n        stdout += `head: cannot open ${files[i]} for reading: No such file or directory`;\n      }\n    }\n\n    stdout = stdout.replace(/\\n$/, '');\n    if (stdout.trim() !== '') {\n      this.log(stdout);\n    }\n\n    return 0;\n  }",
    "line_range": [
        9,
        60
    ],
    "command_specific_fields": {
        "method_name": "exec"
    },
    "language": "javascript",
    "commit": "3e28dae8bdb71215d5034df9003f3ef2804c2754",
    "prompt": ""
}