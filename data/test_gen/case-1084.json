{
    "case_id": "case-1084",
    "repo_name": "python-hyper/rfc3986",
    "file_path": "src/rfc3986/parseresult.py",
    "code_snippet": "        return self.reference.authority\n\n\n\n    def copy_with(\n\n        self,\n\n        scheme: t.Optional[str] = misc.UseExisting,\n\n        userinfo: t.Optional[str] = misc.UseExisting,\n\n        host: t.Optional[str] = misc.UseExisting,\n\n        port: t.Optional[t.Union[int, str]] = misc.UseExisting,\n\n        path: t.Optional[str] = misc.UseExisting,\n\n        query: t.Optional[str] = misc.UseExisting,\n\n        fragment: t.Optional[str] = misc.UseExisting,\n\n    ) -> \"ParseResult\":\n\n        \"\"\"Create a copy of this instance replacing with specified parts.\"\"\"\n\n        attributes = zip(\n\n            PARSED_COMPONENTS,\n\n            (scheme, userinfo, host, port, path, query, fragment),\n\n        )\n\n        attrs_dict: t.Dict[str, t.Optional[str]] = {}\n\n        for name, value in attributes:\n\n            if value is misc.UseExisting:\n\n                value = getattr(self, name)\n\n            attrs_dict[name] = value\n\n        authority = self._generate_authority(attrs_dict)\n\n        ref = self.reference.copy_with(\n\n            scheme=attrs_dict[\"scheme\"],\n\n            authority=authority,\n\n            path=attrs_dict[\"path\"],\n\n            query=attrs_dict[\"query\"],\n\n            fragment=attrs_dict[\"fragment\"],\n\n        )\n\n        return ParseResult(uri_ref=ref, encoding=self.encoding, **attrs_dict)\n",
    "line_range": [
        216,
        246
    ],
    "command_specific_fields": {
        "method_name": "copy_with"
    },
    "language": "python",
    "commit": "75e77baed146976442bb11d4adda0eb322c6a6b5",
    "prompt": ""
}