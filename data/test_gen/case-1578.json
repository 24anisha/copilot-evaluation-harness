{
    "case_id": "case-1578",
    "repo_name": "darknessomi/musicbox",
    "file_path": "NEMbox/api.py",
    "code_snippet": "            return {}\n\n    def dig_info(self, data, dig_type):\n        if not data:\n            return []\n        if dig_type == \"songs\" or dig_type == \"fmsongs\" or dig_type == \"djprograms\":\n            sids = [x[\"id\"] for x in data]\n            # \u53ef\u80fd\u56e0\u7f51\u7edc\u6ce2\u52a8\uff0c\u8fd4\u56de\u7a7a\u503c\uff0c\u5728Parse.songs\u4e2d\u5f15\u53d1KeyError\n            # \u5bfc\u81f4\u65e5\u5fd7\u8bb0\u5f55\u5927\u91cfcan't get song url\u7684\u53ef\u80fd\u539f\u56e0\n            urls = []\n            for i in range(0, len(sids), 350):\n                urls.extend(self.songs_url(sids[i : i + 350]))\n            # songs_detail api\u4f1a\u8fd4\u56de\u7a7a\u7684\u7535\u53f0\u6b4c\u540d\uff0c\u6545\u4f7f\u7528\u539f\u6570\u636e\n            sds = []\n            if dig_type == \"djprograms\":\n                sds.extend(data)\n            # \u652f\u6301\u8d85\u8fc71000\u9996\u6b4c\u66f2\u7684\u6b4c\u5355\n            else:\n                for i in range(0, len(sids), 500):\n                    sds.extend(self.songs_detail(sids[i : i + 500]))\n            # api \u8fd4\u56de\u7684 urls \u7684 id \u987a\u5e8f\u548c data \u7684 id \u987a\u5e8f\u4e0d\u4e00\u81f4\n            # \u4e3a\u4e86\u83b7\u53d6\u5230\u5bf9\u5e94 id \u7684 url\uff0c\u5bf9\u8fd4\u56de\u7684 urls \u505a\u4e00\u4e2a id2index \u7684\u7f13\u5b58\n            # \u540c\u65f6\u4fdd\u8bc1 data \u7684 id \u987a\u5e8f\u4e0d\u53d8\n            url_id_index = {}\n            for index, url in enumerate(urls):\n                url_id_index[url[\"id\"]] = index\n\n            timestamp = time.time()\n            for s in sds:\n                url_index = url_id_index.get(s[\"id\"])\n                if url_index is None:\n                    log.error(\"can't get song url, id: %s\", s[\"id\"])\n                    return []\n                s[\"url\"] = urls[url_index][\"url\"]\n                s[\"br\"] = urls[url_index][\"br\"]\n                s[\"expires\"] = urls[url_index][\"expi\"]\n                s[\"get_time\"] = timestamp\n            return Parse.songs(sds)\n\n        elif dig_type == \"refresh_urls\":\n            urls_info = []\n            for i in range(0, len(data), 350):\n                urls_info.extend(self.songs_url(data[i : i + 350]))\n            timestamp = time.time()\n\n            songs = []\n            for url_info in urls_info:\n                song = {}\n                song[\"song_id\"] = url_info[\"id\"]\n                song[\"mp3_url\"] = url_info[\"url\"]\n                song[\"expires\"] = url_info[\"expi\"]\n                song[\"get_time\"] = timestamp\n                songs.append(song)\n            return songs\n\n        elif dig_type == \"artists\":\n            return Parse.artists(data)\n\n        elif dig_type == \"albums\":\n            return Parse.albums(data)\n\n        elif dig_type == \"playlists\" or dig_type == \"top_playlists\":\n            return Parse.playlists(data)\n\n        elif dig_type == \"playlist_classes\":\n            return list(PLAYLIST_CLASSES.keys())\n\n        elif dig_type == \"playlist_class_detail\":\n            return PLAYLIST_CLASSES[data]\n\n        elif dig_type == \"djRadios\":\n            return data\n        else:\n            raise ValueError(\"Invalid dig type\")\n",
    "line_range": [
        566,
        639
    ],
    "command_specific_fields": {
        "method_name": "dig_info"
    },
    "language": "python",
    "commit": "592e13d1b948201447d008f4f3e249d347f47f21",
    "prompt": ""
}