{
    "case_id": "case-1591",
    "repo_name": "boto/s3transfer",
    "file_path": "s3transfer/__init__.py",
    "code_snippet": "\n\n    def _download_range(\n\n        self, bucket, key, filename, part_size, num_parts, callback, part_index\n\n    ):\n\n        try:\n\n            range_param = self._calculate_range_param(\n\n                part_size, part_index, num_parts\n\n            )\n\n\n\n            max_attempts = self._config.num_download_attempts\n\n            last_exception = None\n\n            for i in range(max_attempts):\n\n                try:\n\n                    logger.debug(\"Making get_object call.\")\n\n                    response = self._client.get_object(\n\n                        Bucket=bucket, Key=key, Range=range_param\n\n                    )\n\n                    streaming_body = StreamReaderProgress(\n\n                        response['Body'], callback\n\n                    )\n\n                    buffer_size = 1024 * 16\n\n                    current_index = part_size * part_index\n\n                    for chunk in iter(\n\n                        lambda: streaming_body.read(buffer_size), b''\n\n                    ):\n\n                        self._ioqueue.put((current_index, chunk))\n\n                        current_index += len(chunk)\n\n                    return\n\n                except (\n\n                    socket.timeout,\n\n                    OSError,\n\n                    ReadTimeoutError,\n\n                    IncompleteReadError,\n\n                    ResponseStreamingError,\n\n                ) as e:\n\n                    logger.debug(\n\n                        \"Retrying exception caught (%s), \"\n\n                        \"retrying request, (attempt %s / %s)\",\n\n                        e,\n\n                        i,\n\n                        max_attempts,\n\n                        exc_info=True,\n\n                    )\n\n                    last_exception = e\n\n                    continue\n\n            raise RetriesExceededError(last_exception)\n\n        finally:\n\n            logger.debug(\"EXITING _download_range for part: %s\", part_index)\n",
    "line_range": [
        594,
        642
    ],
    "command_specific_fields": {
        "method_name": "_download_range"
    },
    "language": "python",
    "commit": "da68b50bb5a6b0c342ad0d87f9b1f80ab81dffce",
    "prompt": ""
}