{
    "case_id": "case-136",
    "repo_name": "foliojs/pdfkit",
    "file_path": "lib/page.js",
    "code_snippet": "  FOLIO: [612.0, 936.0],\n  LEGAL: [612.0, 1008.0],\n  LETTER: [612.0, 792.0],\n  TABLOID: [792.0, 1224.0]\n};\n\nclass PDFPage {\n  constructor(document, options = {}) {\n    this.document = document;\n    this._options = options;\n    this.size = options.size || 'letter';\n    this.layout = options.layout || 'portrait';\n\n    // calculate page dimensions\n    const dimensions = Array.isArray(this.size)\n      ? this.size\n      : SIZES[this.size.toUpperCase()];\n    this.width = dimensions[this.layout === 'portrait' ? 0 : 1];\n    this.height = dimensions[this.layout === 'portrait' ? 1 : 0];\n\n    this.content = this.document.ref();\n\n    if (options.font) document.font(options.font, options.fontFamily);\n    if (options.fontSize) document.fontSize(options.fontSize);\n\n    // process margins\n    // Margin calculation must occur after font assignment to ensure any dynamic sizes are calculated correctly\n    this.margins = normalizeSides(\n      options.margin ?? options.margins,\n      DEFAULT_MARGINS,\n        x => document.sizeToPoint(x, 0, this)\n    )\n\n    // Initialize the Font, XObject, and ExtGState dictionaries\n    this.resources = this.document.ref({\n      ProcSet: ['PDF', 'Text', 'ImageB', 'ImageC', 'ImageI']\n    });\n\n    // The page dictionary\n    this.dictionary = this.document.ref({\n      Type: 'Page',\n      Parent: this.document._root.data.Pages,\n      MediaBox: [0, 0, this.width, this.height],\n      Contents: this.content,\n      Resources: this.resources\n    });\n",
    "line_range": [
        65,
        110
    ],
    "command_specific_fields": {
        "method_name": "constructor"
    },
    "language": "javascript",
    "commit": "9e5dfcdc0aa2424e1f98b3f88d229faf1ea31c49",
    "prompt": ""
}