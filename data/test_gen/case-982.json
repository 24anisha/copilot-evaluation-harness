{
    "case_id": "case-982",
    "repo_name": "magic-wormhole/magic-wormhole",
    "file_path": "versioneer.py",
    "code_snippet": "    return get_versions()[\"version\"]\n\n\n\n\n\ndef get_cmdclass(cmdclass: Optional[Dict[str, Any]] = None):\n\n    \"\"\"Get the custom setuptools subclasses used by Versioneer.\n\n\n\n    If the package uses a different cmdclass (e.g. one from numpy), it\n\n    should be provide as an argument.\n\n    \"\"\"\n\n    if \"versioneer\" in sys.modules:\n\n        del sys.modules[\"versioneer\"]\n\n        # this fixes the \"python setup.py develop\" case (also 'install' and\n\n        # 'easy_install .'), in which subdependencies of the main project are\n\n        # built (using setup.py bdist_egg) in the same python process. Assume\n\n        # a main project A and a dependency B, which use different versions\n\n        # of Versioneer. A's setup.py imports A's Versioneer, leaving it in\n\n        # sys.modules by the time B's setup.py is executed, causing B to run\n\n        # with the wrong versioneer. Setuptools wraps the sub-dep builds in a\n\n        # sandbox that restores sys.modules to it's pre-build state, so the\n\n        # parent is protected against the child's \"import versioneer\". By\n\n        # removing ourselves from sys.modules here, before the child build\n\n        # happens, we protect the child from the parent's versioneer too.\n\n        # Also see https://github.com/python-versioneer/python-versioneer/issues/52\n\n\n\n    cmds = {} if cmdclass is None else cmdclass.copy()\n\n\n\n    # we add \"version\" to setuptools\n\n    from setuptools import Command\n\n\n\n    class cmd_version(Command):\n\n        description = \"report generated version string\"\n\n        user_options: List[Tuple[str, str, str]] = []\n\n        boolean_options: List[str] = []\n\n\n\n        def initialize_options(self) -> None:\n\n            pass\n\n\n\n        def finalize_options(self) -> None:\n\n            pass\n\n\n\n        def run(self) -> None:\n\n            vers = get_versions(verbose=True)\n\n            print(\"Version: %s\" % vers[\"version\"])\n\n            print(\" full-revisionid: %s\" % vers.get(\"full-revisionid\"))\n\n            print(\" dirty: %s\" % vers.get(\"dirty\"))\n\n            print(\" date: %s\" % vers.get(\"date\"))\n\n            if vers[\"error\"]:\n\n                print(\" error: %s\" % vers[\"error\"])\n\n    cmds[\"version\"] = cmd_version\n\n\n\n    # we override \"build_py\" in setuptools\n\n    #\n\n    # most invocation pathways end up running build_py:\n\n    #  distutils/build -> build_py\n\n    #  distutils/install -> distutils/build ->..\n\n    #  setuptools/bdist_wheel -> distutils/install ->..\n\n    #  setuptools/bdist_egg -> distutils/install_lib -> build_py\n\n    #  setuptools/install -> bdist_egg ->..\n\n    #  setuptools/develop -> ?\n\n    #  pip install:\n\n    #   copies source tree to a tempdir before running egg_info/etc\n\n    #   if .git isn't copied too, 'git describe' will fail\n\n    #   then does setup.py bdist_wheel, or sometimes setup.py install\n\n    #  setup.py egg_info -> ?\n\n\n\n    # pip install -e . and setuptool/editable_wheel will invoke build_py\n\n    # but the build_py command is not expected to copy any files.\n\n\n\n    # we override different \"build_py\" commands for both environments\n\n    if 'build_py' in cmds:\n\n        _build_py: Any = cmds['build_py']\n\n    else:\n\n        from setuptools.command.build_py import build_py as _build_py\n\n\n\n    class cmd_build_py(_build_py):\n\n        def run(self) -> None:\n\n            root = get_root()\n\n            cfg = get_config_from_root(root)\n\n            versions = get_versions()\n\n            _build_py.run(self)\n\n            if getattr(self, \"editable_mode\", False):\n\n                # During editable installs `.py` and data files are\n\n                # not copied to build_lib\n\n                return\n\n            # now locate _version.py in the new build/ directory and replace\n\n            # it with an updated value\n\n            if cfg.versionfile_build:\n\n                target_versionfile = os.path.join(self.build_lib,\n\n                                                  cfg.versionfile_build)\n\n                print(\"UPDATING %s\" % target_versionfile)\n\n                write_to_version_file(target_versionfile, versions)\n\n    cmds[\"build_py\"] = cmd_build_py\n\n\n\n    if 'build_ext' in cmds:\n\n        _build_ext: Any = cmds['build_ext']\n\n    else:\n\n        from setuptools.command.build_ext import build_ext as _build_ext\n\n\n\n    class cmd_build_ext(_build_ext):\n\n        def run(self) -> None:\n\n            root = get_root()\n\n            cfg = get_config_from_root(root)\n\n            versions = get_versions()\n\n            _build_ext.run(self)\n\n            if self.inplace:\n\n                # build_ext --inplace will only build extensions in\n\n                # build/lib<..> dir with no _version.py to write to.\n\n                # As in place builds will already have a _version.py\n\n                # in the module dir, we do not need to write one.\n\n                return\n\n            # now locate _version.py in the new build/ directory and replace\n\n            # it with an updated value\n\n            if not cfg.versionfile_build:\n\n                return\n\n            target_versionfile = os.path.join(self.build_lib,\n\n                                              cfg.versionfile_build)\n\n            if not os.path.exists(target_versionfile):\n\n                print(f\"Warning: {target_versionfile} does not exist, skipping \"\n\n                      \"version update. This can happen if you are running build_ext \"\n\n                      \"without first running build_py.\")\n\n                return\n\n            print(\"UPDATING %s\" % target_versionfile)\n\n            write_to_version_file(target_versionfile, versions)\n\n    cmds[\"build_ext\"] = cmd_build_ext\n\n\n\n    if \"cx_Freeze\" in sys.modules:  # cx_freeze enabled?\n\n        from cx_Freeze.dist import build_exe as _build_exe  # type: ignore\n\n        # nczeczulin reports that py2exe won't like the pep440-style string\n\n        # as FILEVERSION, but it can be used for PRODUCTVERSION, e.g.\n\n        # setup(console=[{\n\n        #   \"version\": versioneer.get_version().split(\"+\", 1)[0], # FILEVERSION\n\n        #   \"product_version\": versioneer.get_version(),\n\n        #   ...\n\n\n\n        class cmd_build_exe(_build_exe):\n\n            def run(self) -> None:\n\n                root = get_root()\n\n                cfg = get_config_from_root(root)\n\n                versions = get_versions()\n\n                target_versionfile = cfg.versionfile_source\n\n                print(\"UPDATING %s\" % target_versionfile)\n\n                write_to_version_file(target_versionfile, versions)\n\n\n\n                _build_exe.run(self)\n\n                os.unlink(target_versionfile)\n\n                with open(cfg.versionfile_source, \"w\") as f:\n\n                    LONG = LONG_VERSION_PY[cfg.VCS]\n\n                    f.write(LONG %\n\n                            {\"DOLLAR\": \"$\",\n\n                             \"STYLE\": cfg.style,\n\n                             \"TAG_PREFIX\": cfg.tag_prefix,\n\n                             \"PARENTDIR_PREFIX\": cfg.parentdir_prefix,\n\n                             \"VERSIONFILE_SOURCE\": cfg.versionfile_source,\n\n                             })\n\n        cmds[\"build_exe\"] = cmd_build_exe\n\n        del cmds[\"build_py\"]\n\n\n\n    if 'py2exe' in sys.modules:  # py2exe enabled?\n\n        try:\n\n            from py2exe.setuptools_buildexe import py2exe as _py2exe  # type: ignore\n\n        except ImportError:\n\n            from py2exe.distutils_buildexe import py2exe as _py2exe  # type: ignore\n\n\n\n        class cmd_py2exe(_py2exe):\n\n            def run(self) -> None:\n\n                root = get_root()\n\n                cfg = get_config_from_root(root)\n\n                versions = get_versions()\n\n                target_versionfile = cfg.versionfile_source\n\n                print(\"UPDATING %s\" % target_versionfile)\n\n                write_to_version_file(target_versionfile, versions)\n\n\n\n                _py2exe.run(self)\n\n                os.unlink(target_versionfile)\n\n                with open(cfg.versionfile_source, \"w\") as f:\n\n                    LONG = LONG_VERSION_PY[cfg.VCS]\n\n                    f.write(LONG %\n\n                            {\"DOLLAR\": \"$\",\n\n                             \"STYLE\": cfg.style,\n\n                             \"TAG_PREFIX\": cfg.tag_prefix,\n\n                             \"PARENTDIR_PREFIX\": cfg.parentdir_prefix,\n\n                             \"VERSIONFILE_SOURCE\": cfg.versionfile_source,\n\n                             })\n\n        cmds[\"py2exe\"] = cmd_py2exe\n\n\n\n    # sdist farms its file list building out to egg_info\n\n    if 'egg_info' in cmds:\n\n        _egg_info: Any = cmds['egg_info']\n\n    else:\n\n        from setuptools.command.egg_info import egg_info as _egg_info\n\n\n\n    class cmd_egg_info(_egg_info):\n\n        def find_sources(self) -> None:\n\n            # egg_info.find_sources builds the manifest list and writes it\n\n            # in one shot\n\n            super().find_sources()\n\n\n\n            # Modify the filelist and normalize it\n\n            root = get_root()\n\n            cfg = get_config_from_root(root)\n\n            self.filelist.append('versioneer.py')\n\n            if cfg.versionfile_source:\n\n                # There are rare cases where versionfile_source might not be\n\n                # included by default, so we must be explicit\n\n                self.filelist.append(cfg.versionfile_source)\n\n            self.filelist.sort()\n\n            self.filelist.remove_duplicates()\n\n\n\n            # The write method is hidden in the manifest_maker instance that\n\n            # generated the filelist and was thrown away\n\n            # We will instead replicate their final normalization (to unicode,\n\n            # and POSIX-style paths)\n\n            from setuptools import unicode_utils\n\n            normalized = [unicode_utils.filesys_decode(f).replace(os.sep, '/')\n\n                          for f in self.filelist.files]\n\n\n\n            manifest_filename = os.path.join(self.egg_info, 'SOURCES.txt')\n\n            with open(manifest_filename, 'w') as fobj:\n\n                fobj.write('\\n'.join(normalized))\n\n\n\n    cmds['egg_info'] = cmd_egg_info\n\n\n\n    # we override different \"sdist\" commands for both environments\n\n    if 'sdist' in cmds:\n\n        _sdist: Any = cmds['sdist']\n\n    else:\n\n        from setuptools.command.sdist import sdist as _sdist\n\n\n\n    class cmd_sdist(_sdist):\n\n        def run(self) -> None:\n\n            versions = get_versions()\n\n            self._versioneer_generated_versions = versions\n\n            # unless we update this, the command will keep using the old\n\n            # version\n\n            self.distribution.metadata.version = versions[\"version\"]\n\n            return _sdist.run(self)\n\n\n\n        def make_release_tree(self, base_dir: str, files: List[str]) -> None:\n\n            root = get_root()\n\n            cfg = get_config_from_root(root)\n\n            _sdist.make_release_tree(self, base_dir, files)\n\n            # now locate _version.py in the new base_dir directory\n\n            # (remembering that it may be a hardlink) and replace it with an\n\n            # updated value\n\n            target_versionfile = os.path.join(base_dir, cfg.versionfile_source)\n\n            print(\"UPDATING %s\" % target_versionfile)\n\n            write_to_version_file(target_versionfile,\n\n                                  self._versioneer_generated_versions)\n\n    cmds[\"sdist\"] = cmd_sdist\n\n\n",
    "line_range": [
        1871,
        2120
    ],
    "command_specific_fields": {
        "method_name": "get_cmdclass"
    },
    "language": "python",
    "commit": "bff2f6c71121fc054258b9fb515dbaca1f4de646",
    "prompt": ""
}