{
    "case_id": "case-278",
    "repo_name": "fluent-ffmpeg/node-fluent-ffmpeg",
    "file_path": "lib/options/videosize.js",
    "code_snippet": " * @private\n\n */\n\nfunction createSizeFilters(output, key, value) {\n\n  // Store parameters\n\n  var data = output.sizeData = output.sizeData || {};\n\n  data[key] = value;\n\n\n\n  if (!('size' in data)) {\n\n    // No size requested, keep original size\n\n    return [];\n\n  }\n\n\n\n  // Try to match the different size string formats\n\n  var fixedSize = data.size.match(/([0-9]+)x([0-9]+)/);\n\n  var fixedWidth = data.size.match(/([0-9]+)x\\?/);\n\n  var fixedHeight = data.size.match(/\\?x([0-9]+)/);\n\n  var percentRatio = data.size.match(/\\b([0-9]{1,3})%/);\n\n  var width, height, aspect;\n\n\n\n  if (percentRatio) {\n\n    var ratio = Number(percentRatio[1]) / 100;\n\n    return [{\n\n      filter: 'scale',\n\n      options: {\n\n        w: 'trunc(iw*' + ratio + '/2)*2',\n\n        h: 'trunc(ih*' + ratio + '/2)*2'\n\n      }\n\n    }];\n\n  } else if (fixedSize) {\n\n    // Round target size to multiples of 2\n\n    width = Math.round(Number(fixedSize[1]) / 2) * 2;\n\n    height = Math.round(Number(fixedSize[2]) / 2) * 2;\n\n\n\n    aspect = width / height;\n\n\n\n    if (data.pad) {\n\n      return getScalePadFilters(width, height, aspect, data.pad);\n\n    } else {\n\n      // No autopad requested, rescale to target size\n\n      return [{ filter: 'scale', options: { w: width, h: height }}];\n\n    }\n\n  } else if (fixedWidth || fixedHeight) {\n\n    if ('aspect' in data) {\n\n      // Specified aspect ratio\n\n      width = fixedWidth ? fixedWidth[1] : Math.round(Number(fixedHeight[1]) * data.aspect);\n\n      height = fixedHeight ? fixedHeight[1] : Math.round(Number(fixedWidth[1]) / data.aspect);\n\n\n\n      // Round to multiples of 2\n\n      width = Math.round(width / 2) * 2;\n\n      height = Math.round(height / 2) * 2;\n\n\n\n      if (data.pad) {\n\n        return getScalePadFilters(width, height, data.aspect, data.pad);\n\n      } else {\n\n        // No autopad requested, rescale to target size\n\n        return [{ filter: 'scale', options: { w: width, h: height }}];\n\n      }\n\n    } else {\n\n      // Keep input aspect ratio\n\n\n\n      if (fixedWidth) {\n\n        return [{\n\n          filter: 'scale',\n\n          options: {\n\n            w: Math.round(Number(fixedWidth[1]) / 2) * 2,\n\n            h: 'trunc(ow/a/2)*2'\n\n          }\n\n        }];\n\n      } else {\n\n        return [{\n\n          filter: 'scale',\n\n          options: {\n\n            w: 'trunc(oh*a/2)*2',\n\n            h: Math.round(Number(fixedHeight[1]) / 2) * 2\n\n          }\n\n        }];\n\n      }\n\n    }\n\n  } else {\n\n    throw new Error('Invalid size specified: ' + data.size);\n\n  }\n\n}\n",
    "line_range": [
        66,
        147
    ],
    "command_specific_fields": {
        "method_name": "createSizeFilters"
    },
    "language": "javascript",
    "commit": "fafb8d3a66f91485907145d776cc14272e402f48",
    "prompt": ""
}