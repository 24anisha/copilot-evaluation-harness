{
    "case_id": "case-1635",
    "repo_name": "ipython/ipython",
    "file_path": "IPython/core/magics/auto.py",
    "code_snippet": "        print('\\n' + self.shell.magics_manager.auto_status())\n\n\n\n    @skip_doctest\n\n    @line_magic\n\n    def autocall(self, parameter_s=''):\n\n        \"\"\"Make functions callable without having to type parentheses.\n\n\n\n        Usage:\n\n\n\n           %autocall [mode]\n\n\n\n        The mode can be one of: 0->Off, 1->Smart, 2->Full.  If not given, the\n\n        value is toggled on and off (remembering the previous state).\n\n\n\n        In more detail, these values mean:\n\n\n\n        0 -> fully disabled\n\n\n\n        1 -> active, but do not apply if there are no arguments on the line.\n\n\n\n        In this mode, you get::\n\n\n\n          In [1]: callable\n\n          Out[1]: <built-in function callable>\n\n\n\n          In [2]: callable 'hello'\n\n          ------> callable('hello')\n\n          Out[2]: False\n\n\n\n        2 -> Active always.  Even if no arguments are present, the callable\n\n        object is called::\n\n\n\n          In [2]: float\n\n          ------> float()\n\n          Out[2]: 0.0\n\n\n\n        Note that even with autocall off, you can still use '/' at the start of\n\n        a line to treat the first argument on the command line as a function\n\n        and add parentheses to it::\n\n\n\n          In [8]: /str 43\n\n          ------> str(43)\n\n          Out[8]: '43'\n\n\n\n        # all-random (note for auto-testing)\n\n        \"\"\"\n\n\n\n        valid_modes = {\n\n            0: \"Off\",\n\n            1: \"Smart\",\n\n            2: \"Full\",\n\n        }\n\n\n\n        def errorMessage() -> str:\n\n            error = \"Valid modes: \"\n\n            for k, v in valid_modes.items():\n\n                error += str(k) + \"->\" + v + \", \"\n\n            error = error[:-2]  # remove tailing `, ` after last element\n\n            return error\n\n\n\n        if parameter_s:\n\n            if not parameter_s in map(str, valid_modes.keys()):\n\n                error(errorMessage())\n\n                return\n\n            arg = int(parameter_s)\n\n        else:\n\n            arg = 'toggle'\n\n\n\n        if not arg in (*list(valid_modes.keys()), \"toggle\"):\n\n            error(errorMessage())\n\n            return\n\n\n\n        if arg in (valid_modes.keys()):\n\n            self.shell.autocall = arg\n\n        else: # toggle\n\n            if self.shell.autocall:\n\n                self._magic_state.autocall_save = self.shell.autocall\n\n                self.shell.autocall = 0\n\n            else:\n\n                try:\n\n                    self.shell.autocall = self._magic_state.autocall_save\n\n                except AttributeError:\n\n                    self.shell.autocall = self._magic_state.autocall_save = 1\n\n\n\n        print(\"Automatic calling is:\", list(valid_modes.values())[self.shell.autocall])\n",
    "line_range": [
        60,
        144
    ],
    "command_specific_fields": {
        "method_name": "autocall"
    },
    "language": "python",
    "commit": "128bd582b9894b8ae9ff577aafe13f5fdb39c3cb",
    "prompt": ""
}