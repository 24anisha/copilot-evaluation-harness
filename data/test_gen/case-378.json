{
    "case_id": "case-378",
    "repo_name": "pahen/madge",
    "file_path": "lib/graph.js",
    "code_snippet": " */\n\nfunction createGraph(modules, circular, config, options) {\n\n\tconst g = gv.digraph('G');\n\n\tconst nodes = {};\n\n\tconst cyclicModules = circular.reduce((a, b) => a.concat(b), []);\n\n\n\n\tObject.keys(modules).forEach((id) => {\n\n\t\tnodes[id] = nodes[id] || g.createNode(id);\n\n\n\n\t\tif (!modules[id].length) {\n\n\t\t\tsetNodeColor(nodes[id], config.noDependencyColor);\n\n\t\t} else if (cyclicModules.indexOf(id) >= 0) {\n\n\t\t\tsetNodeColor(nodes[id], config.cyclicNodeColor);\n\n\t\t}\n\n\n\n\t\tmodules[id].forEach((depId) => {\n\n\t\t\tnodes[depId] = nodes[depId] || g.createNode(depId);\n\n\n\n\t\t\tif (!modules[depId]) {\n\n\t\t\t\tsetNodeColor(nodes[depId], config.noDependencyColor);\n\n\t\t\t}\n\n\n\n\t\t\tg.createEdge([nodes[id], nodes[depId]]);\n\n\t\t});\n\n\t});\n\n\tconst dot = gv.toDot(g);\n\n\treturn adapter\n\n\t\t.toStream(dot, options)\n\n\t\t.then(toArray)\n\n\t\t.then(Buffer.concat);\n\n}\n",
    "line_range": [
        83,
        114
    ],
    "command_specific_fields": {
        "method_name": "createGraph"
    },
    "language": "javascript",
    "commit": "6e0acb27b68b305b93b85d3fe82c4b11efa0a118",
    "prompt": ""
}