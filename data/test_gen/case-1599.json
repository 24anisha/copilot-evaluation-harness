{
    "case_id": "case-1599",
    "repo_name": "psf/requests",
    "file_path": "src/requests/sessions.py",
    "code_snippet": "            prepared_request.prepare_auth(new_auth)\n\n\n\n    def rebuild_proxies(self, prepared_request, proxies):\n\n        \"\"\"This method re-evaluates the proxy configuration by considering the\n\n        environment variables. If we are redirected to a URL covered by\n\n        NO_PROXY, we strip the proxy configuration. Otherwise, we set missing\n\n        proxy keys for this URL (in case they were stripped by a previous\n\n        redirect).\n\n\n\n        This method also replaces the Proxy-Authorization header where\n\n        necessary.\n\n\n\n        :rtype: dict\n\n        \"\"\"\n\n        headers = prepared_request.headers\n\n        scheme = urlparse(prepared_request.url).scheme\n\n        new_proxies = resolve_proxies(prepared_request, proxies, self.trust_env)\n\n\n\n        if \"Proxy-Authorization\" in headers:\n\n            del headers[\"Proxy-Authorization\"]\n\n\n\n        try:\n\n            username, password = get_auth_from_url(new_proxies[scheme])\n\n        except KeyError:\n\n            username, password = None, None\n\n\n\n        # urllib3 handles proxy authorization for us in the standard adapter.\n\n        # Avoid appending this to TLS tunneled requests where it may be leaked.\n\n        if not scheme.startswith(\"https\") and username and password:\n\n            headers[\"Proxy-Authorization\"] = _basic_auth_str(username, password)\n\n\n\n        return new_proxies\n",
    "line_range": [
        300,
        331
    ],
    "command_specific_fields": {
        "method_name": "rebuild_proxies"
    },
    "language": "python",
    "commit": "79b74ef704dc0d804937c0d015c5e9c3b02b79bd",
    "prompt": ""
}