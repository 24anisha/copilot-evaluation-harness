{
    "case_id": "case-605",
    "repo_name": "kelektiv/node-cron",
    "file_path": "src/time.ts",
    "code_snippet": "{\n\t\t// start by getting the first minute & hour inside the skipped range.\n\t\tconst startingMinute = (beforeJumpingPoint.minute + 1) % 60;\n\t\tconst startingHour =\n\t\t\t(beforeJumpingPoint.hour + (startingMinute === 0 ? 1 : 0)) % 24;\n\n\t\tconst hourRangeSize = afterJumpingPoint.hour - startingHour + 1;\n\t\tconst isHourJump = startingMinute === 0 && afterJumpingPoint.minute === 0;\n\n\t\t// There exist DST jumps other than 1 hour long, and the function is built to deal with it.\n\t\t// It may be overkill to assume some cases, but it shouldn't cost much at runtime.\n\t\t// https://en.wikipedia.org/wiki/Daylight_saving_time_by_country\n\t\tif (hourRangeSize === 2 && isHourJump) {\n\t\t\t// Exact 1 hour jump, most common real-world case.\n\t\t\t// There is no need to check minutes and seconds, as any value would suffice.\n\t\t\treturn startingHour in this.hour;\n\t\t} else if (hourRangeSize === 1) {\n\t\t\t// less than 1 hour jump, rare but does exist.\n\t\t\treturn (\n\t\t\t\tstartingHour in this.hour &&\n\t\t\t\tthis._checkTimeInSkippedRangeSingleHour(\n\t\t\t\t\tstartingMinute,\n\t\t\t\t\tafterJumpingPoint.minute\n\t\t\t\t)\n\t\t\t);\n\t\t} else {\n\t\t\t// non-round or multi-hour jump. (does not exist in the real world at the time of writing)\n\t\t\treturn this._checkTimeInSkippedRangeMultiHour(\n\t\t\t\tstartingHour,\n\t\t\t\tstartingMinute,\n\t\t\t\tafterJumpingPoint.hour,\n\t\t\t\tafterJumpingPoint.minute\n\t\t\t);\n\t\t}\n\t}",
    "line_range": [
        498,
        537
    ],
    "command_specific_fields": {
        "method_name": "_checkTimeInSkippedRange"
    },
    "language": "typescript",
    "commit": "1eb978b8cddf8a2f2bead841adcad408238333c6",
    "prompt": ""
}