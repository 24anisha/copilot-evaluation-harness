{
    "case_id": "case-605",
    "repo_name": "kelektiv/node-cron",
    "file_path": "src/time.ts",
    "code_snippet": "\t\t\t\tstartingHour,\n\t\t\t\tstartingMinute,\n\t\t\t\tafterJumpingPoint.hour,\n\t\t\t\tafterJumpingPoint.minute\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * Component of checking if a CronJob time existed in a DateTime range skipped by DST.\n\t * This subroutine makes a further assumption that the skipped range is fully contained in one hour,\n\t * and that all other larger units are valid for the job.\n\t *\n\t * for example a jump from 02:00:00 to 02:30:00, but not from 02:00:00 to 03:00:00.\n\t * @see _checkTimeInSkippedRange\n\t *\n\t * This is done by checking if any minute in startMinute - endMinute is valid, excluding endMinute.\n\t * For endMinute, there is only a match if the 0th second is a valid time.\n\t */\n\tprivate _checkTimeInSkippedRangeSingleHour(\n\t\tstartMinute: number,\n\t\tendMinute: number\n\t) {\n\t\tfor (let minute = startMinute; minute < endMinute; ++minute) {\n\t\t\tif (minute in this.minute) return true;\n\t\t}\n\n\t\t// Unless the very last second of the jump matched, there is no match.\n\t\treturn endMinute in this.minute && 0 in this.second;\n\t}\n\n\t/**\n\t * Component of checking if a CronJob time existed in a DateTime range skipped by DST.\n\t * This subroutine assumes the jump touches at least 2 hours, but the jump does not necessarily fully contain these hours.\n\t *\n\t * @see _checkTimeInSkippedRange\n\t *\n\t * This is done by defining the minutes to check for the first and last hour,\n\t * and checking all 60 minutes for any hours in between them.\n\t *\n",
    "line_range": [
        498,
        537
    ],
    "command_specific_fields": {
        "method_name": "_checkTimeInSkippedRange"
    },
    "language": "typescript",
    "commit": "1eb978b8cddf8a2f2bead841adcad408238333c6",
    "prompt": ""
}