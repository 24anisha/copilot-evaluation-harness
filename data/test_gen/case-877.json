{
    "case_id": "case-877",
    "repo_name": "ranger/ranger",
    "file_path": "ranger/gui/widgets/view_miller.py",
    "code_snippet": "\n\n    def _draw_borders(self, border_types):  # pylint: disable=too-many-branches\n\n        win = self.win\n\n\n\n        self.color('in_browser', 'border')\n\n\n\n        left_start = 0\n\n        right_end = self.wid - 1\n\n\n\n        for child in self.columns:\n\n            if not child.has_preview():\n\n                left_start = child.x + child.wid\n\n            else:\n\n                break\n\n\n\n        # Shift the rightmost vertical line to the left to create a padding,\n\n        # but only when padding_right is on, the preview column is collapsed\n\n        # and we did not open the pager to \"zoom\" in to the file.\n\n        if self.settings.padding_right and not self.pager.visible and self.is_collapsed:\n\n            right_end = self.columns[-1].x - 1\n\n            if right_end < left_start:\n\n                right_end = self.wid - 1\n\n\n\n        # Draw horizontal lines and the leftmost vertical line\n\n        if 'outline' in border_types:\n\n            try:\n\n                # pylint: disable=no-member\n\n                win.hline(0, left_start, curses.ACS_HLINE, right_end - left_start)\n\n                win.hline(self.hei - 1, left_start, curses.ACS_HLINE, right_end - left_start)\n\n                win.vline(1, left_start, curses.ACS_VLINE, self.hei - 2)\n\n                # pylint: enable=no-member\n\n            except curses.error:\n\n                pass\n\n\n\n        # Draw the vertical lines in the middle\n\n        if 'separators' in border_types:\n\n            for child in self.columns[:-1]:\n\n                if not child.has_preview():\n\n                    continue\n\n                if child.main_column and self.pager.visible:\n\n                    # If we \"zoom in\" with the pager, we have to\n\n                    # skip the between main_column and pager.\n\n                    break\n\n                x = child.x + child.wid\n\n                y = self.hei - 1\n\n                try:\n\n                    # pylint: disable=no-member\n\n                    win.vline(1, x, curses.ACS_VLINE, y - 1)\n\n                    if 'outline' in border_types:\n\n                        self.addch(0, x, curses.ACS_TTEE, 0)\n\n                        self.addch(y, x, curses.ACS_BTEE, 0)\n\n                    else:\n\n                        self.addch(0, x, curses.ACS_VLINE, 0)\n\n                        self.addch(y, x, curses.ACS_VLINE, 0)\n\n                    # pylint: enable=no-member\n\n                except curses.error:\n\n                    # in case it's off the boundaries\n\n                    pass\n\n\n\n        if 'outline' in border_types:\n\n            # Draw the last vertical line\n\n            try:\n\n                # pylint: disable=no-member\n\n                win.vline(1, right_end, curses.ACS_VLINE, self.hei - 2)\n\n                # pylint: enable=no-member\n\n            except curses.error:\n\n                pass\n\n\n\n        if 'outline' in border_types:\n\n            # pylint: disable=no-member\n\n            self.addch(0, left_start, curses.ACS_ULCORNER)\n\n            self.addch(self.hei - 1, left_start, curses.ACS_LLCORNER)\n\n            self.addch(0, right_end, curses.ACS_URCORNER)\n\n            self.addch(self.hei - 1, right_end, curses.ACS_LRCORNER)\n",
    "line_range": [
        113,
        187
    ],
    "command_specific_fields": {
        "method_name": "_draw_borders"
    },
    "language": "python",
    "commit": "80baec602c32208fc3c8a979ce48db53ccdd6725",
    "prompt": ""
}