{
    "case_id": "case-939",
    "repo_name": "harelba/q",
    "file_path": "bin/q.py",
    "code_snippet": "\n\n    def normalize_col_vals(self, col_vals):\n\n        # Make sure that numeric column indices are initializd\n\n        self.initialize_numeric_column_indices_if_needed()\n\n\n\n        col_vals = self.nullify_values_if_needed(col_vals)\n\n\n\n        expected_col_count = self.column_inferer.get_column_count()\n\n        actual_col_count = len(col_vals)\n\n        if self.mode == 'strict':\n\n            if actual_col_count != expected_col_count:\n\n                raise StrictModeColumnCountMismatchException(\",\".join(self.delimited_file_reader.atomic_fns), expected_col_count,actual_col_count,self.delimited_file_reader.get_lines_read())\n\n            return col_vals\n\n\n\n        # in all non strict mode, we add dummy data to missing columns\n\n\n\n        if actual_col_count < expected_col_count:\n\n            col_vals = col_vals + \\\n\n                [None for x in range(expected_col_count - actual_col_count)]\n\n\n\n        # in relaxed mode, we merge all extra columns to the last column value\n\n        if self.mode == 'relaxed':\n\n            if actual_col_count > expected_col_count:\n\n                xxx = col_vals[:expected_col_count - 1] + \\\n\n                    [self.input_delimiter.join([v if v  is not None else '' for v in\n\n                        col_vals[expected_col_count - 1:]])]\n\n                return xxx\n\n            else:\n\n                return col_vals\n\n\n\n        assert False, \"Unidentified parsing mode %s\" % self.mode\n",
    "line_range": [
        2292,
        2323
    ],
    "command_specific_fields": {
        "method_name": "normalize_col_vals"
    },
    "language": "python",
    "commit": "03e8b395055747a45f8c12480fd4ed95c2b4e906",
    "prompt": ""
}