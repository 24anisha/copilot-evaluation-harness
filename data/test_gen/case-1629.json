{
    "case_id": "case-1629",
    "repo_name": "networkx/networkx",
    "file_path": "networkx/readwrite/sparse6.py",
    "code_snippet": "\n\n\n\n@nx._dispatchable(graphs=None, returns_graph=True)\n\ndef from_sparse6_bytes(string):\n\n    \"\"\"Read an undirected graph in sparse6 format from string.\n\n\n\n    Parameters\n\n    ----------\n\n    string : string\n\n       Data in sparse6 format\n\n\n\n    Returns\n\n    -------\n\n    G : Graph\n\n\n\n    Raises\n\n    ------\n\n    NetworkXError\n\n        If the string is unable to be parsed in sparse6 format\n\n\n\n    Examples\n\n    --------\n\n    >>> G = nx.from_sparse6_bytes(b\":A_\")\n\n    >>> sorted(G.edges())\n\n    [(0, 1), (0, 1), (0, 1)]\n\n\n\n    See Also\n\n    --------\n\n    read_sparse6, write_sparse6\n\n\n\n    References\n\n    ----------\n\n    .. [1] Sparse6 specification\n\n           <https://users.cecs.anu.edu.au/~bdm/data/formats.html>\n\n\n\n    \"\"\"\n\n    if string.startswith(b\">>sparse6<<\"):\n\n        string = string[11:]\n\n    if not string.startswith(b\":\"):\n\n        raise NetworkXError(\"Expected leading colon in sparse6\")\n\n\n\n    chars = [c - 63 for c in string[1:]]\n\n    n, data = data_to_n(chars)\n\n    k = 1\n\n    while 1 << k < n:\n\n        k += 1\n\n\n\n    def parseData():\n\n        \"\"\"Returns stream of pairs b[i], x[i] for sparse6 format.\"\"\"\n\n        chunks = iter(data)\n\n        d = None  # partial data word\n\n        dLen = 0  # how many unparsed bits are left in d\n\n\n\n        while 1:\n\n            if dLen < 1:\n\n                try:\n\n                    d = next(chunks)\n\n                except StopIteration:\n\n                    return\n\n                dLen = 6\n\n            dLen -= 1\n\n            b = (d >> dLen) & 1  # grab top remaining bit\n\n\n\n            x = d & ((1 << dLen) - 1)  # partially built up value of x\n\n            xLen = dLen  # how many bits included so far in x\n\n            while xLen < k:  # now grab full chunks until we have enough\n\n                try:\n\n                    d = next(chunks)\n\n                except StopIteration:\n\n                    return\n\n                dLen = 6\n\n                x = (x << 6) + d\n\n                xLen += 6\n\n            x = x >> (xLen - k)  # shift back the extra bits\n\n            dLen = xLen - k\n\n            yield b, x\n\n\n\n    v = 0\n\n\n\n    G = nx.MultiGraph()\n\n    G.add_nodes_from(range(n))\n\n\n\n    multigraph = False\n\n    for b, x in parseData():\n\n        if b == 1:\n\n            v += 1\n\n        # padding with ones can cause overlarge number here\n\n        if x >= n or v >= n:\n\n            break\n\n        elif x > v:\n\n            v = x\n\n        else:\n\n            if G.has_edge(x, v):\n\n                multigraph = True\n\n            G.add_edge(x, v)\n\n    if not multigraph:\n\n        G = nx.Graph(G)\n\n    return G\n",
    "line_range": [
        103,
        200
    ],
    "command_specific_fields": {
        "method_name": "from_sparse6_bytes"
    },
    "language": "python",
    "commit": "89718e0514bded93ded5b00aed755a4474c1dc6f",
    "prompt": ""
}