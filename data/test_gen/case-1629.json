{
    "case_id": "case-1629",
    "repo_name": "networkx/networkx",
    "file_path": "networkx/readwrite/sparse6.py",
    "code_snippet": "\n\n@nx._dispatchable(graphs=None, returns_graph=True)\ndef from_sparse6_bytes(string):\n    \"\"\"Read an undirected graph in sparse6 format from string.\n\n    Parameters\n    ----------\n    string : string\n       Data in sparse6 format\n\n    Returns\n    -------\n    G : Graph\n\n    Raises\n    ------\n    NetworkXError\n        If the string is unable to be parsed in sparse6 format\n\n    Examples\n    --------\n    >>> G = nx.from_sparse6_bytes(b\":A_\")\n    >>> sorted(G.edges())\n    [(0, 1), (0, 1), (0, 1)]\n\n    See Also\n    --------\n    read_sparse6, write_sparse6\n\n    References\n    ----------\n    .. [1] Sparse6 specification\n           <https://users.cecs.anu.edu.au/~bdm/data/formats.html>\n\n    \"\"\"\n    if string.startswith(b\">>sparse6<<\"):\n        string = string[11:]\n    if not string.startswith(b\":\"):\n        raise NetworkXError(\"Expected leading colon in sparse6\")\n\n    chars = [c - 63 for c in string[1:]]\n    n, data = data_to_n(chars)\n    k = 1\n    while 1 << k < n:\n        k += 1\n\n    def parseData():\n        \"\"\"Returns stream of pairs b[i], x[i] for sparse6 format.\"\"\"\n        chunks = iter(data)\n        d = None  # partial data word\n        dLen = 0  # how many unparsed bits are left in d\n\n        while 1:\n            if dLen < 1:\n                try:\n                    d = next(chunks)\n                except StopIteration:\n                    return\n                dLen = 6\n            dLen -= 1\n            b = (d >> dLen) & 1  # grab top remaining bit\n\n            x = d & ((1 << dLen) - 1)  # partially built up value of x\n            xLen = dLen  # how many bits included so far in x\n            while xLen < k:  # now grab full chunks until we have enough\n                try:\n                    d = next(chunks)\n                except StopIteration:\n                    return\n                dLen = 6\n                x = (x << 6) + d\n                xLen += 6\n            x = x >> (xLen - k)  # shift back the extra bits\n            dLen = xLen - k\n            yield b, x\n\n    v = 0\n\n    G = nx.MultiGraph()\n    G.add_nodes_from(range(n))\n\n    multigraph = False\n    for b, x in parseData():\n        if b == 1:\n            v += 1\n        # padding with ones can cause overlarge number here\n        if x >= n or v >= n:\n            break\n        elif x > v:\n            v = x\n        else:\n            if G.has_edge(x, v):\n                multigraph = True\n            G.add_edge(x, v)\n    if not multigraph:\n        G = nx.Graph(G)\n    return G\n",
    "line_range": [
        103,
        200
    ],
    "command_specific_fields": {
        "method_name": "from_sparse6_bytes"
    },
    "language": "python",
    "commit": "89718e0514bded93ded5b00aed755a4474c1dc6f",
    "prompt": ""
}