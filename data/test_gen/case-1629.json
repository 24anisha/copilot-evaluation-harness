{
    "case_id": "case-0",
    "repo_name": "networkx/networkx",
    "file_path": "networkx/readwrite/sparse6.py",
    "code_snippet": "    if string.startswith(b\">>sparse6<<\"):\n        string = string[11:]\n    if not string.startswith(b\":\"):\n        raise NetworkXError(\"Expected leading colon in sparse6\")\n\n    chars = [c - 63 for c in string[1:]]\n    n, data = data_to_n(chars)\n    k = 1\n    while 1 << k < n:\n        k += 1\n\n    def parseData():\n        \"\"\"Returns stream of pairs b[i], x[i] for sparse6 format.\"\"\"\n        chunks = iter(data)\n        d = None  \n        dLen = 0  \n\n        while 1:\n            if dLen < 1:\n                try:\n                    d = next(chunks)\n                except StopIteration:\n                    return\n                dLen = 6\n            dLen -= 1\n            b = (d >> dLen) & 1  \n\n            x = d & ((1 << dLen) - 1)  \n            xLen = dLen  \n            while xLen < k:  \n                try:\n                    d = next(chunks)\n                except StopIteration:\n                    return\n                dLen = 6\n                x = (x << 6) + d\n                xLen += 6\n            x = x >> (xLen - k)  \n            dLen = xLen - k\n            yield b, x\n\n    v = 0\n\n    G = nx.MultiGraph()\n    G.add_nodes_from(range(n))\n\n    multigraph = False\n    for b, x in parseData():\n        if b == 1:\n            v += 1\n        \n        if x >= n or v >= n:\n            break\n        elif x > v:\n            v = x\n        else:\n            if G.has_edge(x, v):\n                multigraph = True\n            G.add_edge(x, v)\n    if not multigraph:\n        G = nx.Graph(G)\n    return G",
    "line_range": [
        103,
        200
    ],
    "command_specific_fields": {
        "method_name": "from_sparse6_bytes"
    },
    "language": "python",
    "commit": "89718e0514bded93ded5b00aed755a4474c1dc6f",
    "prompt": ""
}