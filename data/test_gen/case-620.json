{
    "case_id": "case-0",
    "repo_name": "kelektiv/node-cron",
    "file_path": "src/job.ts",
    "code_snippet": "{\n\t\tif (this.running) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst MAXDELAY = 2147483647; // The maximum number of milliseconds setTimeout will wait.\n\t\tlet timeout = this.cronTime.getTimeout();\n\t\tlet remaining = 0;\n\t\tlet startTime: number;\n\n\t\tconst setCronTimeout = (t: number) => {\n\t\t\tstartTime = Date.now();\n\t\t\tthis._timeout = setTimeout(callbackWrapper, t);\n\t\t\tif (this.unrefTimeout && typeof this._timeout.unref === 'function') {\n\t\t\t\tthis._timeout.unref();\n\t\t\t}\n\t\t};\n\n\t\t// The callback wrapper checks if it needs to sleep another period or not\n\t\t// and does the real callback logic when it's time.\n\t\tconst callbackWrapper = () => {\n\t\t\tconst diff = startTime + timeout - Date.now();\n\n\t\t\tif (diff > 0) {\n\t\t\t\tlet newTimeout = this.cronTime.getTimeout();\n\n\t\t\t\tif (newTimeout > diff) {\n\t\t\t\t\tnewTimeout = diff;\n\t\t\t\t}\n\n\t\t\t\tremaining += newTimeout;\n\t\t\t}\n\n\t\t\t// If there is sleep time remaining, calculate how long and go to sleep\n\t\t\t// again. This processing might make us miss the deadline by a few ms\n\t\t\t// times the number of sleep sessions. Given a MAXDELAY of almost a\n\t\t\t// month, this should be no issue.\n\t\t\tif (remaining) {\n\t\t\t\tif (remaining > MAXDELAY) {\n\t\t\t\t\tremaining -= MAXDELAY;\n\t\t\t\t\ttimeout = MAXDELAY;\n\t\t\t\t} else {\n\t\t\t\t\ttimeout = remaining;\n\t\t\t\t\tremaining = 0;\n\t\t\t\t}\n\n\t\t\t\tsetCronTimeout(timeout);\n\t\t\t} else {\n\t\t\t\t// We have arrived at the correct point in time.\n\t\t\t\tthis.lastExecution = new Date();\n\n\t\t\t\tthis.running = false;\n\n\t\t\t\t// start before calling back so the callbacks have the ability to stop the cron job\n\t\t\t\tif (!this.runOnce) {\n\t\t\t\t\tthis.start();\n\t\t\t\t}\n\n\t\t\t\tthis.fireOnTick();\n\t\t\t}\n\t\t};\n\n\t\tif (timeout >= 0) {\n\t\t\tthis.running = true;\n\n\t\t\t// Don't try to sleep more than MAXDELAY ms at a time.\n\n\t\t\tif (timeout > MAXDELAY) {\n\t\t\t\tremaining = timeout - MAXDELAY;\n\t\t\t\ttimeout = MAXDELAY;\n\t\t\t}\n\n\t\t\tsetCronTimeout(timeout);\n\t\t} else {\n\t\t\tthis.stop();\n\t\t}\n\t}",
    "line_range": [
        209,
        287
    ],
    "command_specific_fields": {
        "method_name": "start"
    },
    "language": "typescript",
    "commit": "1eb978b8cddf8a2f2bead841adcad408238333c6"
}