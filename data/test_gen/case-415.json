{
    "case_id": "case-415",
    "repo_name": "tj/commander.js",
    "file_path": "lib/help.js",
    "code_snippet": "   */\n\n\n\n  optionDescription(option) {\n\n    const extraInfo = [];\n\n\n\n    if (option.argChoices) {\n\n      extraInfo.push(\n\n        // use stringify to match the display of the default value\n\n        `choices: ${option.argChoices.map((choice) => JSON.stringify(choice)).join(', ')}`,\n\n      );\n\n    }\n\n    if (option.defaultValue !== undefined) {\n\n      // default for boolean and negated more for programmer than end user,\n\n      // but show true/false for boolean option as may be for hand-rolled env or config processing.\n\n      const showDefault =\n\n        option.required ||\n\n        option.optional ||\n\n        (option.isBoolean() && typeof option.defaultValue === 'boolean');\n\n      if (showDefault) {\n\n        extraInfo.push(\n\n          `default: ${option.defaultValueDescription || JSON.stringify(option.defaultValue)}`,\n\n        );\n\n      }\n\n    }\n\n    // preset for boolean and negated are more for programmer than end user\n\n    if (option.presetArg !== undefined && option.optional) {\n\n      extraInfo.push(`preset: ${JSON.stringify(option.presetArg)}`);\n\n    }\n\n    if (option.envVar !== undefined) {\n\n      extraInfo.push(`env: ${option.envVar}`);\n\n    }\n\n    if (extraInfo.length > 0) {\n\n      return `${option.description} (${extraInfo.join(', ')})`;\n\n    }\n\n\n\n    return option.description;\n\n  }\n",
    "line_range": [
        294,
        330
    ],
    "command_specific_fields": {
        "method_name": "optionDescription"
    },
    "language": "javascript",
    "commit": "970ecae402b253de691e6a9066fea22f38fe7431",
    "prompt": ""
}