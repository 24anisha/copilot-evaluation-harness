{
    "case_id": "case-323",
    "repo_name": "fluent-ffmpeg/node-fluent-ffmpeg",
    "file_path": "lib/options/videosize.js",
    "code_snippet": " * @private\n\n */\n\nfunction getScalePadFilters(width, height, aspect, color) {\n\n  /*\n\n    let a be the input aspect ratio, A be the requested aspect ratio\n\n\n\n    if a > A, padding is done on top and bottom\n\n    if a < A, padding is done on left and right\n\n   */\n\n\n\n  return [\n\n    /*\n\n      In both cases, we first have to scale the input to match the requested size.\n\n      When using computed width/height, we truncate them to multiples of 2\n\n     */\n\n    {\n\n      filter: 'scale',\n\n      options: {\n\n        w: 'if(gt(a,' + aspect + '),' + width + ',trunc(' + height + '*a/2)*2)',\n\n        h: 'if(lt(a,' + aspect + '),' + height + ',trunc(' + width + '/a/2)*2)'\n\n      }\n\n    },\n\n\n\n    /*\n\n      Then we pad the scaled input to match the target size\n\n      (here iw and ih refer to the padding input, i.e the scaled output)\n\n     */\n\n\n\n    {\n\n      filter: 'pad',\n\n      options: {\n\n        w: width,\n\n        h: height,\n\n        x: 'if(gt(a,' + aspect + '),0,(' + width + '-iw)/2)',\n\n        y: 'if(lt(a,' + aspect + '),0,(' + height + '-ih)/2)',\n\n        color: color\n\n      }\n\n    }\n\n  ];\n\n}\n",
    "line_range": [
        17,
        56
    ],
    "command_specific_fields": {
        "method_name": "getScalePadFilters"
    },
    "language": "javascript",
    "commit": "fafb8d3a66f91485907145d776cc14272e402f48",
    "prompt": ""
}