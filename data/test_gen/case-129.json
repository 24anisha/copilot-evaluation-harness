{
    "case_id": "case-129",
    "repo_name": "Rob--W/cors-anywhere",
    "file_path": "lib/cors-anywhere.js",
    "code_snippet": " * @returns {boolean} true if http-proxy should continue to pipe proxyRes to res.\n */\nfunction onProxyResponse(proxy, proxyReq, proxyRes, req, res) {\n  var requestState = req.corsAnywhereRequestState;\n\n  var statusCode = proxyRes.statusCode;\n\n  if (!requestState.redirectCount_) {\n    res.setHeader('x-request-url', requestState.location.href);\n  }\n  // Handle redirects\n  if (statusCode === 301 || statusCode === 302 || statusCode === 303 || statusCode === 307 || statusCode === 308) {\n    var locationHeader = proxyRes.headers.location;\n    var parsedLocation;\n    if (locationHeader) {\n      locationHeader = url.resolve(requestState.location.href, locationHeader);\n      parsedLocation = parseURL(locationHeader);\n    }\n    if (parsedLocation) {\n      if (statusCode === 301 || statusCode === 302 || statusCode === 303) {\n        // Exclude 307 & 308, because they are rare, and require preserving the method + request body\n        requestState.redirectCount_ = requestState.redirectCount_ + 1 || 1;\n        if (requestState.redirectCount_ <= requestState.maxRedirects) {\n          // Handle redirects within the server, because some clients (e.g. Android Stock Browser)\n          // cancel redirects.\n          // Set header for debugging purposes. Do not try to parse it!\n          res.setHeader('X-CORS-Redirect-' + requestState.redirectCount_, statusCode + ' ' + locationHeader);\n\n          req.method = 'GET';\n          req.headers['content-length'] = '0';\n          delete req.headers['content-type'];\n          requestState.location = parsedLocation;\n\n          // Remove all listeners (=reset events to initial state)\n          req.removeAllListeners();\n\n          // Remove the error listener so that the ECONNRESET \"error\" that\n          // may occur after aborting a request does not propagate to res.\n          // https://github.com/nodejitsu/node-http-proxy/blob/v1.11.1/lib/http-proxy/passes/web-incoming.js#L134\n          proxyReq.removeAllListeners('error');\n          proxyReq.once('error', function catchAndIgnoreError() {});\n          proxyReq.abort();\n\n          // Initiate a new proxy request.\n          proxyRequest(req, res, proxy);\n          return false;\n        }\n      }\n      proxyRes.headers.location = requestState.proxyBaseUrl + '/' + locationHeader;\n    }\n  }\n\n  // Strip cookies\n  delete proxyRes.headers['set-cookie'];\n  delete proxyRes.headers['set-cookie2'];\n\n  proxyRes.headers['x-final-url'] = requestState.location.href;\n  withCORS(proxyRes.headers, req);\n  return true;\n}\n",
    "line_range": [
        161,
        220
    ],
    "command_specific_fields": {
        "method_name": "onProxyResponse"
    },
    "language": "javascript",
    "commit": "70aaa22b3f9ad30c8566024bf25484fd1ed9bda9",
    "prompt": ""
}