{
    "case_id": "case-915",
    "repo_name": "psf/requests",
    "file_path": "src/requests/utils.py",
    "code_snippet": "\n\n\n\ndef resolve_proxies(request, proxies, trust_env=True):\n\n    \"\"\"This method takes proxy information from a request and configuration\n\n    input to resolve a mapping of target proxies. This will consider settings\n\n    such as NO_PROXY to strip proxy configurations.\n\n\n\n    :param request: Request or PreparedRequest\n\n    :param proxies: A dictionary of schemes or schemes and hosts to proxy URLs\n\n    :param trust_env: Boolean declaring whether to trust environment configs\n\n\n\n    :rtype: dict\n\n    \"\"\"\n\n    proxies = proxies if proxies is not None else {}\n\n    url = request.url\n\n    scheme = urlparse(url).scheme\n\n    no_proxy = proxies.get(\"no_proxy\")\n\n    new_proxies = proxies.copy()\n\n\n\n    if trust_env and not should_bypass_proxies(url, no_proxy=no_proxy):\n\n        environ_proxies = get_environ_proxies(url, no_proxy=no_proxy)\n\n\n\n        proxy = environ_proxies.get(scheme, environ_proxies.get(\"all\"))\n\n\n\n        if proxy:\n\n            new_proxies.setdefault(scheme, proxy)\n\n    return new_proxies\n",
    "line_range": [
        865,
        891
    ],
    "command_specific_fields": {
        "method_name": "resolve_proxies"
    },
    "language": "python",
    "commit": "79b74ef704dc0d804937c0d015c5e9c3b02b79bd",
    "prompt": ""
}