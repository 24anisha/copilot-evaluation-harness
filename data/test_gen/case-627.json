{
    "case_id": "case-627",
    "repo_name": "kelektiv/node-cron",
    "file_path": "src/time.ts",
    "code_snippet": "\t */\n\n\tprivate _parse(source: string) {\n\n\t\tsource = source.toLowerCase();\n\n\n\n\t\tif (Object.keys(PRESETS).includes(source)) {\n\n\t\t\tsource = PRESETS[source as keyof typeof PRESETS];\n\n\t\t}\n\n\n\n\t\tsource = source.replace(/[a-z]{1,3}/gi, (alias: string) => {\n\n\t\t\tif (Object.keys(ALIASES).includes(alias)) {\n\n\t\t\t\treturn ALIASES[alias as keyof typeof ALIASES].toString();\n\n\t\t\t}\n\n\n\n\t\t\tthrow new CronError(`Unknown alias: ${alias}`);\n\n\t\t});\n\n\n\n\t\tconst units = source.trim().split(/\\s+/);\n\n\n\n\t\t// seconds are optional\n\n\t\tif (units.length < TIME_UNITS_LEN - 1) {\n\n\t\t\tthrow new CronError('Too few fields');\n\n\t\t}\n\n\n\n\t\tif (units.length > TIME_UNITS_LEN) {\n\n\t\t\tthrow new CronError('Too many fields');\n\n\t\t}\n\n\n\n\t\tconst unitsLen = units.length;\n\n\t\tfor (const unit of TIME_UNITS) {\n\n\t\t\tconst i = TIME_UNITS.indexOf(unit);\n\n\t\t\t// If the split source string doesn't contain all digits,\n\n\t\t\t// assume defaults for first n missing digits.\n\n\t\t\t// This adds support for 5-digit standard cron syntax\n\n\t\t\tconst cur =\n\n\t\t\t\tunits[i - (TIME_UNITS_LEN - unitsLen)] ?? PARSE_DEFAULTS[unit];\n\n\t\t\tthis._parseField(cur, unit);\n\n\t\t}\n\n\t}\n",
    "line_range": [
        696,
        734
    ],
    "command_specific_fields": {
        "method_name": "_parse"
    },
    "language": "typescript",
    "commit": "1eb978b8cddf8a2f2bead841adcad408238333c6",
    "prompt": ""
}