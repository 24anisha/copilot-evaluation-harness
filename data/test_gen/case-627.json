{
    "case_id": "case-627",
    "repo_name": "kelektiv/node-cron",
    "file_path": "src/time.ts",
    "code_snippet": "\t\t\t// This adds support for 5-digit standard cron syntax\n\t\t\tconst cur =\n\t\t\t\tunits[i - (TIME_UNITS_LEN - unitsLen)] ?? PARSE_DEFAULTS[unit];\n\t\t\tthis._parseField(cur, unit);\n\t\t}\n\t}\n\n\t/**\n\t * Parse individual field from the cron syntax provided.\n\t *\n\t * Algorithm:\n\t * - Split field by commas aand check for wildcards to ensure proper user.\n\t * - Replace wildcard values with <low>-<high> boundaries.\n\t * - Split field by commas and then iterate over ranges inside field.\n\t *   - If range matches pattern then map over matches using replace (to parse the range by the regex pattern)\n\t *   - Starting with the lower bounds of the range iterate by step up to the upper bounds and toggle the CronTime field value flag on.\n\t */\n\n\tprivate _parseField(value: string, unit: TimeUnit) {\n\t\tconst typeObj = this[unit] as TimeUnitField<typeof unit>;\n\t\tlet pointer: Ranges[typeof unit];\n\n\t\tconst constraints = CONSTRAINTS[unit];\n\t\tconst low = constraints[0];\n\t\tconst high = constraints[1];\n\n\t\tconst fields = value.split(',');\n\t\tfields.forEach(field => {\n\t\t\tconst wildcardIndex = field.indexOf('*');\n\t\t\tif (wildcardIndex !== -1 && wildcardIndex !== 0) {\n\t\t\t\tthrow new CronError(\n\t\t\t\t\t`Field (${field}) has an invalid wildcard expression`\n\t\t\t\t);\n\t\t\t}\n\t\t});\n\n\t\t// \"*\" is a shortcut to [low-high] range for the field\n\t\tvalue = value.replace(RE_WILDCARDS, `${low}-${high}`);\n\n",
    "line_range": [
        696,
        734
    ],
    "command_specific_fields": {
        "method_name": "_parse"
    },
    "language": "typescript",
    "commit": "1eb978b8cddf8a2f2bead841adcad408238333c6",
    "prompt": ""
}