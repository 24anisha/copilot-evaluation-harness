{
    "case_id": "case-1763",
    "repo_name": "maurosoria/dirsearch",
    "file_path": "lib/core/fuzzer.py",
    "code_snippet": "        not_found_callbacks: tuple[Callable[[BaseResponse], Any], ...],\n        error_callbacks: tuple[Callable[[RequestException], Any], ...],\n    ) -> None:\n        self._requester = requester\n        self._dictionary = dictionary\n        self._base_path: str = \"\"\n        self.match_callbacks = match_callbacks\n        self.not_found_callbacks = not_found_callbacks\n        self.error_callbacks = error_callbacks\n\n        self.scanners: dict[str, dict[str, Scanner]] = {\n            \"default\": {},\n            \"prefixes\": {},\n            \"suffixes\": {},\n        }\n\n    def set_base_path(self, path: str) -> None:\n        self._base_path = path\n\n    def get_scanners_for(self, path: str) -> Generator[BaseScanner, None, None]:\n        # Clean the path, so can check for extensions/suffixes\n        path = clean_path(path)\n\n        for prefix in self.scanners[\"prefixes\"]:\n            if path.startswith(prefix):\n                yield self.scanners[\"prefixes\"][prefix]\n\n        for suffix in self.scanners[\"suffixes\"]:\n            if path.endswith(suffix):\n                yield self.scanners[\"suffixes\"][suffix]\n\n        for scanner in self.scanners[\"default\"].values():\n            yield scanner\n\n    @staticmethod\n    def is_excluded(resp: BaseResponse) -> bool:\n        \"\"\"Validate the response by different filters\"\"\"\n\n        if resp.status in options[\"exclude_status_codes\"]:\n            return True\n\n",
    "line_range": [
        50,
        90
    ],
    "command_specific_fields": {
        "method_name": "setup_scanners"
    },
    "language": "python",
    "commit": "59bc9ce43063a1036cf0077f2f1e68883397dac4",
    "prompt": ""
}