{
    "case_id": "case-792",
    "repo_name": "Zulko/moviepy",
    "file_path": "moviepy/video/VideoClip.py",
    "code_snippet": "        imsave(filename, im)\n\n\n\n    @requires_duration\n\n    @use_clip_fps_by_default\n\n    @convert_masks_to_RGB\n\n    @convert_path_to_string([\"filename\", \"temp_audiofile\", \"temp_audiofile_path\"])\n\n    def write_videofile(\n\n        self,\n\n        filename,\n\n        fps=None,\n\n        codec=None,\n\n        bitrate=None,\n\n        audio=True,\n\n        audio_fps=44100,\n\n        preset=\"medium\",\n\n        audio_nbytes=4,\n\n        audio_codec=None,\n\n        audio_bitrate=None,\n\n        audio_bufsize=2000,\n\n        temp_audiofile=None,\n\n        temp_audiofile_path=\"\",\n\n        remove_temp=True,\n\n        write_logfile=False,\n\n        threads=None,\n\n        ffmpeg_params=None,\n\n        logger=\"bar\",\n\n        pixel_format=None,\n\n    ):\n\n        \"\"\"Write the clip to a videofile.\n\n\n\n        Parameters\n\n        ----------\n\n\n\n        filename\n\n          Name of the video file to write in, as a string or a path-like object.\n\n          The extension must correspond to the \"codec\" used (see below),\n\n          or simply be '.avi' (which will work with any codec).\n\n\n\n        fps\n\n          Number of frames per second in the resulting video file. If None is\n\n          provided, and the clip has an fps attribute, this fps will be used.\n\n\n\n        codec\n\n          Codec to use for image encoding. Can be any codec supported\n\n          by ffmpeg. If the filename is has extension '.mp4', '.ogv', '.webm',\n\n          the codec will be set accordingly, but you can still set it if you\n\n          don't like the default. For other extensions, the output filename\n\n          must be set accordingly.\n\n\n\n          Some examples of codecs are:\n\n\n\n          - ``'libx264'`` (default codec for file extension ``.mp4``)\n\n            makes well-compressed videos (quality tunable using 'bitrate').\n\n          - ``'mpeg4'`` (other codec for extension ``.mp4``) can be an alternative\n\n            to ``'libx264'``, and produces higher quality videos by default.\n\n          - ``'rawvideo'`` (use file extension ``.avi``) will produce\n\n            a video of perfect quality, of possibly very huge size.\n\n          - ``png`` (use file extension ``.avi``) will produce a video\n\n            of perfect quality, of smaller size than with ``rawvideo``.\n\n          - ``'libvorbis'`` (use file extension ``.ogv``) is a nice video\n\n            format, which is completely free/ open source. However not\n\n            everyone has the codecs installed by default on their machine.\n\n          - ``'libvpx'`` (use file extension ``.webm``) is tiny a video\n\n            format well indicated for web videos (with HTML5). Open source.\n\n\n\n        audio\n\n          Either ``True``, ``False``, or a file name.\n\n          If ``True`` and the clip has an audio clip attached, this\n\n          audio clip will be incorporated as a soundtrack in the movie.\n\n          If ``audio`` is the name of an audio file, this audio file\n\n          will be incorporated as a soundtrack in the movie.\n\n\n\n        audio_fps\n\n          frame rate to use when generating the sound.\n\n\n\n        temp_audiofile\n\n          the name of the temporary audiofile, as a string or path-like object,\n\n          to be created and then used to write the complete video, if any.\n\n\n\n        temp_audiofile_path\n\n          the location that the temporary audiofile is placed, as a\n\n          string or path-like object. Defaults to the current working directory.\n\n\n\n        audio_codec\n\n          Which audio codec should be used. Examples are 'libmp3lame'\n\n          for '.mp3', 'libvorbis' for 'ogg', 'libfdk_aac':'m4a',\n\n          'pcm_s16le' for 16-bit wav and 'pcm_s32le' for 32-bit wav.\n\n          Default is 'libmp3lame', unless the video extension is 'ogv'\n\n          or 'webm', at which case the default is 'libvorbis'.\n\n\n\n        audio_bitrate\n\n          Audio bitrate, given as a string like '50k', '500k', '3000k'.\n\n          Will determine the size/quality of audio in the output file.\n\n          Note that it mainly an indicative goal, the bitrate won't\n\n          necessarily be the this in the final file.\n\n\n\n        preset\n\n          Sets the time that FFMPEG will spend optimizing the compression.\n\n          Choices are: ultrafast, superfast, veryfast, faster, fast, medium,\n\n          slow, slower, veryslow, placebo. Note that this does not impact\n\n          the quality of the video, only the size of the video file. So\n\n          choose ultrafast when you are in a hurry and file size does not\n\n          matter.\n\n\n\n        threads\n\n          Number of threads to use for ffmpeg. Can speed up the writing of\n\n          the video on multicore computers.\n\n\n\n        ffmpeg_params\n\n          Any additional ffmpeg parameters you would like to pass, as a list\n\n          of terms, like ['-option1', 'value1', '-option2', 'value2'].\n\n\n\n        write_logfile\n\n          If true, will write log files for the audio and the video.\n\n          These will be files ending with '.log' with the name of the\n\n          output file in them.\n\n\n\n        logger\n\n          Either ``\"bar\"`` for progress bar or ``None`` or any Proglog logger.\n\n\n\n        pixel_format\n\n          Pixel format for the output video file.\n\n\n\n        Examples\n\n        --------\n\n\n\n        >>> from moviepy import VideoFileClip\n\n        >>> clip = VideoFileClip(\"myvideo.mp4\").subclip(100,120)\n\n        >>> clip.write_videofile(\"my_new_video.mp4\")\n\n        >>> clip.close()\n\n\n\n        \"\"\"\n\n        name, ext = os.path.splitext(os.path.basename(filename))\n\n        ext = ext[1:].lower()\n\n        logger = proglog.default_bar_logger(logger)\n\n\n\n        if codec is None:\n\n            try:\n\n                codec = extensions_dict[ext][\"codec\"][0]\n\n            except KeyError:\n\n                raise ValueError(\n\n                    \"MoviePy couldn't find the codec associated \"\n\n                    \"with the filename. Provide the 'codec' \"\n\n                    \"parameter in write_videofile.\"\n\n                )\n\n\n\n        if audio_codec is None:\n\n            if ext in [\"ogv\", \"webm\"]:\n\n                audio_codec = \"libvorbis\"\n\n            else:\n\n                audio_codec = \"libmp3lame\"\n\n        elif audio_codec == \"raw16\":\n\n            audio_codec = \"pcm_s16le\"\n\n        elif audio_codec == \"raw32\":\n\n            audio_codec = \"pcm_s32le\"\n\n\n\n        audiofile = audio if isinstance(audio, str) else None\n\n        make_audio = (\n\n            (audiofile is None) and (audio is True) and (self.audio is not None)\n\n        )\n\n\n\n        if make_audio and temp_audiofile:\n\n            # The audio will be the clip's audio\n\n            audiofile = temp_audiofile\n\n        elif make_audio:\n\n            audio_ext = find_extension(audio_codec)\n\n            audiofile = os.path.join(\n\n                temp_audiofile_path,\n\n                name + Clip._TEMP_FILES_PREFIX + \"wvf_snd.%s\" % audio_ext,\n\n            )\n\n\n\n        # enough cpu for multiprocessing ? USELESS RIGHT NOW, WILL COME AGAIN\n\n        # enough_cpu = (multiprocessing.cpu_count() > 1)\n\n        logger(message=\"MoviePy - Building video %s.\" % filename)\n\n        if make_audio:\n\n            self.audio.write_audiofile(\n\n                audiofile,\n\n                audio_fps,\n\n                audio_nbytes,\n\n                audio_bufsize,\n\n                audio_codec,\n\n                bitrate=audio_bitrate,\n\n                write_logfile=write_logfile,\n\n                logger=logger,\n\n            )\n\n\n\n        ffmpeg_write_video(\n\n            self,\n\n            filename,\n\n            fps,\n\n            codec,\n\n            bitrate=bitrate,\n\n            preset=preset,\n\n            write_logfile=write_logfile,\n\n            audiofile=audiofile,\n\n            threads=threads,\n\n            ffmpeg_params=ffmpeg_params,\n\n            logger=logger,\n\n            pixel_format=pixel_format,\n\n        )\n\n\n\n        if remove_temp and make_audio:\n\n            if os.path.exists(audiofile):\n\n                os.remove(audiofile)\n\n        logger(message=\"MoviePy - video ready %s\" % filename)\n",
    "line_range": [
        194,
        398
    ],
    "command_specific_fields": {
        "method_name": "write_videofile"
    },
    "language": "python",
    "commit": "0f6f6d4d9b96c69d109975549fe6293931f1a19d",
    "prompt": ""
}