{
    "case_id": "case-1210",
    "repo_name": "networkx/networkx",
    "file_path": "networkx/algorithms/centrality/load.py",
    "code_snippet": "\n\ndef _node_betweenness(G, source, cutoff=False, normalized=True, weight=None):\n    \"\"\"Node betweenness_centrality helper:\n\n    See betweenness_centrality for what you probably want.\n    This actually computes \"load\" and not betweenness.\n    See https://networkx.lanl.gov/ticket/103\n\n    This calculates the load of each node for paths from a single source.\n    (The fraction of number of shortests paths from source that go\n    through each node.)\n\n    To get the load for a node you need to do all-pairs shortest paths.\n\n    If weight is not None then use Dijkstra for finding shortest paths.\n    \"\"\"\n    # get the predecessor and path length data\n    if weight is None:\n        (pred, length) = nx.predecessor(G, source, cutoff=cutoff, return_seen=True)\n    else:\n        (pred, length) = nx.dijkstra_predecessor_and_distance(G, source, cutoff, weight)\n\n    # order the nodes by path length\n    onodes = [(l, vert) for (vert, l) in length.items()]\n    onodes.sort()\n    onodes[:] = [vert for (l, vert) in onodes if l > 0]\n\n    # initialize betweenness\n    between = {}.fromkeys(length, 1.0)\n\n    while onodes:\n        v = onodes.pop()\n        if v in pred:\n            num_paths = len(pred[v])  # Discount betweenness if more than\n            for x in pred[v]:  # one shortest path.\n                if x == source:  # stop if hit source because all remaining v\n                    break  # also have pred[v]==[source]\n                between[x] += between[v] / num_paths\n    #  remove source\n    for v in between:\n        between[v] -= 1\n    # rescale to be between 0 and 1\n    if normalized:\n        l = len(between)\n        if l > 2:\n            # scale by 1/the number of possible paths\n            scale = 1 / ((l - 1) * (l - 2))\n            for v in between:\n                between[v] *= scale\n    return between\n",
    "line_range": [
        84,
        134
    ],
    "command_specific_fields": {
        "method_name": "_node_betweenness"
    },
    "language": "python",
    "commit": "89718e0514bded93ded5b00aed755a4474c1dc6f",
    "prompt": ""
}