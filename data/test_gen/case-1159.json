{
    "case_id": "case-1159",
    "repo_name": "networkx/networkx",
    "file_path": "networkx/algorithms/shortest_paths/weighted.py",
    "code_snippet": "\n\n@nx._dispatchable(edge_attrs=\"weight\")\n\ndef all_pairs_dijkstra_path_length(G, cutoff=None, weight=\"weight\"):\n\n    \"\"\"Compute shortest path lengths between all nodes in a weighted graph.\n\n\n\n    Parameters\n\n    ----------\n\n    G : NetworkX graph\n\n\n\n    cutoff : integer or float, optional\n\n        Length (sum of edge weights) at which the search is stopped.\n\n        If cutoff is provided, only return paths with summed weight <= cutoff.\n\n\n\n    weight : string or function\n\n        If this is a string, then edge weights will be accessed via the\n\n        edge attribute with this key (that is, the weight of the edge\n\n        joining `u` to `v` will be ``G.edges[u, v][weight]``). If no\n\n        such edge attribute exists, the weight of the edge is assumed to\n\n        be one.\n\n\n\n        If this is a function, the weight of an edge is the value\n\n        returned by the function. The function must accept exactly three\n\n        positional arguments: the two endpoints of an edge and the\n\n        dictionary of edge attributes for that edge. The function must\n\n        return a number or None to indicate a hidden edge.\n\n\n\n    Returns\n\n    -------\n\n    distance : iterator\n\n        (source, dictionary) iterator with dictionary keyed by target and\n\n        shortest path length as the key value.\n\n\n\n    Examples\n\n    --------\n\n    >>> G = nx.path_graph(5)\n\n    >>> length = dict(nx.all_pairs_dijkstra_path_length(G))\n\n    >>> for node in [0, 1, 2, 3, 4]:\n\n    ...     print(f\"1 - {node}: {length[1][node]}\")\n\n    1 - 0: 1\n\n    1 - 1: 0\n\n    1 - 2: 1\n\n    1 - 3: 2\n\n    1 - 4: 3\n\n    >>> length[3][2]\n\n    1\n\n    >>> length[2][2]\n\n    0\n\n\n\n    Notes\n\n    -----\n\n    Edge weight attributes must be numerical.\n\n    Distances are calculated as sums of weighted edges traversed.\n\n\n\n    The dictionary returned only has keys for reachable node pairs.\n\n    \"\"\"\n\n    length = single_source_dijkstra_path_length\n\n    for n in G:\n\n        yield (n, length(G, n, cutoff=cutoff, weight=weight))\n",
    "line_range": [
        1027,
        1085
    ],
    "command_specific_fields": {
        "method_name": "all_pairs_dijkstra_path_length"
    },
    "language": "python",
    "commit": "89718e0514bded93ded5b00aed755a4474c1dc6f",
    "prompt": ""
}