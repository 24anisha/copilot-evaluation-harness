{
    "case_id": "case-360",
    "repo_name": "Rob--W/cors-anywhere",
    "file_path": "lib/cors-anywhere.js",
    "code_snippet": " * @param proxy {HttpProxy}\n\n */\n\nfunction proxyRequest(req, res, proxy) {\n\n  var location = req.corsAnywhereRequestState.location;\n\n  req.url = location.path;\n\n\n\n  var proxyOptions = {\n\n    changeOrigin: false,\n\n    prependPath: false,\n\n    target: location,\n\n    headers: {\n\n      host: location.host,\n\n    },\n\n    // HACK: Get hold of the proxyReq object, because we need it later.\n\n    // https://github.com/nodejitsu/node-http-proxy/blob/v1.11.1/lib/http-proxy/passes/web-incoming.js#L144\n\n    buffer: {\n\n      pipe: function(proxyReq) {\n\n        var proxyReqOn = proxyReq.on;\n\n        // Intercepts the handler that connects proxyRes to res.\n\n        // https://github.com/nodejitsu/node-http-proxy/blob/v1.11.1/lib/http-proxy/passes/web-incoming.js#L146-L158\n\n        proxyReq.on = function(eventName, listener) {\n\n          if (eventName !== 'response') {\n\n            return proxyReqOn.call(this, eventName, listener);\n\n          }\n\n          return proxyReqOn.call(this, 'response', function(proxyRes) {\n\n            if (onProxyResponse(proxy, proxyReq, proxyRes, req, res)) {\n\n              try {\n\n                listener(proxyRes);\n\n              } catch (err) {\n\n                // Wrap in try-catch because an error could occur:\n\n                // \"RangeError: Invalid status code: 0\"\n\n                // https://github.com/Rob--W/cors-anywhere/issues/95\n\n                // https://github.com/nodejitsu/node-http-proxy/issues/1080\n\n\n\n                // Forward error (will ultimately emit the 'error' event on our proxy object):\n\n                // https://github.com/nodejitsu/node-http-proxy/blob/v1.11.1/lib/http-proxy/passes/web-incoming.js#L134\n\n                proxyReq.emit('error', err);\n\n              }\n\n            }\n\n          });\n\n        };\n\n        return req.pipe(proxyReq);\n\n      },\n\n    },\n\n  };\n\n\n\n  var proxyThroughUrl = req.corsAnywhereRequestState.getProxyForUrl(location.href);\n\n  if (proxyThroughUrl) {\n\n    proxyOptions.target = proxyThroughUrl;\n\n    proxyOptions.toProxy = true;\n\n    // If a proxy URL was set, req.url must be an absolute URL. Then the request will not be sent\n\n    // directly to the proxied URL, but through another proxy.\n\n    req.url = location.href;\n\n  }\n\n\n\n  // Start proxying the request\n\n  try {\n\n    proxy.web(req, res, proxyOptions);\n\n  } catch (err) {\n\n    proxy.emit('error', err, req, res);\n\n  }\n\n}\n",
    "line_range": [
        78,
        139
    ],
    "command_specific_fields": {
        "method_name": "proxyRequest"
    },
    "language": "javascript",
    "commit": "70aaa22b3f9ad30c8566024bf25484fd1ed9bda9",
    "prompt": ""
}