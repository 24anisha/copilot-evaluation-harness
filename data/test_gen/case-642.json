{
    "case_id": "case-642",
    "repo_name": "peers/peerjs-server",
    "file_path": "src/services/webSocketServer/index.ts",
    "code_snippet": "\n\n\tprivate _onSocketConnection(socket: WebSocket, req: IncomingMessage): void {\n\n\t\t// An unhandled socket error might crash the server. Handle it first.\n\n\t\tsocket.on(\"error\", (error) => {\n\n\t\t\tthis._onSocketError(error);\n\n\t\t});\n\n\n\n\t\t// We are only interested in the query, the base url is therefore not relevant\n\n\t\tconst { searchParams } = new URL(req.url ?? \"\", \"https://peerjs\");\n\n\t\tconst { id, token, key } = Object.fromEntries(searchParams.entries());\n\n\n\n\t\tif (!id || !token || !key) {\n\n\t\t\tthis._sendErrorAndClose(socket, Errors.INVALID_WS_PARAMETERS);\n\n\t\t\treturn;\n\n\t\t}\n\n\n\n\t\tif (key !== this.config.key) {\n\n\t\t\tthis._sendErrorAndClose(socket, Errors.INVALID_KEY);\n\n\t\t\treturn;\n\n\t\t}\n\n\n\n\t\tconst client = this.realm.getClientById(id);\n\n\n\n\t\tif (client) {\n\n\t\t\tif (token !== client.getToken()) {\n\n\t\t\t\t// ID-taken, invalid token\n\n\t\t\t\tsocket.send(\n\n\t\t\t\t\tJSON.stringify({\n\n\t\t\t\t\t\ttype: MessageType.ID_TAKEN,\n\n\t\t\t\t\t\tpayload: { msg: \"ID is taken\" },\n\n\t\t\t\t\t}),\n\n\t\t\t\t);\n\n\n\n\t\t\t\tsocket.close();\n\n\t\t\t\treturn;\n\n\t\t\t}\n\n\n\n\t\t\tthis._configureWS(socket, client);\n\n\t\t\treturn;\n\n\t\t}\n\n\n\n\t\tthis._registerClient({ socket, id, token });\n\n\t}\n",
    "line_range": [
        65,
        108
    ],
    "command_specific_fields": {
        "method_name": "_onSocketConnection"
    },
    "language": "typescript",
    "commit": "aa4cdbac9cc28aac03c5054ef5b45e6fd6a1f5a3",
    "prompt": ""
}