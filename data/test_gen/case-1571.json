{
    "case_id": "case-1571",
    "repo_name": "dbcli/mycli",
    "file_path": "mycli/config.py",
    "code_snippet": "\n\n\n\ndef read_and_decrypt_mylogin_cnf(f):\n\n    \"\"\"Read and decrypt the contents of .mylogin.cnf.\n\n\n\n    This decryption algorithm mimics the code in MySQL's\n\n    mysql_config_editor.cc.\n\n\n\n    The login key is 20-bytes of random non-printable ASCII.\n\n    It is written to the actual login path file. It is used\n\n    to generate the real key used in the AES cipher.\n\n\n\n    :param f: an I/O object opened in binary mode\n\n    :return: the decrypted login path file\n\n    :rtype: io.BytesIO or None\n\n    \"\"\"\n\n\n\n    # Number of bytes used to store the length of ciphertext.\n\n    MAX_CIPHER_STORE_LEN = 4\n\n\n\n    LOGIN_KEY_LEN = 20\n\n\n\n    # Move past the unused buffer.\n\n    buf = f.read(4)\n\n\n\n    if not buf or len(buf) != 4:\n\n        logger.error('Login path file is blank or incomplete.')\n\n        return None\n\n\n\n    # Read the login key.\n\n    key = f.read(LOGIN_KEY_LEN)\n\n\n\n    # Generate the real key.\n\n    rkey = [0] * 16\n\n    for i in range(LOGIN_KEY_LEN):\n\n        try:\n\n            rkey[i % 16] ^= ord(key[i:i+1])\n\n        except TypeError:\n\n            # ord() was unable to get the value of the byte.\n\n            logger.error('Unable to generate login path AES key.')\n\n            return None\n\n    rkey = struct.pack('16B', *rkey)\n\n\n\n    # Create a bytes buffer to hold the plaintext.\n\n    plaintext = BytesIO()\n\n    aes = pyaes.AESModeOfOperationECB(rkey)\n\n\n\n    while True:\n\n        # Read the length of the ciphertext.\n\n        len_buf = f.read(MAX_CIPHER_STORE_LEN)\n\n        if len(len_buf) < MAX_CIPHER_STORE_LEN:\n\n            break\n\n        cipher_len, = struct.unpack(\"<i\", len_buf)\n\n\n\n        # Read cipher_len bytes from the file and decrypt.\n\n        cipher = f.read(cipher_len)\n\n        plain = _remove_pad(\n\n            b''.join([aes.decrypt(cipher[i: i + 16])\n\n                      for i in range(0, cipher_len, 16)])\n\n        )\n\n        if plain is False:\n\n            continue\n\n        plaintext.write(plain)\n\n\n\n    if plaintext.tell() == 0:\n\n        logger.error('No data successfully decrypted from login path file.')\n\n        return None\n\n\n\n    plaintext.seek(0)\n\n    return plaintext\n",
    "line_range": [
        225,
        294
    ],
    "command_specific_fields": {
        "method_name": "read_and_decrypt_mylogin_cnf"
    },
    "language": "python",
    "commit": "af5a17d980450e184cfc25e56e0e91a1389d378d",
    "prompt": ""
}