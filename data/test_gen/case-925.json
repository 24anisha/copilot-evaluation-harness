{
    "case_id": "case-925",
    "repo_name": "cool-RR/PySnooper",
    "file_path": "pysnooper/tracer.py",
    "code_snippet": "\n\n    '''\n\n    def __init__(self, output=None, watch=(), watch_explode=(), depth=1,\n\n                 prefix='', overwrite=False, thread_info=False, custom_repr=(),\n\n                 max_variable_length=100, normalize=False, relative_time=False,\n\n                 color=True):\n\n        self._write = get_write_function(output, overwrite)\n\n\n\n        self.watch = [\n\n            v if isinstance(v, BaseVariable) else CommonVariable(v)\n\n            for v in utils.ensure_tuple(watch)\n\n         ] + [\n\n             v if isinstance(v, BaseVariable) else Exploding(v)\n\n             for v in utils.ensure_tuple(watch_explode)\n\n        ]\n\n        self.frame_to_local_reprs = {}\n\n        self.start_times = {}\n\n        self.depth = depth\n\n        self.prefix = prefix\n\n        self.thread_info = thread_info\n\n        self.thread_info_padding = 0\n\n        assert self.depth >= 1\n\n        self.target_codes = set()\n\n        self.target_frames = set()\n\n        self.thread_local = threading.local()\n\n        if len(custom_repr) == 2 and not all(isinstance(x,\n\n                      pycompat.collections_abc.Iterable) for x in custom_repr):\n\n            custom_repr = (custom_repr,)\n\n        self.custom_repr = custom_repr\n\n        self.last_source_path = None\n\n        self.max_variable_length = max_variable_length\n\n        self.normalize = normalize\n\n        self.relative_time = relative_time\n\n        self.color = color and sys.platform in ('linux', 'linux2', 'cygwin',\n\n                                                'darwin')\n\n\n\n        if self.color:\n\n            self._FOREGROUND_BLUE = '\\x1b[34m'\n\n            self._FOREGROUND_CYAN = '\\x1b[36m'\n\n            self._FOREGROUND_GREEN = '\\x1b[32m'\n\n            self._FOREGROUND_MAGENTA = '\\x1b[35m'\n\n            self._FOREGROUND_RED = '\\x1b[31m'\n\n            self._FOREGROUND_RESET = '\\x1b[39m'\n\n            self._FOREGROUND_YELLOW = '\\x1b[33m'\n\n            self._STYLE_BRIGHT = '\\x1b[1m'\n\n            self._STYLE_DIM = '\\x1b[2m'\n\n            self._STYLE_NORMAL = '\\x1b[22m'\n\n            self._STYLE_RESET_ALL = '\\x1b[0m'\n\n        else:\n\n            self._FOREGROUND_BLUE = ''\n\n            self._FOREGROUND_CYAN = ''\n\n            self._FOREGROUND_GREEN = ''\n\n            self._FOREGROUND_MAGENTA = ''\n\n            self._FOREGROUND_RED = ''\n\n            self._FOREGROUND_RESET = ''\n\n            self._FOREGROUND_YELLOW = ''\n\n            self._STYLE_BRIGHT = ''\n\n            self._STYLE_DIM = ''\n\n            self._STYLE_NORMAL = ''\n\n            self._STYLE_RESET_ALL = ''\n",
    "line_range": [
        223,
        282
    ],
    "command_specific_fields": {
        "method_name": "__init__"
    },
    "language": "python",
    "commit": "f2c60de87f318a9c6b6c8b6887fe31bd07f91fb9",
    "prompt": ""
}