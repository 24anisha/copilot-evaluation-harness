{
    "case_id": "case-187",
    "repo_name": "Rob--W/cors-anywhere",
    "file_path": "lib/cors-anywhere.js",
    "code_snippet": "// Create server with default and given values\n\n// Creator still needs to call .listen()\n\nexports.createServer = function createServer(options) {\n\n  options = options || {};\n\n\n\n  // Default options:\n\n  var httpProxyOptions = {\n\n    xfwd: true,            // Append X-Forwarded-* headers\n\n    secure: process.env.NODE_TLS_REJECT_UNAUTHORIZED !== '0',\n\n  };\n\n  // Allow user to override defaults and add own options\n\n  if (options.httpProxyOptions) {\n\n    Object.keys(options.httpProxyOptions).forEach(function(option) {\n\n      httpProxyOptions[option] = options.httpProxyOptions[option];\n\n    });\n\n  }\n\n\n\n  var proxy = httpProxy.createServer(httpProxyOptions);\n\n  var requestHandler = getHandler(options, proxy);\n\n  var server;\n\n  if (options.httpsOptions) {\n\n    server = require('https').createServer(options.httpsOptions, requestHandler);\n\n  } else {\n\n    server = require('http').createServer(requestHandler);\n\n  }\n\n\n\n  // When the server fails, just show a 404 instead of Internal server error\n\n  proxy.on('error', function(err, req, res) {\n\n    if (res.headersSent) {\n\n      // This could happen when a protocol error occurs when an error occurs\n\n      // after the headers have been received (and forwarded). Do not write\n\n      // the headers because it would generate an error.\n\n      // Prior to Node 13.x, the stream would have ended.\n\n      // As of Node 13.x, we must explicitly close it.\n\n      if (res.writableEnded === false) {\n\n        res.end();\n\n      }\n\n      return;\n\n    }\n\n\n\n    // When the error occurs after setting headers but before writing the response,\n\n    // then any previously set headers must be removed.\n\n    var headerNames = res.getHeaderNames ? res.getHeaderNames() : Object.keys(res._headers || {});\n\n    headerNames.forEach(function(name) {\n\n      res.removeHeader(name);\n\n    });\n\n\n\n    res.writeHead(404, {'Access-Control-Allow-Origin': '*'});\n\n    res.end('Not found because of proxy error: ' + err);\n\n  });\n\n\n\n  return server;\n\n};\n",
    "line_range": [
        410,
        462
    ],
    "command_specific_fields": {
        "method_name": "createServer"
    },
    "language": "javascript",
    "commit": "70aaa22b3f9ad30c8566024bf25484fd1ed9bda9",
    "prompt": ""
}