{
    "case_id": "case-1184",
    "repo_name": "wkentaro/labelme",
    "file_path": "labelme/label_file.py",
    "code_snippet": "            \"flags\",  # image level flags\n            \"imageHeight\",\n            \"imageWidth\",\n        ]\n        shape_keys = [\n            \"label\",\n            \"points\",\n            \"group_id\",\n            \"shape_type\",\n            \"flags\",\n            \"description\",\n            \"mask\",\n        ]\n        try:\n            with open(filename, \"r\") as f:\n                data = json.load(f)\n\n            if data[\"imageData\"] is not None:\n                imageData = base64.b64decode(data[\"imageData\"])\n            else:\n                # relative path from label file to relative path from cwd\n                imagePath = osp.join(osp.dirname(filename), data[\"imagePath\"])\n                imageData = self.load_image_file(imagePath)\n            flags = data.get(\"flags\") or {}\n            imagePath = data[\"imagePath\"]\n            self._check_image_height_and_width(\n                base64.b64encode(imageData).decode(\"utf-8\"),\n                data.get(\"imageHeight\"),\n                data.get(\"imageWidth\"),\n            )\n            shapes = [\n                dict(\n                    label=s[\"label\"],\n                    points=s[\"points\"],\n                    shape_type=s.get(\"shape_type\", \"polygon\"),\n                    flags=s.get(\"flags\", {}),\n                    description=s.get(\"description\"),\n                    group_id=s.get(\"group_id\"),\n                    mask=utils.img_b64_to_arr(s[\"mask\"]).astype(bool)\n                    if s.get(\"mask\")\n                    else None,\n                    other_data={k: v for k, v in s.items() if k not in shape_keys},\n                )\n                for s in data[\"shapes\"]\n            ]\n        except Exception as e:\n            raise LabelFileError(e)\n\n        otherData = {}\n        for key, value in data.items():\n            if key not in keys:\n                otherData[key] = value\n\n        # Only replace data after everything is loaded.\n        self.flags = flags\n        self.shapes = shapes\n        self.imagePath = imagePath\n        self.imageData = imageData\n        self.filename = filename\n        self.otherData = otherData\n\n    @staticmethod\n    def _check_image_height_and_width(imageData, imageHeight, imageWidth):\n        img_arr = utils.img_b64_to_arr(imageData)\n        if imageHeight is not None and img_arr.shape[0] != imageHeight:\n            logger.error(\n                \"imageHeight does not match with imageData or imagePath, \"\n                \"so getting imageHeight from actual image.\"\n            )\n            imageHeight = img_arr.shape[0]\n",
    "line_range": [
        66,
        135
    ],
    "command_specific_fields": {
        "method_name": "load"
    },
    "language": "python",
    "commit": "aca3e64545f55c886760694981df634ae6eb1f32",
    "prompt": ""
}