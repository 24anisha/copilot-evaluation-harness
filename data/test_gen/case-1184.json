{
    "case_id": "case-1184",
    "repo_name": "wkentaro/labelme",
    "file_path": "labelme/label_file.py",
    "code_snippet": "            return f.read()\n\n\n\n    def load(self, filename):\n\n        keys = [\n\n            \"version\",\n\n            \"imageData\",\n\n            \"imagePath\",\n\n            \"shapes\",  # polygonal annotations\n\n            \"flags\",  # image level flags\n\n            \"imageHeight\",\n\n            \"imageWidth\",\n\n        ]\n\n        shape_keys = [\n\n            \"label\",\n\n            \"points\",\n\n            \"group_id\",\n\n            \"shape_type\",\n\n            \"flags\",\n\n            \"description\",\n\n            \"mask\",\n\n        ]\n\n        try:\n\n            with open(filename, \"r\") as f:\n\n                data = json.load(f)\n\n\n\n            if data[\"imageData\"] is not None:\n\n                imageData = base64.b64decode(data[\"imageData\"])\n\n                if PY2 and QT4:\n\n                    imageData = utils.img_data_to_png_data(imageData)\n\n            else:\n\n                # relative path from label file to relative path from cwd\n\n                imagePath = osp.join(osp.dirname(filename), data[\"imagePath\"])\n\n                imageData = self.load_image_file(imagePath)\n\n            flags = data.get(\"flags\") or {}\n\n            imagePath = data[\"imagePath\"]\n\n            self._check_image_height_and_width(\n\n                base64.b64encode(imageData).decode(\"utf-8\"),\n\n                data.get(\"imageHeight\"),\n\n                data.get(\"imageWidth\"),\n\n            )\n\n            shapes = [\n\n                dict(\n\n                    label=s[\"label\"],\n\n                    points=s[\"points\"],\n\n                    shape_type=s.get(\"shape_type\", \"polygon\"),\n\n                    flags=s.get(\"flags\", {}),\n\n                    description=s.get(\"description\"),\n\n                    group_id=s.get(\"group_id\"),\n\n                    mask=utils.img_b64_to_arr(s[\"mask\"]).astype(bool)\n\n                    if s.get(\"mask\")\n\n                    else None,\n\n                    other_data={k: v for k, v in s.items() if k not in shape_keys},\n\n                )\n\n                for s in data[\"shapes\"]\n\n            ]\n\n        except Exception as e:\n\n            raise LabelFileError(e)\n\n\n\n        otherData = {}\n\n        for key, value in data.items():\n\n            if key not in keys:\n\n                otherData[key] = value\n\n\n\n        # Only replace data after everything is loaded.\n\n        self.flags = flags\n\n        self.shapes = shapes\n\n        self.imagePath = imagePath\n\n        self.imageData = imageData\n\n        self.filename = filename\n\n        self.otherData = otherData\n",
    "line_range": [
        66,
        135
    ],
    "command_specific_fields": {
        "method_name": "load"
    },
    "language": "python",
    "commit": "aca3e64545f55c886760694981df634ae6eb1f32",
    "prompt": ""
}