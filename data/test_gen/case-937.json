{
    "case_id": "case-937",
    "repo_name": "ipython/ipython",
    "file_path": "IPython/core/completer.py",
    "code_snippet": "        )\n\n\n\n    def fwd_unicode_match(self, text: str) -> Tuple[str, Sequence[str]]:\n\n        \"\"\"\n\n        Forward match a string starting with a backslash with a list of\n\n        potential Unicode completions.\n\n\n\n        Will compute list of Unicode character names on first call and cache it.\n\n\n\n        .. deprecated:: 8.6\n\n            You can use :meth:`fwd_unicode_matcher` instead.\n\n\n\n        Returns\n\n        -------\n\n        At tuple with:\n\n            - matched text (empty if no matches)\n\n            - list of potential completions, empty tuple  otherwise)\n\n        \"\"\"\n\n        # TODO: self.unicode_names is here a list we traverse each time with ~100k elements.\n\n        # We could do a faster match using a Trie.\n\n\n\n        # Using pygtrie the following seem to work:\n\n\n\n        #     s = PrefixSet()\n\n\n\n        #     for c in range(0,0x10FFFF + 1):\n\n        #         try:\n\n        #             s.add(unicodedata.name(chr(c)))\n\n        #         except ValueError:\n\n        #             pass\n\n        #     [''.join(k) for k in s.iter(prefix)]\n\n\n\n        # But need to be timed and adds an extra dependency.\n\n\n\n        slashpos = text.rfind('\\\\')\n\n        # if text starts with slash\n\n        if slashpos > -1:\n\n            # PERF: It's important that we don't access self._unicode_names\n\n            # until we're inside this if-block. _unicode_names is lazily\n\n            # initialized, and it takes a user-noticeable amount of time to\n\n            # initialize it, so we don't want to initialize it unless we're\n\n            # actually going to use it.\n\n            s = text[slashpos + 1 :]\n\n            sup = s.upper()\n\n            candidates = [x for x in self.unicode_names if x.startswith(sup)]\n\n            if candidates:\n\n                return s, candidates\n\n            candidates = [x for x in self.unicode_names if sup in x]\n\n            if candidates:\n\n                return s, candidates\n\n            splitsup = sup.split(\" \")\n\n            candidates = [\n\n                x for x in self.unicode_names if all(u in x for u in splitsup)\n\n            ]\n\n            if candidates:\n\n                return s, candidates\n\n\n\n            return \"\", ()\n\n\n\n        # if text does not start with slash\n\n        else:\n\n            return '', ()\n",
    "line_range": [
        3258,
        3319
    ],
    "command_specific_fields": {
        "method_name": "fwd_unicode_match"
    },
    "language": "python",
    "commit": "128bd582b9894b8ae9ff577aafe13f5fdb39c3cb",
    "prompt": ""
}