{
    "case_id": "case-937",
    "repo_name": "ipython/ipython",
    "file_path": "IPython/core/completer.py",
    "code_snippet": "                    result = matcher(context)\n                else:\n                    api_version = _get_matcher_api_version(matcher)\n                    raise ValueError(f\"Unsupported API version {api_version}\")\n            except BaseException:\n                # Show the ugly traceback if the matcher causes an\n                # exception, but do NOT crash the kernel!\n                sys.excepthook(*sys.exc_info())\n                continue\n\n            # set default value for matched fragment if suffix was not selected.\n            result[\"matched_fragment\"] = result.get(\"matched_fragment\", context.token)\n\n            if not suppressed_matchers:\n                suppression_recommended: Union[bool, set[str]] = result.get(\n                    \"suppress\", False\n                )\n\n                suppression_config = (\n                    self.suppress_competing_matchers.get(matcher_id, None)\n                    if isinstance(self.suppress_competing_matchers, dict)\n                    else self.suppress_competing_matchers\n                )\n                should_suppress = (\n                    (suppression_config is True)\n                    or (suppression_recommended and (suppression_config is not False))\n                ) and has_any_completions(result)\n\n                if should_suppress:\n                    suppression_exceptions: set[str] = result.get(\n                        \"do_not_suppress\", set()\n                    )\n                    if isinstance(suppression_recommended, Iterable):\n                        to_suppress = set(suppression_recommended)\n                    else:\n                        to_suppress = set(matchers)\n                    suppressed_matchers = to_suppress - suppression_exceptions\n\n                    new_results = {}\n                    for previous_matcher_id, previous_result in results.items():\n                        if previous_matcher_id not in suppressed_matchers:\n                            new_results[previous_matcher_id] = previous_result\n                    results = new_results\n\n            results[matcher_id] = result\n\n        _, matches = self._arrange_and_extract(\n            results,\n            # TODO Jedi completions non included in legacy stateful API; was this deliberate or omission?\n            #  if it was omission, we can remove the filtering step, otherwise remove this comment.\n            skip_matchers={jedi_matcher_id},\n            abort_if_offset_changes=False,\n        )\n\n        # populate legacy stateful API\n        self.matches = matches\n\n        return results\n\n    @staticmethod\n    def _deduplicate(\n        matches: Sequence[AnyCompletion],\n",
    "line_range": [
        3258,
        3319
    ],
    "command_specific_fields": {
        "method_name": "fwd_unicode_match"
    },
    "language": "python",
    "commit": "128bd582b9894b8ae9ff577aafe13f5fdb39c3cb",
    "prompt": ""
}