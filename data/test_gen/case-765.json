{
    "case_id": "case-765",
    "repo_name": "dbcli/mycli",
    "file_path": "mycli/completion_refresher.py",
    "code_snippet": "\n\n    def refresh(self, executor, callbacks, completer_options=None):\n\n        \"\"\"Creates a SQLCompleter object and populates it with the relevant\n\n        completion suggestions in a background thread.\n\n\n\n        executor - SQLExecute object, used to extract the credentials to connect\n\n                   to the database.\n\n        callbacks - A function or a list of functions to call after the thread\n\n                    has completed the refresh. The newly created completion\n\n                    object will be passed in as an argument to each callback.\n\n        completer_options - dict of options to pass to SQLCompleter.\n\n\n\n        \"\"\"\n\n        if completer_options is None:\n\n            completer_options = {}\n\n\n\n        if self.is_refreshing():\n\n            self._restart_refresh.set()\n\n            return [(None, None, None, 'Auto-completion refresh restarted.')]\n\n        else:\n\n            self._completer_thread = threading.Thread(\n\n                target=self._bg_refresh,\n\n                args=(executor, callbacks, completer_options),\n\n                name='completion_refresh')\n\n            self._completer_thread.daemon = True\n\n            self._completer_thread.start()\n\n            return [(None, None, None,\n\n                     'Auto-completion refresh started in the background.')]\n",
    "line_range": [
        14,
        42
    ],
    "command_specific_fields": {
        "method_name": "refresh"
    },
    "language": "python",
    "commit": "af5a17d980450e184cfc25e56e0e91a1389d378d",
    "prompt": ""
}