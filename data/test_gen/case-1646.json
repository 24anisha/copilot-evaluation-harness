{
    "case_id": "case-1646",
    "repo_name": "dbcli/mycli",
    "file_path": "mycli/packages/special/iocommands.py",
    "code_snippet": "\n\n\n\n@special_command(\n\n    'watch',\n\n    'watch [seconds] [-c] query',\n\n    'Executes the query every [seconds] seconds (by default 5).'\n\n)\n\ndef watch_query(arg, **kwargs):\n\n    usage = \"\"\"Syntax: watch [seconds] [-c] query.\n\n    * seconds: The interval at the query will be repeated, in seconds.\n\n               By default 5.\n\n    * -c: Clears the screen between every iteration.\n\n\"\"\"\n\n    if not arg:\n\n        yield (None, None, None, usage)\n\n        return\n\n    seconds = 5\n\n    clear_screen = False\n\n    statement = None\n\n    while statement is None:\n\n        arg = arg.strip()\n\n        if not arg:\n\n            # Oops, we parsed all the arguments without finding a statement\n\n            yield (None, None, None, usage)\n\n            return\n\n        (current_arg, _, arg) = arg.partition(' ')\n\n        try:\n\n            seconds = float(current_arg)\n\n            continue\n\n        except ValueError:\n\n            pass\n\n        if current_arg == '-c':\n\n            clear_screen = True\n\n            continue\n\n        statement = '{0!s} {1!s}'.format(current_arg, arg)\n\n    destructive_prompt = confirm_destructive_query(statement)\n\n    if destructive_prompt is False:\n\n        click.secho(\"Wise choice!\")\n\n        return\n\n    elif destructive_prompt is True:\n\n        click.secho(\"Your call!\")\n\n    cur = kwargs['cur']\n\n    sql_list = [\n\n        (sql.rstrip(';'), \"> {0!s}\".format(sql))\n\n        for sql in sqlparse.split(statement)\n\n    ]\n\n    old_pager_enabled = is_pager_enabled()\n\n    while True:\n\n        if clear_screen:\n\n            click.clear()\n\n        try:\n\n            # Somewhere in the code the pager its activated after every yield,\n\n            # so we disable it in every iteration\n\n            set_pager_enabled(False)\n\n            for (sql, title) in sql_list:\n\n                cur.execute(sql)\n\n                if cur.description:\n\n                    headers = [x[0] for x in cur.description]\n\n                    yield (title, cur, headers, None)\n\n                else:\n\n                    yield (title, None, None, None)\n\n            sleep(seconds)\n\n        except KeyboardInterrupt:\n\n            # This prints the Ctrl-C character in its own line, which prevents\n\n            # to print a line with the cursor positioned behind the prompt\n\n            click.secho(\"\", nl=True)\n\n            return\n\n        finally:\n\n            set_pager_enabled(old_pager_enabled)\n",
    "line_range": [
        458,
        526
    ],
    "command_specific_fields": {
        "method_name": "watch_query"
    },
    "language": "python",
    "commit": "af5a17d980450e184cfc25e56e0e91a1389d378d",
    "prompt": ""
}