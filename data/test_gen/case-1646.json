{
    "case_id": "case-1646",
    "repo_name": "dbcli/mycli",
    "file_path": "mycli/packages/special/iocommands.py",
    "code_snippet": "        if len(stderr_data) > 0:\n            print(stderr_data.rstrip(\"\\n\"))\n        pipe_once_process = None\n        written_to_pipe_once_process = False\n\n\n@special_command(\"watch\", \"watch [seconds] [-c] query\", \"Executes the query every [seconds] seconds (by default 5).\")\ndef watch_query(arg, **kwargs):\n    usage = \"\"\"Syntax: watch [seconds] [-c] query.\n    * seconds: The interval at the query will be repeated, in seconds.\n               By default 5.\n    * -c: Clears the screen between every iteration.\n\"\"\"\n    if not arg:\n        yield (None, None, None, usage)\n        return\n    seconds = 5\n    clear_screen = False\n    statement = None\n    while statement is None:\n        arg = arg.strip()\n        if not arg:\n            # Oops, we parsed all the arguments without finding a statement\n            yield (None, None, None, usage)\n            return\n        (current_arg, _, arg) = arg.partition(\" \")\n        try:\n            seconds = float(current_arg)\n            continue\n        except ValueError:\n            pass\n        if current_arg == \"-c\":\n            clear_screen = True\n            continue\n        statement = \"{0!s} {1!s}\".format(current_arg, arg)\n    destructive_prompt = confirm_destructive_query(statement)\n    if destructive_prompt is False:\n        click.secho(\"Wise choice!\")\n        return\n    elif destructive_prompt is True:\n        click.secho(\"Your call!\")\n    cur = kwargs[\"cur\"]\n    sql_list = [(sql.rstrip(\";\"), \"> {0!s}\".format(sql)) for sql in sqlparse.split(statement)]\n    old_pager_enabled = is_pager_enabled()\n    while True:\n        if clear_screen:\n            click.clear()\n        try:\n            # Somewhere in the code the pager its activated after every yield,\n            # so we disable it in every iteration\n            set_pager_enabled(False)\n            for sql, title in sql_list:\n                cur.execute(sql)\n                if cur.description:\n                    headers = [x[0] for x in cur.description]\n                    yield (title, cur, headers, None)\n                else:\n                    yield (title, None, None, None)\n            sleep(seconds)\n        except KeyboardInterrupt:\n            # This prints the Ctrl-C character in its own line, which prevents\n            # to print a line with the cursor positioned behind the prompt\n            click.secho(\"\", nl=True)\n            return\n        finally:\n            set_pager_enabled(old_pager_enabled)\n\n\n@export\n",
    "line_range": [
        458,
        526
    ],
    "command_specific_fields": {
        "method_name": "watch_query"
    },
    "language": "python",
    "commit": "af5a17d980450e184cfc25e56e0e91a1389d378d",
    "prompt": ""
}