{
    "case_id": "case-994",
    "repo_name": "wkentaro/labelme",
    "file_path": "labelme/__main__.py",
    "code_snippet": "\ndef _setup_loguru(logger_level: str) -> None:\n    try:\n        logger.remove(handler_id=0)\n    except ValueError:\n        pass\n\n    if sys.stderr:\n        logger.add(sys.stderr, level=logger_level)\n\n    cache_dir: str\n    if os.name == \"nt\":\n        cache_dir = os.path.join(os.environ[\"LOCALAPPDATA\"], \"labelme\")\n    else:\n        cache_dir = os.path.expanduser(\"~/.cache/labelme\")\n\n    os.makedirs(cache_dir, exist_ok=True)\n\n    log_file = os.path.join(cache_dir, \"labelme.log\")\n    logger.add(\n        log_file,\n        colorize=True,\n        level=\"DEBUG\",\n        rotation=\"10 MB\",\n        retention=\"30 days\",\n        compression=\"gz\",\n        enqueue=True,\n        backtrace=True,\n        diagnose=True,\n    )\n\n\ndef main():\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--version\", \"-V\", action=\"store_true\", help=\"show version\")\n    parser.add_argument(\"--reset-config\", action=\"store_true\", help=\"reset qt config\")\n    parser.add_argument(\n        \"--logger-level\",\n        default=\"debug\",\n        choices=[\"debug\", \"info\", \"warning\", \"fatal\", \"error\"],\n        help=\"logger level\",\n    )\n    parser.add_argument(\"filename\", nargs=\"?\", help=\"image or label filename\")\n    parser.add_argument(\n        \"--output\",\n        \"-O\",\n        \"-o\",\n        help=\"output file or directory (if it ends with .json it is \"\n        \"recognized as file, else as directory)\",\n    )\n    default_config_file = os.path.join(os.path.expanduser(\"~\"), \".labelmerc\")\n    parser.add_argument(\n        \"--config\",\n        dest=\"config\",\n        help=\"config file or yaml-format string (default: {})\".format(\n            default_config_file\n        ),\n        default=default_config_file,\n    )\n    # config for the gui\n    parser.add_argument(\n        \"--nodata\",\n        dest=\"store_data\",\n        action=\"store_false\",\n        help=\"stop storing image data to JSON file\",\n        default=argparse.SUPPRESS,\n    )\n    parser.add_argument(\n        \"--autosave\",\n        dest=\"auto_save\",\n        action=\"store_true\",\n        help=\"auto save\",\n        default=argparse.SUPPRESS,\n    )\n    parser.add_argument(\n        \"--nosortlabels\",\n        dest=\"sort_labels\",\n        action=\"store_false\",\n        help=\"stop sorting labels\",\n        default=argparse.SUPPRESS,\n    )\n    parser.add_argument(\n        \"--flags\",\n        help=\"comma separated list of flags OR file containing flags\",\n        default=argparse.SUPPRESS,\n    )\n    parser.add_argument(\n        \"--labelflags\",\n        dest=\"label_flags\",\n        help=r\"yaml string of label specific flags OR file containing json \"\n        r\"string of label specific flags (ex. {person-\\d+: [male, tall], \"\n        r\"dog-\\d+: [black, brown, white], .*: [occluded]})\",  # NOQA\n        default=argparse.SUPPRESS,\n    )\n    parser.add_argument(\n        \"--labels\",\n        help=\"comma separated list of labels OR file containing labels\",\n        default=argparse.SUPPRESS,\n    )\n    parser.add_argument(\n        \"--validatelabel\",\n        dest=\"validate_label\",\n        choices=[\"exact\"],\n        help=\"label validation types\",\n        default=argparse.SUPPRESS,\n    )\n    parser.add_argument(\n        \"--keep-prev\",\n        action=\"store_true\",\n        help=\"keep annotation of previous frame\",\n        default=argparse.SUPPRESS,\n    )\n    parser.add_argument(\n        \"--epsilon\",\n        type=float,\n        help=\"epsilon to find nearest vertex on canvas\",\n        default=argparse.SUPPRESS,\n    )\n    args = parser.parse_args()\n\n    if args.version:\n        print(\"{0} {1}\".format(__appname__, __version__))\n        sys.exit(0)\n\n    _setup_loguru(logger_level=args.logger_level.upper())\n\n    if hasattr(args, \"flags\"):\n        if os.path.isfile(args.flags):\n            with codecs.open(args.flags, \"r\", encoding=\"utf-8\") as f:\n                args.flags = [line.strip() for line in f if line.strip()]\n        else:\n            args.flags = [line for line in args.flags.split(\",\") if line]\n\n    if hasattr(args, \"labels\"):\n        if os.path.isfile(args.labels):\n            with codecs.open(args.labels, \"r\", encoding=\"utf-8\") as f:\n                args.labels = [line.strip() for line in f if line.strip()]\n        else:\n            args.labels = [line for line in args.labels.split(\",\") if line]\n\n    if hasattr(args, \"label_flags\"):\n        if os.path.isfile(args.label_flags):\n            with codecs.open(args.label_flags, \"r\", encoding=\"utf-8\") as f:\n                args.label_flags = yaml.safe_load(f)\n        else:\n            args.label_flags = yaml.safe_load(args.label_flags)\n\n    config_from_args = args.__dict__\n    config_from_args.pop(\"version\")\n    reset_config = config_from_args.pop(\"reset_config\")\n    filename = config_from_args.pop(\"filename\")\n    output = config_from_args.pop(\"output\")\n    config_file_or_yaml = config_from_args.pop(\"config\")\n    config = get_config(config_file_or_yaml, config_from_args)\n\n    if not config[\"labels\"] and config[\"validate_label\"]:\n        logger.error(\n            \"--labels must be specified with --validatelabel or \"\n            \"validate_label: true in the config file \"\n            \"(ex. ~/.labelmerc).\"\n        )\n        sys.exit(1)\n\n    output_file = None\n    output_dir = None\n",
    "line_range": [
        18,
        182
    ],
    "command_specific_fields": {
        "method_name": "main"
    },
    "language": "python",
    "commit": "aca3e64545f55c886760694981df634ae6eb1f32",
    "prompt": ""
}