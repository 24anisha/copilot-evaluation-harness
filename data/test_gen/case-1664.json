{
    "case_id": "case-1664",
    "repo_name": "networkx/networkx",
    "file_path": "networkx/algorithms/components/biconnected.py",
    "code_snippet": "\n\n@not_implemented_for(\"directed\")\n\n@nx._dispatchable\n\ndef is_biconnected(G):\n\n    \"\"\"Returns True if the graph is biconnected, False otherwise.\n\n\n\n    A graph is biconnected if, and only if, it cannot be disconnected by\n\n    removing only one node (and all edges incident on that node).  If\n\n    removing a node increases the number of disconnected components\n\n    in the graph, that node is called an articulation point, or cut\n\n    vertex.  A biconnected graph has no articulation points.\n\n\n\n    Parameters\n\n    ----------\n\n    G : NetworkX Graph\n\n        An undirected graph.\n\n\n\n    Returns\n\n    -------\n\n    biconnected : bool\n\n        True if the graph is biconnected, False otherwise.\n\n\n\n    Raises\n\n    ------\n\n    NetworkXNotImplemented\n\n        If the input graph is not undirected.\n\n\n\n    Examples\n\n    --------\n\n    >>> G = nx.path_graph(4)\n\n    >>> print(nx.is_biconnected(G))\n\n    False\n\n    >>> G.add_edge(0, 3)\n\n    >>> print(nx.is_biconnected(G))\n\n    True\n\n\n\n    See Also\n\n    --------\n\n    biconnected_components\n\n    articulation_points\n\n    biconnected_component_edges\n\n    is_strongly_connected\n\n    is_weakly_connected\n\n    is_connected\n\n    is_semiconnected\n\n\n\n    Notes\n\n    -----\n\n    The algorithm to find articulation points and biconnected\n\n    components is implemented using a non-recursive depth-first-search\n\n    (DFS) that keeps track of the highest level that back edges reach\n\n    in the DFS tree.  A node `n` is an articulation point if, and only\n\n    if, there exists a subtree rooted at `n` such that there is no\n\n    back edge from any successor of `n` that links to a predecessor of\n\n    `n` in the DFS tree.  By keeping track of all the edges traversed\n\n    by the DFS we can obtain the biconnected components because all\n\n    edges of a bicomponent will be traversed consecutively between\n\n    articulation points.\n\n\n\n    References\n\n    ----------\n\n    .. [1] Hopcroft, J.; Tarjan, R. (1973).\n\n       \"Efficient algorithms for graph manipulation\".\n\n       Communications of the ACM 16: 372\u2013378. doi:10.1145/362248.362272\n\n\n\n    \"\"\"\n\n    bccs = biconnected_components(G)\n\n    try:\n\n        bcc = next(bccs)\n\n    except StopIteration:\n\n        # No bicomponents (empty graph?)\n\n        return False\n\n    try:\n\n        next(bccs)\n\n    except StopIteration:\n\n        # Only one bicomponent\n\n        return len(bcc) == len(G)\n\n    else:\n\n        # Multiple bicomponents\n\n        return False\n",
    "line_range": [
        14,
        94
    ],
    "command_specific_fields": {
        "method_name": "is_biconnected"
    },
    "language": "python",
    "commit": "89718e0514bded93ded5b00aed755a4474c1dc6f",
    "prompt": ""
}