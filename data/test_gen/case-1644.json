{
    "case_id": "case-0",
    "repo_name": "mementum/backtrader",
    "file_path": "tools/yahoodownload.py",
    "code_snippet": "        try:\n            import requests\n        except ImportError:\n            msg = ('The new Yahoo data feed requires to have the requests '\n                   'module installed. Please use pip install requests or '\n                   'the method of your choice')\n            raise Exception(msg)\n\n        url = self.urlhist.format(ticker)\n\n        sesskwargs = dict()\n        if False and self.p.proxies:\n            sesskwargs['proxies'] = self.p.proxies\n\n        crumb = None\n        sess = requests.Session()\n        for i in range(self.retries + 1):  \n            resp = sess.get(url, **sesskwargs)\n            if resp.status_code != requests.codes.ok:\n                continue\n\n            txt = resp.text\n            i = txt.find('CrumbStore')\n            if i == -1:\n                continue\n            i = txt.find('crumb', i)\n            if i == -1:\n                continue\n            istart = txt.find('\"', i + len('crumb') + 1)\n            if istart == -1:\n                continue\n            istart += 1\n            iend = txt.find('\"', istart)\n            if iend == -1:\n                continue\n\n            crumb = txt[istart:iend]\n            crumb = crumb.encode('ascii').decode('unicode-escape')\n            break\n\n        if crumb is None:\n            self.error = 'Crumb not found'\n            self.f = None\n            return\n\n        \n\n        \n        urld = '{}/{}'.format(self.urldown, ticker)\n\n        urlargs = []\n        posix = datetime.date(1970, 1, 1)\n        if todate is not None:\n            period2 = (todate.date() - posix).total_seconds()\n            urlargs.append('period2={}'.format(int(period2)))\n\n        if todate is not None:\n            period1 = (fromdate.date() - posix).total_seconds()\n            urlargs.append('period1={}'.format(int(period1)))\n\n        intervals = {\n            'd': '1d',\n            'w': '1wk',\n            'm': '1mo',\n        }\n\n        urlargs.append('interval={}'.format(intervals[period]))\n        urlargs.append('events=history')\n        urlargs.append('crumb={}'.format(crumb))\n\n        urld = '{}?{}'.format(urld, '&'.join(urlargs))\n        f = None\n        for i in range(self.retries + 1):  \n            resp = sess.get(urld, **sesskwargs)\n            if resp.status_code != requests.codes.ok:\n                continue\n\n            ctype = resp.headers['Content-Type']\n            if 'text/csv' not in ctype:\n                self.error = 'Wrong content type: %s' % ctype\n                continue  \n\n            \n            try:\n                \n                f = io.StringIO(resp.text, newline=None)\n            except Exception:\n                continue  \n\n            break\n\n        self.datafile = f",
    "line_range": [
        50,
        144
    ],
    "command_specific_fields": {
        "method_name": "__init__"
    },
    "language": "python",
    "commit": "b853d7c90b6721476eb5a5ea3135224e33db1f14",
    "prompt": ""
}