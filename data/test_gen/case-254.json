{
    "case_id": "case-254",
    "repo_name": "conventional-changelog/standard-version",
    "file_path": "lib/lifecycles/changelog.js",
    "code_snippet": "\n\nfunction outputChangelog (args, newVersion) {\n\n  return new Promise((resolve, reject) => {\n\n    createIfMissing(args)\n\n    const header = args.header\n\n\n\n    let oldContent = args.dryRun ? '' : fs.readFileSync(args.infile, 'utf-8')\n\n    const oldContentStart = oldContent.search(START_OF_LAST_RELEASE_PATTERN)\n\n    // find the position of the last release and remove header:\n\n    if (oldContentStart !== -1) {\n\n      oldContent = oldContent.substring(oldContentStart)\n\n    }\n\n    let content = ''\n\n    const context = { version: newVersion }\n\n    const changelogStream = conventionalChangelog({\n\n      debug: args.verbose && console.info.bind(console, 'conventional-changelog'),\n\n      preset: presetLoader(args),\n\n      tagPrefix: args.tagPrefix\n\n    }, context, { merges: null, path: args.path })\n\n      .on('error', function (err) {\n\n        return reject(err)\n\n      })\n\n\n\n    changelogStream.on('data', function (buffer) {\n\n      content += buffer.toString()\n\n    })\n\n\n\n    changelogStream.on('end', function () {\n\n      checkpoint(args, 'outputting changes to %s', [args.infile])\n\n      if (args.dryRun) console.info(`\\n---\\n${chalk.gray(content.trim())}\\n---\\n`)\n\n      else writeFile(args, args.infile, header + '\\n' + (content + oldContent).replace(/\\n+$/, '\\n'))\n\n      return resolve()\n\n    })\n\n  })\n\n}\n",
    "line_range": [
        19,
        54
    ],
    "command_specific_fields": {
        "method_name": "outputChangelog"
    },
    "language": "javascript",
    "commit": "d70752c463991d34fa192e0332d7e4efacad78ba",
    "prompt": ""
}