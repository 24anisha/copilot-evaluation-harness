{
    "case_id": "case-1712",
    "repo_name": "mitmproxy/mitmproxy",
    "file_path": "mitmproxy/certs.py",
    "code_snippet": "    @classmethod\n    def from_files(\n        cls, ca_file: Path, dhparam_file: Path, passphrase: bytes | None = None\n    ) -> \"CertStore\":\n        raw = ca_file.read_bytes()\n        key = load_pem_private_key(raw, passphrase)\n        dh = cls.load_dhparam(dhparam_file)\n        certs = x509.load_pem_x509_certificates(raw)\n        ca = Cert(certs[0])\n        if len(certs) > 1:\n            chain_file: Path | None = ca_file\n        else:\n            chain_file = None\n        return cls(key, ca, chain_file, dh)\n\n    @staticmethod\n    @contextlib.contextmanager\n    def umask_secret():\n        \"\"\"\n        Context to temporarily set umask to its original value bitor 0o77.\n        Useful when writing private keys to disk so that only the owner\n        will be able to read them.\n        \"\"\"\n        original_umask = os.umask(0)\n        os.umask(original_umask | 0o77)\n        try:\n            yield\n        finally:\n            os.umask(original_umask)\n\n    @staticmethod\n    def create_store(\n        path: Path, basename: str, key_size: int, organization=None, cn=None\n    ) -> None:\n        path.mkdir(parents=True, exist_ok=True)\n\n        organization = organization or basename\n        cn = cn or basename\n\n        key: rsa.RSAPrivateKeyWithSerialization\n        ca: x509.Certificate\n        key, ca = create_ca(organization=organization, cn=cn, key_size=key_size)\n\n        # Dump the CA plus private key.\n        with CertStore.umask_secret():\n            # PEM format\n            (path / f\"{basename}-ca.pem\").write_bytes(\n                key.private_bytes(\n                    encoding=serialization.Encoding.PEM,\n                    format=serialization.PrivateFormat.TraditionalOpenSSL,\n                    encryption_algorithm=serialization.NoEncryption(),\n                )\n                + ca.public_bytes(serialization.Encoding.PEM)\n            )\n\n            # PKCS12 format for Windows devices\n",
    "line_range": [
        442,
        497
    ],
    "command_specific_fields": {
        "method_name": "create_store"
    },
    "language": "python",
    "commit": "b08acf4ab8d51405563123793e644c0c2aa52c6e",
    "prompt": ""
}