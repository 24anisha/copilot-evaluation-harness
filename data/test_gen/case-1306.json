{
    "case_id": "case-1306",
    "repo_name": "Zulko/moviepy",
    "file_path": "moviepy/audio/io/preview.py",
    "code_snippet": "\n\n\n\n@requires_duration\n\ndef preview(\n\n    clip, fps=22050, buffersize=4000, nbytes=2, audio_flag=None, video_flag=None\n\n):\n\n    \"\"\"\n\n    Plays the sound clip with pygame.\n\n\n\n    Parameters\n\n    ----------\n\n\n\n    fps\n\n       Frame rate of the sound. 44100 gives top quality, but may cause\n\n       problems if your computer is not fast enough and your clip is\n\n       complicated. If the sound jumps during the preview, lower it\n\n       (11025 is still fine, 5000 is tolerable).\n\n\n\n    buffersize\n\n      The sound is not generated all at once, but rather made by bunches\n\n      of frames (chunks). ``buffersize`` is the size of such a chunk.\n\n      Try varying it if you meet audio problems (but you shouldn't\n\n      have to).\n\n\n\n    nbytes:\n\n      Number of bytes to encode the sound: 1 for 8bit sound, 2 for\n\n      16bit, 4 for 32bit sound. 2 bytes is fine.\n\n\n\n    audio_flag, video_flag:\n\n      Instances of class threading events that are used to synchronize\n\n      video and audio during ``VideoClip.preview()``.\n\n\n\n    \"\"\"\n\n    pg.mixer.quit()\n\n\n\n    pg.mixer.init(fps, -8 * nbytes, clip.nchannels, 1024)\n\n    totalsize = int(fps * clip.duration)\n\n    pospos = np.array(list(range(0, totalsize, buffersize)) + [totalsize])\n\n    timings = (1.0 / fps) * np.arange(pospos[0], pospos[1])\n\n    sndarray = clip.to_soundarray(timings, nbytes=nbytes, quantize=True)\n\n    chunk = pg.sndarray.make_sound(sndarray)\n\n\n\n    if (audio_flag is not None) and (video_flag is not None):\n\n        audio_flag.set()\n\n        video_flag.wait()\n\n\n\n    channel = chunk.play()\n\n    for i in range(1, len(pospos) - 1):\n\n        timings = (1.0 / fps) * np.arange(pospos[i], pospos[i + 1])\n\n        sndarray = clip.to_soundarray(timings, nbytes=nbytes, quantize=True)\n\n        chunk = pg.sndarray.make_sound(sndarray)\n\n        while channel.get_queue():\n\n            time.sleep(0.003)\n\n            if video_flag is not None:\n\n                if not video_flag.is_set():\n\n                    channel.stop()\n\n                    del channel\n\n                    return\n\n        channel.queue(chunk)\n",
    "line_range": [
        13,
        71
    ],
    "command_specific_fields": {
        "method_name": "preview"
    },
    "language": "python",
    "commit": "0f6f6d4d9b96c69d109975549fe6293931f1a19d",
    "prompt": ""
}