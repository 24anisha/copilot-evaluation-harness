{
    "case_id": "case-0",
    "repo_name": "conventional-changelog/standard-version",
    "file_path": "lib/lifecycles/commit.js",
    "code_snippet": "{\n  let msg = 'committing %s'\n  let paths = []\n  const verify = args.verify === false || args.n ? ['--no-verify'] : []\n  const sign = args.sign ? ['-S'] : []\n  const toAdd = []\n\n  // only start with a pre-populated paths list when CHANGELOG processing is not skipped\n  if (!args.skip.changelog) {\n    paths = [args.infile]\n    toAdd.push(args.infile)\n  }\n\n  // commit any of the config files that we've updated\n  // the version # for.\n  Object.keys(bump.getUpdatedConfigs()).forEach(function (p) {\n    paths.unshift(p)\n    toAdd.push(path.relative(process.cwd(), p))\n\n    // account for multiple files in the output message\n    if (paths.length > 1) {\n      msg += ' and %s'\n    }\n  })\n\n  if (args.commitAll) {\n    msg += ' and %s'\n    paths.push('all staged files')\n  }\n\n  checkpoint(args, msg, paths)\n\n  // nothing to do, exit without commit anything\n  if (args.skip.changelog && args.skip.bump && toAdd.length === 0) {\n    return\n  }\n\n  await runExecFile(args, 'git', ['add'].concat(toAdd))\n  await runExecFile(\n    args,\n    'git',\n    [\n      'commit'\n    ].concat(\n      verify,\n      sign,\n      args.commitAll ? [] : toAdd,\n      [\n        '-m',\n        `${formatCommitMessage(args.releaseCommitMessageFormat, newVersion)}`\n      ]\n    )\n  )\n}",
    "line_range": [
        14,
        69
    ],
    "command_specific_fields": {
        "method_name": "execCommit"
    },
    "language": "javascript",
    "commit": "d70752c463991d34fa192e0332d7e4efacad78ba"
}