{
    "case_id": "case-835",
    "repo_name": "pallets/flask",
    "file_path": "src/flask/app.py",
    "code_snippet": "        return self.finalize_request(rv)\n\n\n\n    def finalize_request(\n\n        self,\n\n        rv: ft.ResponseReturnValue | HTTPException,\n\n        from_error_handler: bool = False,\n\n    ) -> Response:\n\n        \"\"\"Given the return value from a view function this finalizes\n\n        the request by converting it into a response and invoking the\n\n        postprocessing functions.  This is invoked for both normal\n\n        request dispatching as well as error handlers.\n\n\n\n        Because this means that it might be called as a result of a\n\n        failure a special safe mode is available which can be enabled\n\n        with the `from_error_handler` flag.  If enabled, failures in\n\n        response processing will be logged and otherwise ignored.\n\n\n\n        :internal:\n\n        \"\"\"\n\n        response = self.make_response(rv)\n\n        try:\n\n            response = self.process_response(response)\n\n            request_finished.send(\n\n                self, _async_wrapper=self.ensure_sync, response=response\n\n            )\n\n        except Exception:\n\n            if not from_error_handler:\n\n                raise\n\n            self.logger.exception(\n\n                \"Request finalizing failed with an error while handling an error\"\n\n            )\n\n        return response\n",
    "line_range": [
        900,
        931
    ],
    "command_specific_fields": {
        "method_name": "finalize_request"
    },
    "language": "python",
    "commit": "a8956feba1e40105e7bc78fa62ce36c58d1c91e1",
    "prompt": ""
}