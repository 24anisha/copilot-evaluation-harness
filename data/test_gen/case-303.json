{
    "case_id": "case-303",
    "repo_name": "Rob--W/cors-anywhere",
    "file_path": "lib/cors-anywhere.js",
    "code_snippet": "\n// Request handler factory\nfunction getHandler(options, proxy) {\n  var corsAnywhere = {\n    handleInitialRequest: null,     // Function that may handle the request instead, by returning a truthy value.\n    getProxyForUrl: getProxyForUrl, // Function that specifies the proxy to use\n    maxRedirects: 5,                // Maximum number of redirects to be followed.\n    originBlacklist: [],            // Requests from these origins will be blocked.\n    originWhitelist: [],            // If non-empty, requests not from an origin in this list will be blocked.\n    checkRateLimit: null,           // Function that may enforce a rate-limit by returning a non-empty string.\n    redirectSameOrigin: false,      // Redirect the client to the requested URL for same-origin requests.\n    requireHeader: null,            // Require a header to be set?\n    removeHeaders: [],              // Strip these request headers.\n    setHeaders: {},                 // Set these request headers.\n    corsMaxAge: 0,                  // If set, an Access-Control-Max-Age header with this value (in seconds) will be added.\n    helpFile: __dirname + '/help.txt',\n  };\n\n  Object.keys(corsAnywhere).forEach(function(option) {\n    if (Object.prototype.hasOwnProperty.call(options, option)) {\n      corsAnywhere[option] = options[option];\n    }\n  });\n\n  // Convert corsAnywhere.requireHeader to an array of lowercase header names, or null.\n  if (corsAnywhere.requireHeader) {\n    if (typeof corsAnywhere.requireHeader === 'string') {\n      corsAnywhere.requireHeader = [corsAnywhere.requireHeader.toLowerCase()];\n    } else if (!Array.isArray(corsAnywhere.requireHeader) || corsAnywhere.requireHeader.length === 0) {\n      corsAnywhere.requireHeader = null;\n    } else {\n      corsAnywhere.requireHeader = corsAnywhere.requireHeader.map(function(headerName) {\n        return headerName.toLowerCase();\n      });\n    }\n  }\n  var hasRequiredHeaders = function(headers) {\n    return !corsAnywhere.requireHeader || corsAnywhere.requireHeader.some(function(headerName) {\n      return Object.hasOwnProperty.call(headers, headerName);\n    });\n  };\n\n  return function(req, res) {\n    req.corsAnywhereRequestState = {\n      getProxyForUrl: corsAnywhere.getProxyForUrl,\n      maxRedirects: corsAnywhere.maxRedirects,\n      corsMaxAge: corsAnywhere.corsMaxAge,\n    };\n\n    var cors_headers = withCORS({}, req);\n    if (req.method === 'OPTIONS') {\n      // Pre-flight request. Reply successfully:\n      res.writeHead(200, cors_headers);\n      res.end();\n      return;\n    }\n\n    var location = parseURL(req.url.slice(1));\n\n    if (corsAnywhere.handleInitialRequest && corsAnywhere.handleInitialRequest(req, res, location)) {\n      return;\n    }\n\n    if (!location) {\n      // Special case http:/notenoughslashes, because new users of the library frequently make the\n      // mistake of putting this application behind a server/router that normalizes the URL.\n      // See https://github.com/Rob--W/cors-anywhere/issues/238#issuecomment-629638853\n      if (/^\\/https?:\\/[^/]/i.test(req.url)) {\n        res.writeHead(400, 'Missing slash', cors_headers);\n        res.end('The URL is invalid: two slashes are needed after the http(s):.');\n        return;\n      }\n      // Invalid API call. Show how to correctly use the API\n      showUsage(corsAnywhere.helpFile, cors_headers, res);\n      return;\n    }\n\n    if (location.host === 'iscorsneeded') {\n      // Is CORS needed? This path is provided so that API consumers can test whether it's necessary\n      // to use CORS. The server's reply is always No, because if they can read it, then CORS headers\n      // are not necessary.\n      res.writeHead(200, {'Content-Type': 'text/plain'});\n      res.end('no');\n      return;\n    }\n\n    if (location.port > 65535) {\n      // Port is higher than 65535\n      res.writeHead(400, 'Invalid port', cors_headers);\n      res.end('Port number too large: ' + location.port);\n      return;\n    }\n\n    if (!/^\\/https?:/.test(req.url) && !isValidHostName(location.hostname)) {\n      // Don't even try to proxy invalid hosts (such as /favicon.ico, /robots.txt)\n      res.writeHead(404, 'Invalid host', cors_headers);\n      res.end('Invalid host: ' + location.hostname);\n      return;\n    }\n\n    if (!hasRequiredHeaders(req.headers)) {\n      res.writeHead(400, 'Header required', cors_headers);\n      res.end('Missing required request header. Must specify one of: ' + corsAnywhere.requireHeader);\n      return;\n    }\n\n    var origin = req.headers.origin || '';\n    if (corsAnywhere.originBlacklist.indexOf(origin) >= 0) {\n      res.writeHead(403, 'Forbidden', cors_headers);\n      res.end('The origin \"' + origin + '\" was blacklisted by the operator of this proxy.');\n      return;\n    }\n\n    if (corsAnywhere.originWhitelist.length && corsAnywhere.originWhitelist.indexOf(origin) === -1) {\n      res.writeHead(403, 'Forbidden', cors_headers);\n      res.end('The origin \"' + origin + '\" was not whitelisted by the operator of this proxy.');\n      return;\n    }\n\n    var rateLimitMessage = corsAnywhere.checkRateLimit && corsAnywhere.checkRateLimit(origin);\n    if (rateLimitMessage) {\n      res.writeHead(429, 'Too Many Requests', cors_headers);\n      res.end('The origin \"' + origin + '\" has sent too many requests.\\n' + rateLimitMessage);\n      return;\n    }\n\n    if (corsAnywhere.redirectSameOrigin && origin && location.href[origin.length] === '/' &&\n        location.href.lastIndexOf(origin, 0) === 0) {\n      // Send a permanent redirect to offload the server. Badly coded clients should not waste our resources.\n      cors_headers.vary = 'origin';\n      cors_headers['cache-control'] = 'private';\n      cors_headers.location = location.href;\n      res.writeHead(301, 'Please use a direct request', cors_headers);\n      res.end();\n      return;\n    }\n\n    var isRequestedOverHttps = req.connection.encrypted || /^\\s*https/.test(req.headers['x-forwarded-proto']);\n    var proxyBaseUrl = (isRequestedOverHttps ? 'https://' : 'http://') + req.headers.host;\n\n    corsAnywhere.removeHeaders.forEach(function(header) {\n      delete req.headers[header];\n    });\n\n    Object.keys(corsAnywhere.setHeaders).forEach(function(header) {\n      req.headers[header] = corsAnywhere.setHeaders[header];\n    });\n\n    req.corsAnywhereRequestState.location = location;\n    req.corsAnywhereRequestState.proxyBaseUrl = proxyBaseUrl;\n\n    proxyRequest(req, res, proxy);\n  };\n}\n",
    "line_range": [
        255,
        408
    ],
    "command_specific_fields": {
        "method_name": "getHandler"
    },
    "language": "javascript",
    "commit": "70aaa22b3f9ad30c8566024bf25484fd1ed9bda9",
    "prompt": ""
}