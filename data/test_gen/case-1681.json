{
    "case_id": "case-1681",
    "repo_name": "maurosoria/dirsearch",
    "file_path": "lib/core/scanner.py",
    "code_snippet": "        return True\n\n\n\n    @staticmethod\n\n    def generate_redirect_regex(first_loc, first_path, second_loc, second_path):\n\n        \"\"\"\n\n        From 2 redirects of wildcard responses, generate a regexp that matches\n\n        every wildcard redirect.\n\n\n\n        How it works:\n\n        1. Replace path in 2 redirect URLs (if it gets reflected in) with a mark\n\n           (e.g. /path1 -> /foo/path1 and /path2 -> /foo/path2 will become /foo/[mark] for both)\n\n        2. Compare 2 redirects and generate a regex that matches both\n\n           (e.g. /foo/[mark]?a=1 and /foo/[mark]?a=2 will have the regex: ^/foo/[mark]?a=(.*)$)\n\n        3. Next time if it redirects, replace mark in regex with the path and check if it matches\n\n           (e.g. /path3 -> /foo/path3?a=5, the regex becomes ^/foo/path3?a=(.*)$, which matches)\n\n        \"\"\"\n\n\n\n        if first_path:\n\n            first_loc = unquote(first_loc).replace(first_path, REFLECTED_PATH_MARKER)\n\n        if second_path:\n\n            second_loc = unquote(second_loc).replace(second_path, REFLECTED_PATH_MARKER)\n\n\n\n        return generate_matching_regex(first_loc, second_loc)\n",
    "line_range": [
        134,
        156
    ],
    "command_specific_fields": {
        "method_name": "generate_redirect_regex"
    },
    "language": "python",
    "commit": "59bc9ce43063a1036cf0077f2f1e68883397dac4",
    "prompt": ""
}