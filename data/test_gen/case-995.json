{
    "case_id": "case-995",
    "repo_name": "dbcli/mycli",
    "file_path": "mycli/main.py",
    "code_snippet": "            \"WARNING\": logging.WARNING,\n            \"INFO\": logging.INFO,\n            \"DEBUG\": logging.DEBUG,\n        }\n\n        # Disable logging if value is NONE by switching to a no-op handler\n        # Set log level to a high value so it doesn't even waste cycles getting called.\n        if log_level.upper() == \"NONE\":\n            handler = logging.NullHandler()\n            log_level = \"CRITICAL\"\n        elif dir_path_exists(log_file):\n            handler = logging.FileHandler(log_file)\n        else:\n            self.echo('Error: Unable to open the log file \"{}\".'.format(log_file), err=True, fg=\"red\")\n            return\n\n        formatter = logging.Formatter(\"%(asctime)s (%(process)d/%(threadName)s) \" \"%(name)s %(levelname)s - %(message)s\")\n\n        handler.setFormatter(formatter)\n\n        root_logger = logging.getLogger(\"mycli\")\n        root_logger.addHandler(handler)\n        root_logger.setLevel(level_map[log_level.upper()])\n\n        logging.captureWarnings(True)\n\n        root_logger.debug(\"Initializing mycli logging.\")\n        root_logger.debug(\"Log file %r.\", log_file)\n\n    def read_my_cnf_files(self, files, keys):\n        \"\"\"\n        Reads a list of config files and merges them. The last one will win.\n        :param files: list of files to read\n        :param keys: list of keys to retrieve\n        :returns: tuple, with None for missing keys.\n        \"\"\"\n        cnf = read_config_files(files, list_values=False)\n\n        sections = [\"client\", \"mysqld\"]\n        key_transformations = {\n            \"mysqld\": {\n",
    "line_range": [
        290,
        330
    ],
    "command_specific_fields": {
        "method_name": "initialize_logging"
    },
    "language": "python",
    "commit": "af5a17d980450e184cfc25e56e0e91a1389d378d",
    "prompt": ""
}