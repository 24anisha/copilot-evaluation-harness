{
    "case_id": "case-995",
    "repo_name": "dbcli/mycli",
    "file_path": "mycli/main.py",
    "code_snippet": "        return [(None, None, None, \"Changed prompt format to %s\" % arg)]\n\n\n\n    def initialize_logging(self):\n\n\n\n        log_file = os.path.expanduser(self.config['main']['log_file'])\n\n        log_level = self.config['main']['log_level']\n\n\n\n        level_map = {'CRITICAL': logging.CRITICAL,\n\n                     'ERROR': logging.ERROR,\n\n                     'WARNING': logging.WARNING,\n\n                     'INFO': logging.INFO,\n\n                     'DEBUG': logging.DEBUG\n\n                     }\n\n\n\n        # Disable logging if value is NONE by switching to a no-op handler\n\n        # Set log level to a high value so it doesn't even waste cycles getting called.\n\n        if log_level.upper() == \"NONE\":\n\n            handler = logging.NullHandler()\n\n            log_level = \"CRITICAL\"\n\n        elif dir_path_exists(log_file):\n\n            handler = logging.FileHandler(log_file)\n\n        else:\n\n            self.echo(\n\n                'Error: Unable to open the log file \"{}\".'.format(log_file),\n\n                err=True, fg='red')\n\n            return\n\n\n\n        formatter = logging.Formatter(\n\n            '%(asctime)s (%(process)d/%(threadName)s) '\n\n            '%(name)s %(levelname)s - %(message)s')\n\n\n\n        handler.setFormatter(formatter)\n\n\n\n        root_logger = logging.getLogger('mycli')\n\n        root_logger.addHandler(handler)\n\n        root_logger.setLevel(level_map[log_level.upper()])\n\n\n\n        logging.captureWarnings(True)\n\n\n\n        root_logger.debug('Initializing mycli logging.')\n\n        root_logger.debug('Log file %r.', log_file)\n",
    "line_range": [
        290,
        330
    ],
    "command_specific_fields": {
        "method_name": "initialize_logging"
    },
    "language": "python",
    "commit": "af5a17d980450e184cfc25e56e0e91a1389d378d",
    "prompt": ""
}