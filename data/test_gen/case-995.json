{
    "case_id": "case-995",
    "repo_name": "dbcli/mycli",
    "file_path": "mycli/main.py",
    "code_snippet": "        log_file = os.path.expanduser(self.config['main']['log_file'])\n        log_level = self.config['main']['log_level']\n\n        level_map = {'CRITICAL': logging.CRITICAL,\n                     'ERROR': logging.ERROR,\n                     'WARNING': logging.WARNING,\n                     'INFO': logging.INFO,\n                     'DEBUG': logging.DEBUG\n                     }\n\n        \n        \n        if log_level.upper() == \"NONE\":\n            handler = logging.NullHandler()\n            log_level = \"CRITICAL\"\n        elif dir_path_exists(log_file):\n            handler = logging.FileHandler(log_file)\n        else:\n            self.echo(\n                'Error: Unable to open the log file \"{}\".'.format(log_file),\n                err=True, fg='red')\n            return\n\n        formatter = logging.Formatter(\n            '%(asctime)s (%(process)d/%(threadName)s) '\n            '%(name)s %(levelname)s - %(message)s')\n\n        handler.setFormatter(formatter)\n\n        root_logger = logging.getLogger('mycli')\n        root_logger.addHandler(handler)\n        root_logger.setLevel(level_map[log_level.upper()])\n\n        logging.captureWarnings(True)\n\n        root_logger.debug('Initializing mycli logging.')\n        root_logger.debug('Log file %r.', log_file)",
    "line_range": [
        290,
        330
    ],
    "command_specific_fields": {
        "method_name": "initialize_logging"
    },
    "language": "python",
    "commit": "af5a17d980450e184cfc25e56e0e91a1389d378d",
    "prompt": ""
}