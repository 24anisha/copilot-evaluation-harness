{
    "case_id": "case-233",
    "repo_name": "nock/nock",
    "file_path": "lib/scope.js",
    "code_snippet": "}\n\n\n\nfunction define(nockDefs) {\n\n  const scopes = []\n\n\n\n  nockDefs.forEach(function (nockDef) {\n\n    const nscope = getScopeFromDefinition(nockDef)\n\n    const npath = nockDef.path\n\n    if (!nockDef.method) {\n\n      throw Error('Method is required')\n\n    }\n\n    const method = nockDef.method.toLowerCase()\n\n    const status = getStatusFromDefinition(nockDef)\n\n    const rawHeaders = nockDef.rawHeaders || []\n\n    const reqheaders = nockDef.reqheaders || {}\n\n    const badheaders = nockDef.badheaders || []\n\n    const options = { ...nockDef.options }\n\n\n\n    //  We use request headers for both filtering (see below) and mocking.\n\n    //  Here we are setting up mocked request headers but we don't want to\n\n    //  be changing the user's options object so we clone it first.\n\n    options.reqheaders = reqheaders\n\n    options.badheaders = badheaders\n\n\n\n    // Response is not always JSON as it could be a string or binary data or\n\n    // even an array of binary buffers (e.g. when content is encoded).\n\n    let response\n\n    if (!nockDef.response) {\n\n      response = ''\n\n      // TODO: Rename `responseIsBinary` to `responseIsUtf8Representable`.\n\n    } else if (nockDef.responseIsBinary) {\n\n      response = Buffer.from(nockDef.response, 'hex')\n\n    } else {\n\n      response =\n\n        typeof nockDef.response === 'string'\n\n          ? tryJsonParse(nockDef.response)\n\n          : nockDef.response\n\n    }\n\n\n\n    const scope = new Scope(nscope, options)\n\n\n\n    // If request headers were specified filter by them.\n\n    Object.entries(reqheaders).forEach(([fieldName, value]) => {\n\n      scope.matchHeader(fieldName, value)\n\n    })\n\n\n\n    const acceptableFilters = ['filteringRequestBody', 'filteringPath']\n\n    acceptableFilters.forEach(filter => {\n\n      if (nockDef[filter]) {\n\n        scope[filter](nockDef[filter])\n\n      }\n\n    })\n\n\n\n    scope\n\n      .intercept(npath, method, nockDef.body)\n\n      .reply(status, response, rawHeaders)\n\n\n\n    scopes.push(scope)\n\n  })\n\n\n\n  return scopes\n\n}\n",
    "line_range": [
        348,
        409
    ],
    "command_specific_fields": {
        "method_name": "define"
    },
    "language": "javascript",
    "commit": "2b7836d36c4f22f449b36ad9fd1fff2d14e9200d",
    "prompt": ""
}