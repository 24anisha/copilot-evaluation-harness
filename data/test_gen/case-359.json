{
    "case_id": "case-359",
    "repo_name": "nock/nock",
    "file_path": "lib/intercept.js",
    "code_snippet": "\n\nfunction removeInterceptor(options) {\n\n  // Lazily import to avoid circular imports.\n\n  const Interceptor = require('./interceptor')\n\n\n\n  let baseUrl, key, method, proto\n\n  if (options instanceof Interceptor) {\n\n    baseUrl = options.basePath\n\n    key = options._key\n\n  } else {\n\n    proto = options.proto ? options.proto : 'http'\n\n\n\n    common.normalizeRequestOptions(options)\n\n    baseUrl = `${proto}://${options.host}`\n\n    method = (options.method && options.method.toUpperCase()) || 'GET'\n\n    key = `${method} ${baseUrl}${options.path || '/'}`\n\n  }\n\n\n\n  if (\n\n    allInterceptors[baseUrl] &&\n\n    allInterceptors[baseUrl].interceptors.length > 0\n\n  ) {\n\n    for (let i = 0; i < allInterceptors[baseUrl].interceptors.length; i++) {\n\n      const interceptor = allInterceptors[baseUrl].interceptors[i]\n\n      if (\n\n        options instanceof Interceptor\n\n          ? interceptor === options\n\n          : interceptor._key === key\n\n      ) {\n\n        allInterceptors[baseUrl].interceptors.splice(i, 1)\n\n        interceptor.scope.remove(key, interceptor)\n\n        break\n\n      }\n\n    }\n\n\n\n    return true\n\n  }\n\n\n\n  return false\n\n}\n",
    "line_range": [
        196,
        236
    ],
    "command_specific_fields": {
        "method_name": "removeInterceptor"
    },
    "language": "javascript",
    "commit": "2b7836d36c4f22f449b36ad9fd1fff2d14e9200d",
    "prompt": ""
}