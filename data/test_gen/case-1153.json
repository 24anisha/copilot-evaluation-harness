{
    "case_id": "case-1153",
    "repo_name": "maurosoria/dirsearch",
    "file_path": "lib/controller/controller.py",
    "code_snippet": "        dict_.pop(\"requester\", None)\n\n        with open(session_file, \"wb\") as fd:\n            pickle.dump((dict_, last_output, options), fd)\n\n    def setup(self) -> None:\n        blacklists.update(get_blacklists())\n\n        if options[\"raw_file\"]:\n            try:\n                options.update(\n                    zip(\n                        [\"urls\", \"http_method\", \"headers\", \"data\"],\n                        parse_raw(options[\"raw_file\"]),\n                    )\n                )\n            except InvalidRawRequest as e:\n                print(str(e))\n                exit(1)\n        else:\n            options[\"headers\"] = {**DEFAULT_HEADERS, **options[\"headers\"]}\n\n            if options[\"user_agent\"]:\n                options[\"headers\"][\"user-agent\"] = options[\"user_agent\"]\n\n            if options[\"cookie\"]:\n                options[\"headers\"][\"cookie\"] = options[\"cookie\"]\n\n        self.dictionary = Dictionary(files=options[\"wordlists\"])\n        self.start_time = time.time()\n        self.passed_urls: set[str] = set()\n        self.directories: list[str] = []\n        self.jobs_processed = 0\n        self.errors = 0\n        self.consecutive_errors = 0\n\n        if options[\"log_file\"]:\n            try:\n                FileUtils.create_dir(FileUtils.parent(options[\"log_file\"]))\n                if not FileUtils.can_write(options[\"log_file\"]):\n                    raise Exception\n\n                enable_logging()\n\n            except Exception:\n                interface.error(\n                    f'Couldn\\'t create log file at {options[\"log_file\"]}'\n                )\n                exit(1)\n\n        interface.header(BANNER)\n        interface.config(len(self.dictionary))\n\n        try:\n            self.reporter = ReportManager(options[\"output_formats\"])\n        except (\n            InvalidURLException,\n            mysql.connector.Error,\n            psycopg.Error,\n        ) as e:\n            logger.exception(e)\n            interface.error(str(e))\n            exit(1)\n\n        if options[\"log_file\"]:\n            interface.log_file(options[\"log_file\"])\n\n    def run(self) -> None:\n        if options[\"async_mode\"]:\n            from lib.connection.requester import AsyncRequester as Requester\n            from lib.core.fuzzer import AsyncFuzzer as Fuzzer\n\n            try:\n                import uvloop\n                asyncio.set_event_loop_policy(uvloop.EventLoopPolicy())\n            except ImportError:\n                pass\n        else:\n            from lib.connection.requester import Requester\n            from lib.core.fuzzer import Fuzzer\n\n        # match_callbacks and not_found_callbacks callback values:\n        #  - *args[0]: lib.connection.Response() object\n        #\n        # error_callbacks callback values:\n        #  - *args[0]: exception\n        match_callbacks = (\n            self.match_callback, self.reporter.save, self.reset_consecutive_errors\n        )\n        not_found_callbacks = (\n            self.update_progress_bar, self.reset_consecutive_errors\n",
    "line_range": [
        106,
        196
    ],
    "command_specific_fields": {
        "method_name": "setup"
    },
    "language": "python",
    "commit": "59bc9ce43063a1036cf0077f2f1e68883397dac4",
    "prompt": ""
}