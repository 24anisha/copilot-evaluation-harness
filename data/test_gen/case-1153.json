{
    "case_id": "case-1153",
    "repo_name": "maurosoria/dirsearch",
    "file_path": "lib/controller/controller.py",
    "code_snippet": "\n\n    def setup(self):\n\n        blacklists.update(get_blacklists())\n\n\n\n        if options[\"raw_file\"]:\n\n            try:\n\n                options.update(\n\n                    zip(\n\n                        [\"urls\", \"http_method\", \"headers\", \"data\"],\n\n                        parse_raw(options[\"raw_file\"]),\n\n                    )\n\n                )\n\n            except InvalidRawRequest as e:\n\n                print(str(e))\n\n                exit(1)\n\n        else:\n\n            options[\"headers\"] = {**DEFAULT_HEADERS, **options[\"headers\"]}\n\n\n\n            if options[\"user_agent\"]:\n\n                options[\"headers\"][\"user-agent\"] = options[\"user_agent\"]\n\n\n\n            if options[\"cookie\"]:\n\n                options[\"headers\"][\"cookie\"] = options[\"cookie\"]\n\n\n\n        self.requester = Requester()\n\n        self.dictionary = Dictionary(files=options[\"wordlists\"])\n\n        self.results = []\n\n        self.start_time = time.time()\n\n        self.passed_urls = set()\n\n        self.directories = []\n\n        self.report = None\n\n        self.batch = False\n\n        self.jobs_processed = 0\n\n        self.errors = 0\n\n        self.consecutive_errors = 0\n\n\n\n        if options[\"auth\"]:\n\n            self.requester.set_auth(options[\"auth_type\"], options[\"auth\"])\n\n\n\n        if options[\"proxy_auth\"]:\n\n            self.requester.set_proxy_auth(options[\"proxy_auth\"])\n\n\n\n        if options[\"log_file\"]:\n\n            options[\"log_file\"] = FileUtils.get_abs_path(options[\"log_file\"])\n\n\n\n            try:\n\n                FileUtils.create_dir(FileUtils.parent(options[\"log_file\"]))\n\n                if not FileUtils.can_write(options[\"log_file\"]):\n\n                    raise Exception\n\n\n\n                enable_logging()\n\n\n\n            except Exception:\n\n                interface.error(\n\n                    f'Couldn\\'t create log file at {options[\"log_file\"]}'\n\n                )\n\n                exit(1)\n\n\n\n        if options[\"autosave_report\"]:\n\n            self.report_path = options[\"output_path\"] or FileUtils.build_path(\n\n                SCRIPT_PATH, \"reports\"\n\n            )\n\n\n\n            try:\n\n                FileUtils.create_dir(self.report_path)\n\n                if not FileUtils.can_write(self.report_path):\n\n                    raise Exception\n\n\n\n            except Exception:\n\n                interface.error(\n\n                    f\"Couldn't create report folder at {self.report_path}\"\n\n                )\n\n                exit(1)\n\n\n\n        interface.header(BANNER)\n\n        interface.config(len(self.dictionary))\n\n\n\n        try:\n\n            self.setup_reports()\n\n        except (\n\n            InvalidURLException,\n\n            mysql.connector.Error,\n\n            psycopg.Error,\n\n        ) as e:\n\n            logger.exception(e)\n\n            interface.error(str(e))\n\n            exit(1)\n\n\n\n        if options[\"log_file\"]:\n\n            interface.log_file(options[\"log_file\"])\n",
    "line_range": [
        106,
        196
    ],
    "command_specific_fields": {
        "method_name": "setup"
    },
    "language": "python",
    "commit": "59bc9ce43063a1036cf0077f2f1e68883397dac4",
    "prompt": ""
}