{
    "case_id": "case-0",
    "repo_name": "kelektiv/node-cron",
    "file_path": "src/time.ts",
    "code_snippet": "{\n\t\t/** @type number */\n\t\tlet expectedMinute, expectedHour, actualMinute, actualHour;\n\t\t/** @type DateTime */\n\t\tlet maybeJumpingPoint = date;\n\n\t\t// representing one day of backwards checking. If this is hit, the input must be wrong.\n\t\tconst iterationLimit = 60 * 24;\n\t\tlet iteration = 0;\n\t\tdo {\n\t\t\tif (++iteration > iterationLimit) {\n\t\t\t\tthrow new CronError(\n\t\t\t\t\t`ERROR: This DST checking related function assumes the input DateTime (${\n\t\t\t\t\t\tdate.toISO() ?? date.toMillis()\n\t\t\t\t\t}) is within 24 hours of a DST jump.`\n\t\t\t\t);\n\t\t\t}\n\n\t\t\texpectedMinute = maybeJumpingPoint.minute - 1;\n\t\t\texpectedHour = maybeJumpingPoint.hour;\n\n\t\t\tif (expectedMinute < 0) {\n\t\t\t\texpectedMinute += 60;\n\t\t\t\texpectedHour = (expectedHour + 24 - 1) % 24; // Subtract 1 hour, but we must account for the -1 case.\n\t\t\t}\n\n\t\t\tmaybeJumpingPoint = maybeJumpingPoint.minus({ minute: 1 });\n\n\t\t\tactualMinute = maybeJumpingPoint.minute;\n\t\t\tactualHour = maybeJumpingPoint.hour;\n\t\t} while (expectedMinute === actualMinute && expectedHour === actualHour);\n\n\t\t// Setting the seconds and milliseconds to zero is necessary for two reasons:\n\t\t// Firstly, the range checking function needs the earliest moment after the jump.\n\t\t// Secondly, this DateTime may be used for scheduling jobs, if there existed a job in the skipped range.\n\t\tconst afterJumpingPoint = maybeJumpingPoint\n\t\t\t.plus({ minute: 1 }) // back to the first minute _after_ the jump\n\t\t\t.set({ second: 0, millisecond: 0 });\n\n\t\t// Get the lower bound of the range to check as well. This only has to be accurate down to minutes.\n\t\tconst beforeJumpingPoint = afterJumpingPoint.minus({ second: 1 });\n\n\t\tif (\n\t\t\tdate.month + 1 in this.month &&\n\t\t\tdate.day in this.dayOfMonth &&\n\t\t\tthis._getWeekDay(date) in this.dayOfWeek\n\t\t) {\n\t\t\treturn [\n\t\t\t\tthis._checkTimeInSkippedRange(beforeJumpingPoint, afterJumpingPoint),\n\t\t\t\tafterJumpingPoint\n\t\t\t];\n\t\t}\n\n\t\t// no valid time in the range for sure, units that didn't change from the skip mismatch.\n\t\treturn [false, afterJumpingPoint];\n\t}",
    "line_range": [
        423,
        480
    ],
    "command_specific_fields": {
        "method_name": "_findPreviousDSTJump"
    },
    "language": "typescript",
    "commit": "1eb978b8cddf8a2f2bead841adcad408238333c6",
    "prompt": ""
}