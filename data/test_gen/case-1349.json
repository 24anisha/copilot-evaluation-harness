{
    "case_id": "case-1349",
    "repo_name": "gleitz/howdoi",
    "file_path": "howdoi/howdoi.py",
    "code_snippet": "\n\n\n\ndef _get_answers(args):\n\n    \"\"\"\n\n    @args: command-line arguments\n\n    returns: array of answers and their respective metadata\n\n             False if unable to get answers\n\n    \"\"\"\n\n\n\n    question_links = _get_links_with_cache(args['query'])\n\n    if not question_links:\n\n        return False\n\n\n\n    initial_pos = args['pos'] - 1\n\n    final_pos = initial_pos + int(args['num_answers'])\n\n    question_links = question_links[initial_pos:final_pos]\n\n    search_engine = os.getenv('HOWDOI_SEARCH_ENGINE', 'google')\n\n\n\n    logging.info('Links from %s found on %s: %s', URL, search_engine, len(question_links))\n\n    logging.info('URL: %s', '\\n '.join(question_links))\n\n    logging.info('Answers requested: %s, Starting at position: %s', args[\"num_answers\"], args['pos'])\n\n\n\n    with Pool() as pool:\n\n        answers = pool.starmap(\n\n            _get_answer_worker,\n\n            [(args, link) for link in question_links]\n\n        )\n\n\n\n    answers = [a for a in answers if a.get('answer')]\n\n    for i, answer in enumerate(answers, 1):\n\n        answer['position'] = i\n\n\n\n    logging.info('Total answers returned: %s', len(answers))\n\n\n\n    return answers or False\n",
    "line_range": [
        423,
        457
    ],
    "command_specific_fields": {
        "method_name": "_get_answers"
    },
    "language": "python",
    "commit": "6f8813dcb32a481c3683aff64587181b518454c8",
    "prompt": ""
}