{
    "case_id": "case-959",
    "repo_name": "pallets/flask",
    "file_path": "src/flask/helpers.py",
    "code_snippet": "\n\n\n\ndef flash(message: str, category: str = \"message\") -> None:\n\n    \"\"\"Flashes a message to the next request.  In order to remove the\n\n    flashed message from the session and to display it to the user,\n\n    the template has to call :func:`get_flashed_messages`.\n\n\n\n    .. versionchanged:: 0.3\n\n       `category` parameter added.\n\n\n\n    :param message: the message to be flashed.\n\n    :param category: the category for the message.  The following values\n\n                     are recommended: ``'message'`` for any kind of message,\n\n                     ``'error'`` for errors, ``'info'`` for information\n\n                     messages and ``'warning'`` for warnings.  However any\n\n                     kind of string can be used as category.\n\n    \"\"\"\n\n    # Original implementation:\n\n    #\n\n    #     session.setdefault('_flashes', []).append((category, message))\n\n    #\n\n    # This assumed that changes made to mutable structures in the session are\n\n    # always in sync with the session object, which is not true for session\n\n    # implementations that use external storage for keeping their keys/values.\n\n    flashes = session.get(\"_flashes\", [])\n\n    flashes.append((category, message))\n\n    session[\"_flashes\"] = flashes\n\n    app = current_app._get_current_object()  # type: ignore\n\n    message_flashed.send(\n\n        app,\n\n        _async_wrapper=app.ensure_sync,\n\n        message=message,\n\n        category=category,\n\n    )\n",
    "line_range": [
        297,
        330
    ],
    "command_specific_fields": {
        "method_name": "flash"
    },
    "language": "python",
    "commit": "a8956feba1e40105e7bc78fa62ce36c58d1c91e1",
    "prompt": ""
}