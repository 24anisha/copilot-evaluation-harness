{
    "case_id": "case-1279",
    "repo_name": "Zulko/moviepy",
    "file_path": "moviepy/Clip.py",
    "code_snippet": "                self.memoized_t = t\n                self.memoized_frame = frame\n                return frame\n        else:\n            return self.frame_function(t)\n\n    def transform(self, func, apply_to=None, keep_duration=True):\n        \"\"\"General processing of a clip.\n\n        Returns a new Clip whose frames are a transformation\n        (through function ``func``) of the frames of the current clip.\n\n        Parameters\n        ----------\n\n        func : function\n          A function with signature (gf,t -> frame) where ``gf`` will\n          represent the current clip's ``get_frame`` method,\n          i.e. ``gf`` is a function (t->image). Parameter `t` is a time\n          in seconds, `frame` is a picture (=Numpy array) which will be\n          returned by the transformed clip (see examples below).\n\n        apply_to : {\"mask\", \"audio\", [\"mask\", \"audio\"]}, optional\n          Can be either ``'mask'``, or ``'audio'``, or\n          ``['mask','audio']``.\n          Specifies if the filter should also be applied to the\n          audio or the mask of the clip, if any.\n\n        keep_duration : bool, optional\n          Set to True if the transformation does not change the\n          ``duration`` of the clip.\n\n        Examples\n        --------\n\n        In the following ``new_clip`` a 100 pixels-high clip whose video\n        content scrolls from the top to the bottom of the frames of\n        ``clip`` at 50 pixels per second.\n\n        >>> filter = lambda get_frame,t : get_frame(t)[int(t):int(t)+50, :]\n        >>> new_clip = clip.transform(filter, apply_to='mask')\n\n        \"\"\"\n        if apply_to is None:\n            apply_to = []\n\n        # mf = copy(self.frame_function)\n        new_clip = self.with_updated_frame_function(lambda t: func(self.get_frame, t))\n\n        if not keep_duration:\n            new_clip.duration = None\n            new_clip.end = None\n\n        if isinstance(apply_to, str):\n            apply_to = [apply_to]\n\n        for attribute in apply_to:\n            attribute_value = getattr(new_clip, attribute, None)\n            if attribute_value is not None:\n                new_attribute_value = attribute_value.transform(\n                    func, keep_duration=keep_duration\n",
    "line_range": [
        83,
        143
    ],
    "command_specific_fields": {
        "method_name": "transform"
    },
    "language": "python",
    "commit": "0f6f6d4d9b96c69d109975549fe6293931f1a19d",
    "prompt": ""
}