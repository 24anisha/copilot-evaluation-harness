{
    "case_id": "case-425",
    "repo_name": "foliojs/pdfkit",
    "file_path": "lib/image/png.js",
    "code_snippet": "  }\n\n\n\n  embed(document) {\n\n    let dataDecoded = false;\n\n\n\n    this.document = document;\n\n    if (this.obj) {\n\n      return;\n\n    }\n\n\n\n    const hasAlphaChannel = this.image.hasAlphaChannel;\n\n    const isInterlaced = this.image.interlaceMethod === 1;\n\n\n\n    this.obj = this.document.ref({\n\n      Type: 'XObject',\n\n      Subtype: 'Image',\n\n      BitsPerComponent: hasAlphaChannel ? 8 : this.image.bits,\n\n      Width: this.width,\n\n      Height: this.height,\n\n      Filter: 'FlateDecode'\n\n    });\n\n\n\n    if (!hasAlphaChannel) {\n\n      const params = this.document.ref({\n\n        Predictor: isInterlaced ? 1 : 15,\n\n        Colors: this.image.colors,\n\n        BitsPerComponent: this.image.bits,\n\n        Columns: this.width\n\n      });\n\n\n\n      this.obj.data['DecodeParms'] = params;\n\n      params.end();\n\n    }\n\n\n\n    if (this.image.palette.length === 0) {\n\n      this.obj.data['ColorSpace'] = this.image.colorSpace;\n\n    } else {\n\n      // embed the color palette in the PDF as an object stream\n\n      const palette = this.document.ref();\n\n      palette.end(Buffer.from(this.image.palette));\n\n\n\n      // build the color space array for the image\n\n      this.obj.data['ColorSpace'] = [\n\n        'Indexed',\n\n        'DeviceRGB',\n\n        this.image.palette.length / 3 - 1,\n\n        palette\n\n      ];\n\n    }\n\n\n\n    // For PNG color types 0, 2 and 3, the transparency data is stored in\n\n    // a dedicated PNG chunk.\n\n    if (this.image.transparency.grayscale != null) {\n\n      // Use Color Key Masking (spec section 4.8.5)\n\n      // An array with N elements, where N is two times the number of color components.\n\n      const val = this.image.transparency.grayscale;\n\n      this.obj.data['Mask'] = [val, val];\n\n    } else if (this.image.transparency.rgb) {\n\n      // Use Color Key Masking (spec section 4.8.5)\n\n      // An array with N elements, where N is two times the number of color components.\n\n      const { rgb } = this.image.transparency;\n\n      const mask = [];\n\n      for (let x of rgb) {\n\n        mask.push(x, x);\n\n      }\n\n\n\n      this.obj.data['Mask'] = mask;\n\n    } else if (this.image.transparency.indexed) {\n\n      // Create a transparency SMask for the image based on the data\n\n      // in the PLTE and tRNS sections. See below for details on SMasks.\n\n      dataDecoded = true;\n\n      return this.loadIndexedAlphaChannel();\n\n    } else if (hasAlphaChannel) {\n\n      // For PNG color types 4 and 6, the transparency data is stored as a alpha\n\n      // channel mixed in with the main image data. Separate this data out into an\n\n      // SMask object and store it separately in the PDF.\n\n      dataDecoded = true;\n\n      return this.splitAlphaChannel();\n\n    }\n\n\n\n    if (isInterlaced && !dataDecoded) {\n\n      return this.decodeData();\n\n    }\n\n\n\n    this.finalize();\n\n  }\n",
    "line_range": [
        12,
        97
    ],
    "command_specific_fields": {
        "method_name": "embed"
    },
    "language": "javascript",
    "commit": "9e5dfcdc0aa2424e1f98b3f88d229faf1ea31c49",
    "prompt": ""
}