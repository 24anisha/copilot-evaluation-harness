{
    "case_id": "case-585",
    "repo_name": "timc1/kbar",
    "file_path": "src/useStore.tsx",
    "code_snippet": "\n\nexport function useStore(props: useStoreProps) {\n\n  const optionsRef = React.useRef({\n\n    animations: {\n\n      enterMs: 200,\n\n      exitMs: 100,\n\n    },\n\n    ...props.options,\n\n  } as KBarOptions);\n\n\n\n  const actionsInterface = React.useMemo(\n\n    () =>\n\n      new ActionInterface(props.actions || [], {\n\n        historyManager: optionsRef.current.enableHistory ? history : undefined,\n\n      }),\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n\n    []\n\n  );\n\n\n\n  // TODO: at this point useReducer might be a better approach to managing state.\n\n  const [state, setState] = React.useState<KBarState>({\n\n    searchQuery: \"\",\n\n    currentRootActionId: null,\n\n    visualState: VisualState.hidden,\n\n    actions: { ...actionsInterface.actions },\n\n    activeIndex: 0,\n\n    disabled: false,\n\n  });\n\n\n\n  const currState = React.useRef(state);\n\n  currState.current = state;\n\n\n\n  const getState = React.useCallback(() => currState.current, []);\n\n  const publisher = React.useMemo(() => new Publisher(getState), [getState]);\n\n\n\n  React.useEffect(() => {\n\n    currState.current = state;\n\n    publisher.notify();\n\n  }, [state, publisher]);\n\n\n\n  const registerActions = React.useCallback(\n\n    (actions: Action[]) => {\n\n      setState((state) => {\n\n        return {\n\n          ...state,\n\n          actions: actionsInterface.add(actions),\n\n        };\n\n      });\n\n\n\n      return function unregister() {\n\n        setState((state) => {\n\n          return {\n\n            ...state,\n\n            actions: actionsInterface.remove(actions),\n\n          };\n\n        });\n\n      };\n\n    },\n\n    [actionsInterface]\n\n  );\n\n\n\n  const inputRef = React.useRef<HTMLInputElement | null>(null);\n\n\n\n  return React.useMemo(() => {\n\n    const query: KBarQuery = {\n\n      setCurrentRootAction: (actionId) => {\n\n        setState((state) => ({\n\n          ...state,\n\n          currentRootActionId: actionId,\n\n        }));\n\n      },\n\n      setVisualState: (cb) => {\n\n        setState((state) => ({\n\n          ...state,\n\n          visualState: typeof cb === \"function\" ? cb(state.visualState) : cb,\n\n        }));\n\n      },\n\n      setSearch: (searchQuery) =>\n\n        setState((state) => ({\n\n          ...state,\n\n          searchQuery,\n\n        })),\n\n      registerActions,\n\n      toggle: () =>\n\n        setState((state) => ({\n\n          ...state,\n\n          visualState: [VisualState.animatingOut, VisualState.hidden].includes(\n\n            state.visualState\n\n          )\n\n            ? VisualState.animatingIn\n\n            : VisualState.animatingOut,\n\n        })),\n\n      setActiveIndex: (cb) =>\n\n        setState((state) => ({\n\n          ...state,\n\n          activeIndex: typeof cb === \"number\" ? cb : cb(state.activeIndex),\n\n        })),\n\n      inputRefSetter: (el: HTMLInputElement) => {\n\n        inputRef.current = el;\n\n      },\n\n      getInput: () => {\n\n        invariant(\n\n          inputRef.current,\n\n          \"Input ref is undefined, make sure you attach `query.inputRefSetter` to your search input.\"\n\n        );\n\n        return inputRef.current;\n\n      },\n\n      disable: (disable: boolean) => {\n\n        setState((state) => ({\n\n          ...state,\n\n          disabled: disable,\n\n        }));\n\n      },\n\n    };\n\n    return {\n\n      getState,\n\n      query,\n\n      options: optionsRef.current,\n\n      subscribe: (collector, cb) => publisher.subscribe(collector, cb),\n\n    } as IKBarContext;\n\n  }, [getState, publisher, registerActions]);\n\n}\n",
    "line_range": [
        16,
        138
    ],
    "command_specific_fields": {
        "method_name": "useStore"
    },
    "language": "typescript",
    "commit": "952d7c6badfe10c3b7b3bd46bbf42722ff03bfc8",
    "prompt": ""
}