{
    "case_id": "case-585",
    "repo_name": "timc1/kbar",
    "file_path": "src/useStore.tsx",
    "code_snippet": "type useStoreProps = KBarProviderProps;\n\nexport function useStore(props: useStoreProps) {\n  const optionsRef = React.useRef({\n    animations: {\n      enterMs: 200,\n      exitMs: 100,\n    },\n    ...props.options,\n  } as KBarOptions);\n\n  const actionsInterface = React.useMemo(\n    () =>\n      new ActionInterface(props.actions || [], {\n        historyManager: optionsRef.current.enableHistory ? history : undefined,\n      }),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    []\n  );\n\n  // TODO: at this point useReducer might be a better approach to managing state.\n  const [state, setState] = React.useState<KBarState>({\n    searchQuery: \"\",\n    currentRootActionId: null,\n    visualState: VisualState.hidden,\n    actions: { ...actionsInterface.actions },\n    activeIndex: 0,\n    disabled: false,\n  });\n\n  const currState = React.useRef(state);\n  currState.current = state;\n\n  const getState = React.useCallback(() => currState.current, []);\n  const publisher = React.useMemo(() => new Publisher(getState), [getState]);\n\n  React.useEffect(() => {\n    currState.current = state;\n    publisher.notify();\n  }, [state, publisher]);\n\n  const registerActions = React.useCallback(\n    (actions: Action[]) => {\n      setState((state) => {\n        return {\n          ...state,\n          actions: actionsInterface.add(actions),\n        };\n      });\n\n      return function unregister() {\n        setState((state) => {\n          return {\n            ...state,\n            actions: actionsInterface.remove(actions),\n          };\n        });\n      };\n    },\n    [actionsInterface]\n  );\n\n  const inputRef = React.useRef<HTMLInputElement | null>(null);\n\n  return React.useMemo(() => {\n    const query: KBarQuery = {\n      setCurrentRootAction: (actionId) => {\n        setState((state) => ({\n          ...state,\n          currentRootActionId: actionId,\n        }));\n      },\n      setVisualState: (cb) => {\n        setState((state) => ({\n          ...state,\n          visualState: typeof cb === \"function\" ? cb(state.visualState) : cb,\n        }));\n      },\n      setSearch: (searchQuery) =>\n        setState((state) => ({\n          ...state,\n          searchQuery,\n        })),\n      registerActions,\n      toggle: () =>\n        setState((state) => ({\n          ...state,\n          visualState: [VisualState.animatingOut, VisualState.hidden].includes(\n            state.visualState\n          )\n            ? VisualState.animatingIn\n            : VisualState.animatingOut,\n        })),\n      setActiveIndex: (cb) =>\n        setState((state) => ({\n          ...state,\n          activeIndex: typeof cb === \"number\" ? cb : cb(state.activeIndex),\n        })),\n      inputRefSetter: (el: HTMLInputElement) => {\n        inputRef.current = el;\n      },\n      getInput: () => {\n        invariant(\n          inputRef.current,\n          \"Input ref is undefined, make sure you attach `query.inputRefSetter` to your search input.\"\n        );\n        return inputRef.current;\n      },\n      disable: (disable: boolean) => {\n        setState((state) => ({\n          ...state,\n          disabled: disable,\n        }));\n      },\n    };\n    return {\n      getState,\n      query,\n      options: optionsRef.current,\n      subscribe: (collector, cb) => publisher.subscribe(collector, cb),\n    } as IKBarContext;\n  }, [getState, publisher, registerActions]);\n}\n",
    "line_range": [
        16,
        138
    ],
    "command_specific_fields": {
        "method_name": "useStore"
    },
    "language": "typescript",
    "commit": "952d7c6badfe10c3b7b3bd46bbf42722ff03bfc8",
    "prompt": ""
}