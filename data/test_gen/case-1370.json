{
    "case_id": "case-1370",
    "repo_name": "networkx/networkx",
    "file_path": "networkx/classes/function.py",
    "code_snippet": "    Raises\n    ------\n    NetworkXError\n        If the specified edge does not exist.\n\n    Examples\n    --------\n    >>> G = nx.Graph()\n    >>> G.add_edges_from([(1, 3), (2, 4), (2, 6)])\n    >>> G.add_edge(1, 2, weight=4)\n    >>> nx.is_negatively_weighted(G, (1, 2))\n    False\n    >>> G[2][4][\"weight\"] = -2\n    >>> nx.is_negatively_weighted(G)\n    True\n    >>> G = nx.DiGraph()\n    >>> edges = [(\"0\", \"3\", 3), (\"0\", \"1\", -5), (\"1\", \"0\", -2)]\n    >>> G.add_weighted_edges_from(edges)\n    >>> nx.is_negatively_weighted(G)\n    True\n\n    \"\"\"\n    if edge is not None:\n        data = G.get_edge_data(*edge)\n        if data is None:\n            msg = f\"Edge {edge!r} does not exist.\"\n            raise nx.NetworkXError(msg)\n        return weight in data and data[weight] < 0\n\n    return any(weight in data and data[weight] < 0 for u, v, data in G.edges(data=True))\n\n\n@nx._dispatchable\ndef is_empty(G):\n    \"\"\"Returns True if `G` has no edges.\n\n    Parameters\n    ----------\n    G : graph\n        A NetworkX graph.\n\n    Returns\n    -------\n    bool\n        True if `G` has no edges, and False otherwise.\n\n    Notes\n    -----\n    An empty graph can have nodes but not edges. The empty graph with zero\n    nodes is known as the null graph. This is an $O(n)$ operation where n\n    is the number of nodes in the graph.\n\n    \"\"\"\n    return not any(G._adj.values())\n\n\ndef nodes_with_selfloops(G):\n    \"\"\"Returns an iterator over nodes with self loops.\n\n    A node with a self loop has an edge with both ends adjacent\n    to that node.\n\n    Returns\n    -------\n    nodelist : iterator\n        A iterator over nodes with self loops.\n\n    See Also\n    --------\n    selfloop_edges, number_of_selfloops\n\n    Examples\n    --------\n    >>> G = nx.Graph()  # or DiGraph, MultiGraph, MultiDiGraph, etc\n    >>> G.add_edge(1, 1)\n    >>> G.add_edge(1, 2)\n    >>> list(nx.nodes_with_selfloops(G))\n    [1]\n\n    \"\"\"\n    return (n for n, nbrs in G._adj.items() if n in nbrs)\n\n\ndef selfloop_edges(G, data=False, keys=False, default=None):\n    \"\"\"Returns an iterator over selfloop edges.\n\n    A selfloop edge has the same node at both ends.\n\n    Parameters\n    ----------\n    G : graph\n        A NetworkX graph.\n    data : string or bool, optional (default=False)\n        Return selfloop edges as two tuples (u, v) (data=False)\n        or three-tuples (u, v, datadict) (data=True)\n        or three-tuples (u, v, datavalue) (data='attrname')\n    keys : bool, optional (default=False)\n        If True, return edge keys with each edge.\n    default : value, optional (default=None)\n        Value used for edges that don't have the requested attribute.\n        Only relevant if data is not True or False.\n\n",
    "line_range": [
        1144,
        1245
    ],
    "command_specific_fields": {
        "method_name": "selfloop_edges"
    },
    "language": "python",
    "commit": "89718e0514bded93ded5b00aed755a4474c1dc6f",
    "prompt": ""
}