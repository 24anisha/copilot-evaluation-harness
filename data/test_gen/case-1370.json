{
    "case_id": "case-1370",
    "repo_name": "networkx/networkx",
    "file_path": "networkx/classes/function.py",
    "code_snippet": "\n\n\n\ndef selfloop_edges(G, data=False, keys=False, default=None):\n\n    \"\"\"Returns an iterator over selfloop edges.\n\n\n\n    A selfloop edge has the same node at both ends.\n\n\n\n    Parameters\n\n    ----------\n\n    G : graph\n\n        A NetworkX graph.\n\n    data : string or bool, optional (default=False)\n\n        Return selfloop edges as two tuples (u, v) (data=False)\n\n        or three-tuples (u, v, datadict) (data=True)\n\n        or three-tuples (u, v, datavalue) (data='attrname')\n\n    keys : bool, optional (default=False)\n\n        If True, return edge keys with each edge.\n\n    default : value, optional (default=None)\n\n        Value used for edges that don't have the requested attribute.\n\n        Only relevant if data is not True or False.\n\n\n\n    Returns\n\n    -------\n\n    edgeiter : iterator over edge tuples\n\n        An iterator over all selfloop edges.\n\n\n\n    See Also\n\n    --------\n\n    nodes_with_selfloops, number_of_selfloops\n\n\n\n    Examples\n\n    --------\n\n    >>> G = nx.MultiGraph()  # or Graph, DiGraph, MultiDiGraph, etc\n\n    >>> ekey = G.add_edge(1, 1)\n\n    >>> ekey = G.add_edge(1, 2)\n\n    >>> list(nx.selfloop_edges(G))\n\n    [(1, 1)]\n\n    >>> list(nx.selfloop_edges(G, data=True))\n\n    [(1, 1, {})]\n\n    >>> list(nx.selfloop_edges(G, keys=True))\n\n    [(1, 1, 0)]\n\n    >>> list(nx.selfloop_edges(G, keys=True, data=True))\n\n    [(1, 1, 0, {})]\n\n    \"\"\"\n\n    if data is True:\n\n        if G.is_multigraph():\n\n            if keys is True:\n\n                return (\n\n                    (n, n, k, d)\n\n                    for n, nbrs in G._adj.items()\n\n                    if n in nbrs\n\n                    for k, d in nbrs[n].items()\n\n                )\n\n            else:\n\n                return (\n\n                    (n, n, d)\n\n                    for n, nbrs in G._adj.items()\n\n                    if n in nbrs\n\n                    for d in nbrs[n].values()\n\n                )\n\n        else:\n\n            return ((n, n, nbrs[n]) for n, nbrs in G._adj.items() if n in nbrs)\n\n    elif data is not False:\n\n        if G.is_multigraph():\n\n            if keys is True:\n\n                return (\n\n                    (n, n, k, d.get(data, default))\n\n                    for n, nbrs in G._adj.items()\n\n                    if n in nbrs\n\n                    for k, d in nbrs[n].items()\n\n                )\n\n            else:\n\n                return (\n\n                    (n, n, d.get(data, default))\n\n                    for n, nbrs in G._adj.items()\n\n                    if n in nbrs\n\n                    for d in nbrs[n].values()\n\n                )\n\n        else:\n\n            return (\n\n                (n, n, nbrs[n].get(data, default))\n\n                for n, nbrs in G._adj.items()\n\n                if n in nbrs\n\n            )\n\n    else:\n\n        if G.is_multigraph():\n\n            if keys is True:\n\n                return (\n\n                    (n, n, k)\n\n                    for n, nbrs in G._adj.items()\n\n                    if n in nbrs\n\n                    for k in nbrs[n]\n\n                )\n\n            else:\n\n                return (\n\n                    (n, n)\n\n                    for n, nbrs in G._adj.items()\n\n                    if n in nbrs\n\n                    for i in range(len(nbrs[n]))  # for easy edge removal (#4068)\n\n                )\n\n        else:\n\n            return ((n, n) for n, nbrs in G._adj.items() if n in nbrs)\n",
    "line_range": [
        1144,
        1245
    ],
    "command_specific_fields": {
        "method_name": "selfloop_edges"
    },
    "language": "python",
    "commit": "89718e0514bded93ded5b00aed755a4474c1dc6f",
    "prompt": ""
}