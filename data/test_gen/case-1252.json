{
    "case_id": "case-1252",
    "repo_name": "networkx/networkx",
    "file_path": "networkx/algorithms/planarity.py",
    "code_snippet": "\n\n    def lr_planarity_recursive(self):\n\n        \"\"\"Recursive version of :meth:`lr_planarity`.\"\"\"\n\n        if self.G.order() > 2 and self.G.size() > 3 * self.G.order() - 6:\n\n            # graph is not planar\n\n            return None\n\n\n\n        # orientation of the graph by depth first search traversal\n\n        for v in self.G:\n\n            if self.height[v] is None:\n\n                self.height[v] = 0\n\n                self.roots.append(v)\n\n                self.dfs_orientation_recursive(v)\n\n\n\n        # Free no longer used variable\n\n        self.G = None\n\n\n\n        # testing\n\n        for v in self.DG:  # sort the adjacency lists by nesting depth\n\n            # note: this sorting leads to non linear time\n\n            self.ordered_adjs[v] = sorted(\n\n                self.DG[v], key=lambda x: self.nesting_depth[(v, x)]\n\n            )\n\n        for v in self.roots:\n\n            if not self.dfs_testing_recursive(v):\n\n                return None\n\n\n\n        for e in self.DG.edges:\n\n            self.nesting_depth[e] = self.sign_recursive(e) * self.nesting_depth[e]\n\n\n\n        self.embedding.add_nodes_from(self.DG.nodes)\n\n        for v in self.DG:\n\n            # sort the adjacency lists again\n\n            self.ordered_adjs[v] = sorted(\n\n                self.DG[v], key=lambda x: self.nesting_depth[(v, x)]\n\n            )\n\n            # initialize the embedding\n\n            previous_node = None\n\n            for w in self.ordered_adjs[v]:\n\n                self.embedding.add_half_edge(v, w, ccw=previous_node)\n\n                previous_node = w\n\n\n\n        # compute the complete embedding\n\n        for v in self.roots:\n\n            self.dfs_embedding_recursive(v)\n\n\n\n        return self.embedding\n",
    "line_range": [
        399,
        446
    ],
    "command_specific_fields": {
        "method_name": "lr_planarity_recursive"
    },
    "language": "python",
    "commit": "89718e0514bded93ded5b00aed755a4474c1dc6f",
    "prompt": ""
}