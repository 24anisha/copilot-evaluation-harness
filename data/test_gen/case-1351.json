{
    "case_id": "case-1351",
    "repo_name": "networkx/networkx",
    "file_path": "networkx/algorithms/isomorphism/isomorphvf2.py",
    "code_snippet": "                        newstate.restore()\n\n\n\n    def semantic_feasibility(self, G1_node, G2_node):\n\n        \"\"\"Returns True if adding (G1_node, G2_node) is semantically feasible.\n\n\n\n        The semantic feasibility function should return True if it is\n\n        acceptable to add the candidate pair (G1_node, G2_node) to the current\n\n        partial isomorphism mapping.   The logic should focus on semantic\n\n        information contained in the edge data or a formalized node class.\n\n\n\n        By acceptable, we mean that the subsequent mapping can still become a\n\n        complete isomorphism mapping.  Thus, if adding the candidate pair\n\n        definitely makes it so that the subsequent mapping cannot become a\n\n        complete isomorphism mapping, then this function must return False.\n\n\n\n        The default semantic feasibility function always returns True. The\n\n        effect is that semantics are not considered in the matching of G1\n\n        and G2.\n\n\n\n        The semantic checks might differ based on the what type of test is\n\n        being performed.  A keyword description of the test is stored in\n\n        self.test.  Here is a quick description of the currently implemented\n\n        tests::\n\n\n\n          test='graph'\n\n            Indicates that the graph matcher is looking for a graph-graph\n\n            isomorphism.\n\n\n\n          test='subgraph'\n\n            Indicates that the graph matcher is looking for a subgraph-graph\n\n            isomorphism such that a subgraph of G1 is isomorphic to G2.\n\n\n\n          test='mono'\n\n            Indicates that the graph matcher is looking for a subgraph-graph\n\n            monomorphism such that a subgraph of G1 is monomorphic to G2.\n\n\n\n        Any subclass which redefines semantic_feasibility() must maintain\n\n        the above form to keep the match() method functional. Implementations\n\n        should consider multigraphs.\n\n        \"\"\"\n\n        return True\n",
    "line_range": [
        324,
        364
    ],
    "command_specific_fields": {
        "method_name": "semantic_feasibility"
    },
    "language": "python",
    "commit": "89718e0514bded93ded5b00aed755a4474c1dc6f",
    "prompt": ""
}