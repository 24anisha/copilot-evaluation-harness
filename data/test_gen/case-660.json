{
    "case_id": "case-0",
    "repo_name": "darknessomi/musicbox",
    "file_path": "NEMbox/menu.py",
    "code_snippet": "        netease = self.api\n        datatype = self.datatype\n        title = self.title\n        datalist = self.datalist\n        offset = self.offset\n        index = self.index\n        self.stack.append([datatype, title, datalist, offset, index])\n\n        if idx >= len(self.datalist):\n            return False\n\n        if datatype == \"main\":\n            self.choice_channel(idx)\n\n        \n        elif datatype == \"artists\":\n            artist_name = datalist[idx][\"artists_name\"]\n            artist_id = datalist[idx][\"artist_id\"]\n\n            self.datatype = \"artist_info\"\n            self.title += \" > \" + artist_name\n            self.datalist = [\n                {\"item\": \"{}\u7684\u70ed\u95e8\u6b4c\u66f2\".format(artist_name), \"id\": artist_id},\n                {\"item\": \"{}\u7684\u6240\u6709\u4e13\u8f91\".format(artist_name), \"id\": artist_id},\n            ]\n\n        elif datatype == \"artist_info\":\n            self.title += \" > \" + datalist[idx][\"item\"]\n            artist_id = datalist[0][\"id\"]\n            if idx == 0:\n                self.datatype = \"songs\"\n                songs = netease.artists(artist_id)\n                self.datalist = netease.dig_info(songs, \"songs\")\n\n            elif idx == 1:\n                albums = netease.get_artist_album(artist_id)\n                self.datatype = \"albums\"\n                self.datalist = netease.dig_info(albums, \"albums\")\n\n        elif datatype == \"djRadios\":\n            radio_id = datalist[idx][\"id\"]\n            programs = netease.alldjprograms(radio_id)\n            self.title += \" > \" + datalist[idx][\"name\"]\n            self.datatype = \"djprograms\"\n            self.datalist = netease.dig_info(programs, \"djprograms\")\n\n        \n        elif datatype == \"albums\":\n            album_id = datalist[idx][\"album_id\"]\n            songs = netease.album(album_id)\n            self.datatype = \"songs\"\n            self.datalist = netease.dig_info(songs, \"songs\")\n            self.title += \" > \" + datalist[idx][\"albums_name\"]\n\n        \n        elif datatype == \"recommend_lists\":\n            data = self.datalist[idx]\n            self.datatype = data[\"datatype\"]\n            self.datalist = netease.dig_info(data[\"callback\"](), self.datatype)\n            self.title += \" > \" + data[\"title\"]\n\n        \n        elif datatype in [\"top_playlists\", \"playlists\"]:\n            playlist_id = datalist[idx][\"playlist_id\"]\n            songs = netease.playlist_songlist(playlist_id)\n            self.datatype = \"songs\"\n            self.datalist = netease.dig_info(songs, \"songs\")\n            self.title += \" > \" + datalist[idx][\"playlist_name\"]\n\n        \n        elif datatype == \"playlist_classes\":\n            \n            data = self.datalist[idx]\n            self.datatype = \"playlist_class_detail\"\n            self.datalist = netease.dig_info(data, self.datatype)\n            self.title += \" > \" + data\n\n        \n        elif datatype == \"playlist_class_detail\":\n            \n            data = self.datalist[idx]\n            self.datatype = \"top_playlists\"\n            self.datalist = netease.dig_info(netease.top_playlists(data), self.datatype)\n            self.title += \" > \" + data\n\n        \n        elif datatype in [\"songs\", \"fmsongs\"]:\n            song_id = datalist[idx][\"song_id\"]\n            comments = self.api.song_comments(song_id, limit=100)\n            try:\n                hotcomments = comments[\"hotComments\"]\n                comcomments = comments[\"comments\"]\n            except KeyError:\n                hotcomments = comcomments = []\n            self.datalist = []\n            for one_comment in hotcomments:\n                self.datalist.append(\n                    {\n                        \"comment_content\": \"(\u70ed\u8bc4 %s\u2764\ufe0f \ufe0f) %s: %s\"\n                        % (\n                            one_comment[\"likedCount\"],\n                            one_comment[\"user\"][\"nickname\"],\n                            one_comment[\"content\"],\n                        )\n                    }\n                )\n            for one_comment in comcomments:\n                \n                self.datalist.append(\n                    {\n                        \"comment_content\": \"(%s\u2764\ufe0f \ufe0f) %s: %s\"\n                        % (\n                            one_comment[\"likedCount\"],\n                            one_comment[\"user\"][\"nickname\"],\n                            one_comment[\"content\"],\n                        )\n                    }\n                )\n            self.datatype = \"comments\"\n            self.title = \"\u7f51\u6613\u4e91\u97f3\u4e50 > \u8bc4\u8bba: %s\" % datalist[idx][\"song_name\"]\n            self.offset = 0\n            self.index = 0\n\n        \n        elif datatype == \"toplists\":\n            songs = netease.top_songlist(idx)\n            self.title += \" > \" + self.datalist[idx]\n            self.datalist = netease.dig_info(songs, \"songs\")\n            self.datatype = \"songs\"\n\n        \n        elif datatype == \"search\":\n            self.index = 0\n            self.offset = 0\n            SearchCategory = namedtuple(\"SearchCategory\", [\"type\", \"title\"])\n            idx_map = {\n                0: SearchCategory(\"playlists\", \"\u7cbe\u9009\u6b4c\u5355\u641c\u7d22\u5217\u8868\"),\n                1: SearchCategory(\"songs\", \"\u6b4c\u66f2\u641c\u7d22\u5217\u8868\"),\n                2: SearchCategory(\"artists\", \"\u827a\u672f\u5bb6\u641c\u7d22\u5217\u8868\"),\n                3: SearchCategory(\"albums\", \"\u4e13\u8f91\u641c\u7d22\u5217\u8868\"),\n                4: SearchCategory(\"djRadios\", \"\u4e3b\u64ad\u7535\u53f0\u641c\u7d22\u5217\u8868\"),\n            }\n            self.datatype, self.title = idx_map[idx]\n            self.datalist = self.search(self.datatype)\n        else:\n            self.enter_flag = False",
    "line_range": [
        978,
        1127
    ],
    "command_specific_fields": {
        "method_name": "dispatch_enter"
    },
    "language": "python",
    "commit": "592e13d1b948201447d008f4f3e249d347f47f21",
    "prompt": ""
}