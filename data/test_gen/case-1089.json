{
    "case_id": "case-1089",
    "repo_name": "pallets/flask",
    "file_path": "src/flask/config.py",
    "code_snippet": "\n\n    def from_prefixed_env(\n\n        self, prefix: str = \"FLASK\", *, loads: t.Callable[[str], t.Any] = json.loads\n\n    ) -> bool:\n\n        \"\"\"Load any environment variables that start with ``FLASK_``,\n\n        dropping the prefix from the env key for the config key. Values\n\n        are passed through a loading function to attempt to convert them\n\n        to more specific types than strings.\n\n\n\n        Keys are loaded in :func:`sorted` order.\n\n\n\n        The default loading function attempts to parse values as any\n\n        valid JSON type, including dicts and lists.\n\n\n\n        Specific items in nested dicts can be set by separating the\n\n        keys with double underscores (``__``). If an intermediate key\n\n        doesn't exist, it will be initialized to an empty dict.\n\n\n\n        :param prefix: Load env vars that start with this prefix,\n\n            separated with an underscore (``_``).\n\n        :param loads: Pass each string value to this function and use\n\n            the returned value as the config value. If any error is\n\n            raised it is ignored and the value remains a string. The\n\n            default is :func:`json.loads`.\n\n\n\n        .. versionadded:: 2.1\n\n        \"\"\"\n\n        prefix = f\"{prefix}_\"\n\n        len_prefix = len(prefix)\n\n\n\n        for key in sorted(os.environ):\n\n            if not key.startswith(prefix):\n\n                continue\n\n\n\n            value = os.environ[key]\n\n\n\n            try:\n\n                value = loads(value)\n\n            except Exception:\n\n                # Keep the value as a string if loading failed.\n\n                pass\n\n\n\n            # Change to key.removeprefix(prefix) on Python >= 3.9.\n\n            key = key[len_prefix:]\n\n\n\n            if \"__\" not in key:\n\n                # A non-nested key, set directly.\n\n                self[key] = value\n\n                continue\n\n\n\n            # Traverse nested dictionaries with keys separated by \"__\".\n\n            current = self\n\n            *parts, tail = key.split(\"__\")\n\n\n\n            for part in parts:\n\n                # If an intermediate dict does not exist, create it.\n\n                if part not in current:\n\n                    current[part] = {}\n\n\n\n                current = current[part]\n\n\n\n            current[tail] = value\n\n\n\n        return True\n",
    "line_range": [
        124,
        188
    ],
    "command_specific_fields": {
        "method_name": "from_prefixed_env"
    },
    "language": "python",
    "commit": "a8956feba1e40105e7bc78fa62ce36c58d1c91e1",
    "prompt": ""
}