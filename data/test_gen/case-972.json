{
    "case_id": "case-972",
    "repo_name": "ipython/ipython",
    "file_path": "IPython/core/magics/basic.py",
    "code_snippet": "\n        new_mode = parameter_s.strip().capitalize()\n        try:\n            shell.InteractiveTB.set_mode(mode=new_mode)\n            print('Exception reporting mode:',shell.InteractiveTB.mode)\n        except:\n            raise\n            xmode_switch_err('user')\n\n    @line_magic\n    def quickref(self, arg):\n        \"\"\" Show a quick reference sheet \"\"\"\n        from IPython.core.usage import quick_reference\n        qr = quick_reference + self._magic_docs(brief=True)\n        page.page(qr)\n\n    @line_magic\n    def doctest_mode(self, parameter_s=''):\n        \"\"\"Toggle doctest mode on and off.\n\n        This mode is intended to make IPython behave as much as possible like a\n        plain Python shell, from the perspective of how its prompts, exceptions\n        and output look.  This makes it easy to copy and paste parts of a\n        session into doctests.  It does so by:\n\n        - Changing the prompts to the classic ``>>>`` ones.\n        - Changing the exception reporting mode to 'Plain'.\n        - Disabling pretty-printing of output.\n\n        Note that IPython also supports the pasting of code snippets that have\n        leading '>>>' and '...' prompts in them.  This means that you can paste\n        doctests from files or docstrings (even if they have leading\n        whitespace), and the code will execute correctly.  You can then use\n",
    "line_range": [
        366,
        398
    ],
    "command_specific_fields": {
        "method_name": "xmode"
    },
    "language": "python",
    "commit": "128bd582b9894b8ae9ff577aafe13f5fdb39c3cb",
    "prompt": ""
}