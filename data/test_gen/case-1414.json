{
    "case_id": "case-1414",
    "repo_name": "Zulko/moviepy",
    "file_path": "moviepy/video/compositing/transitions.py",
    "code_snippet": "\n\n@requires_duration\n\ndef slide_out(clip, duration, side):\n\n    \"\"\"Makes the clip go away by one side of the screen.\n\n\n\n    Only works when the clip is included in a CompositeVideoClip,\n\n    and if the clip has the same size as the whole composition.\n\n\n\n    Parameters\n\n    ----------\n\n\n\n    clip : moviepy.Clip.Clip\n\n      A video clip.\n\n\n\n    duration : float\n\n      Time taken for the clip to fully disappear.\n\n\n\n    side : str\n\n      Side of the screen where the clip goes. One of\n\n      'top', 'bottom', 'left' or 'right'.\n\n\n\n    Examples\n\n    --------\n\n\n\n    >>> clips = [... make a list of clips]\n\n    >>> slided_clips = [\n\n    ...     CompositeVideoClip([clip.fx(transfx.slide_out, 1, \"left\")])\n\n    ...     for clip in clips\n\n    ... ]\n\n    >>> final_clip = concatenate_videoclips(slided_clips, padding=-1)\n\n    >>>\n\n    >>> clip = ColorClip(\n\n    ...     color=(255, 0, 0), duration=1, size=(300, 300)\n\n    ... ).with_fps(60)\n\n    >>> final_clip = CompositeVideoClip([transfx.slide_out(clip, 1, \"right\")])\n\n    \"\"\"\n\n    w, h = clip.size\n\n    ts = clip.duration - duration  # start time of the effect.\n\n    pos_dict = {\n\n        \"left\": lambda t: (min(0, w * (-(t - ts) / duration)), \"center\"),\n\n        \"right\": lambda t: (max(0, w * ((t - ts) / duration)), \"center\"),\n\n        \"top\": lambda t: (\"center\", min(0, h * (-(t - ts) / duration))),\n\n        \"bottom\": lambda t: (\"center\", max(0, h * ((t - ts) / duration))),\n\n    }\n\n\n\n    return clip.with_position(pos_dict[side])\n",
    "line_range": [
        82,
        128
    ],
    "command_specific_fields": {
        "method_name": "slide_out"
    },
    "language": "python",
    "commit": "0f6f6d4d9b96c69d109975549fe6293931f1a19d",
    "prompt": ""
}