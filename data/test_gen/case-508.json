{
    "case_id": "case-508",
    "repo_name": "cheeriojs/cheerio",
    "file_path": "src/api/forms.ts",
    "code_snippet": " */\n\nexport function serializeArray<T extends AnyNode>(\n\n  this: Cheerio<T>,\n\n): {\n\n  name: string;\n\n  value: string;\n\n}[] {\n\n  // Resolve all form elements from either forms or collections of form elements\n\n  return this.map((_, elem) => {\n\n    const $elem = this._make(elem);\n\n    if (isTag(elem) && elem.name === 'form') {\n\n      return $elem.find(submittableSelector).toArray();\n\n    }\n\n    return $elem.filter(submittableSelector).toArray();\n\n  })\n\n    .filter(\n\n      // Verify elements have a name (`attr.name`) and are not disabled (`:enabled`)\n\n      '[name!=\"\"]:enabled' +\n\n        // And cannot be clicked (`[type=submit]`) or are used in `x-www-form-urlencoded` (`[type=file]`)\n\n        ':not(:submit, :button, :image, :reset, :file)' +\n\n        // And are either checked/don't have a checkable state\n\n        ':matches([checked], :not(:checkbox, :radio))',\n\n      // Convert each of the elements to its value(s)\n\n    )\n\n    .map<\n\n      AnyNode,\n\n      {\n\n        name: string;\n\n        value: string;\n\n      }\n\n    >((_, elem) => {\n\n      const $elem = this._make(elem);\n\n      const name = $elem.attr('name') as string; // We have filtered for elements with a name before.\n\n      // If there is no value set (e.g. `undefined`, `null`), then default value to empty\n\n      const value = $elem.val() ?? '';\n\n\n\n      // If we have an array of values (e.g. `<select multiple>`), return an array of key/value pairs\n\n      if (Array.isArray(value)) {\n\n        return value.map((val) =>\n\n          /*\n\n           * We trim replace any line endings (e.g. `\\r` or `\\r\\n` with `\\r\\n`) to guarantee consistency across platforms\n\n           * These can occur inside of `<textarea>'s`\n\n           */\n\n          ({ name, value: val.replace(rCRLF, '\\r\\n') }),\n\n        );\n\n      }\n\n      // Otherwise (e.g. `<input type=\"text\">`, return only one key/value pair\n\n      return { name, value: value.replace(rCRLF, '\\r\\n') };\n\n    })\n\n    .toArray();\n\n}\n",
    "line_range": [
        52,
        103
    ],
    "command_specific_fields": {
        "method_name": "serializeArray"
    },
    "language": "typescript",
    "commit": "da0b8840f42489030da52172f08d79d4509c999b",
    "prompt": ""
}