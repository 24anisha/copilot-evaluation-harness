{
    "case_id": "case-626",
    "repo_name": "nexe/nexe",
    "file_path": "src/compiler.ts",
    "code_snippet": "  }\n\n\n\n  private async _assembleDeliverable(binary: Readable) {\n\n    if (!this.options.mangle) {\n\n      return binary\n\n    }\n\n    const launchCode = this.code()\n\n    const codeSize = Buffer.byteLength(launchCode)\n\n    const sentinel = Buffer.from('<nexe~~sentinel>')\n\n\n\n    let vfsSize = 0\n\n    const streams = [\n\n      binary,\n\n      toStream(launchCode),\n\n      this.bundle.toStream().pipe(\n\n        new Transform({\n\n          transform: (chunk, _, cb) => {\n\n            vfsSize || this.bundle.finalize()\n\n            chunk && (vfsSize += chunk.length)\n\n            cb(null, chunk)\n\n          },\n\n        })\n\n      ),\n\n    ]\n\n\n\n    let done = false\n\n    return new MultiStream((cb) => {\n\n      if (done) cb(null, null)\n\n      else if (streams.length) cb(null, streams.shift() as Readable)\n\n      else {\n\n        done = true\n\n        const trailers = Buffer.alloc(16)\n\n        trailers.writeDoubleLE(codeSize, 0)\n\n        trailers.writeDoubleLE(vfsSize, 8)\n\n        cb(null, toStream(Buffer.concat([sentinel, trailers])))\n\n      }\n\n    })\n\n  }\n",
    "line_range": [
        291,
        328
    ],
    "command_specific_fields": {
        "method_name": "_assembleDeliverable"
    },
    "language": "typescript",
    "commit": "5219a2ac74f97e644127ea37f000daa4b39da538",
    "prompt": ""
}