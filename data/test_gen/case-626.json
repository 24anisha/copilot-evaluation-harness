{
    "case_id": "case-0",
    "repo_name": "nexe/nexe",
    "file_path": "src/compiler.ts",
    "code_snippet": "{\n    if (!this.options.mangle) {\n      return binary\n    }\n    const launchCode = this.code()\n    const codeSize = Buffer.byteLength(launchCode)\n    const sentinel = Buffer.from('<nexe~~sentinel>')\n\n    let vfsSize = 0\n    const streams = [\n      binary,\n      toStream(launchCode),\n      this.bundle.toStream().pipe(\n        new Transform({\n          transform: (chunk, _, cb) => {\n            vfsSize || this.bundle.finalize()\n            chunk && (vfsSize += chunk.length)\n            cb(null, chunk)\n          },\n        })\n      ),\n    ]\n\n    let done = false\n    return new MultiStream((cb) => {\n      if (done) cb(null, null)\n      else if (streams.length) cb(null, streams.shift() as Readable)\n      else {\n        done = true\n        const trailers = Buffer.alloc(16)\n        trailers.writeDoubleLE(codeSize, 0)\n        trailers.writeDoubleLE(vfsSize, 8)\n        cb(null, toStream(Buffer.concat([sentinel, trailers])))\n      }\n    })\n  }",
    "line_range": [
        291,
        328
    ],
    "command_specific_fields": {
        "method_name": "_assembleDeliverable"
    },
    "language": "typescript",
    "commit": "5219a2ac74f97e644127ea37f000daa4b39da538"
}