{
    "case_id": "case-511",
    "repo_name": "timc1/kbar",
    "file_path": "src/KBarSearch.tsx",
    "code_snippet": "\n\nexport function KBarSearch(\n\n  props: React.InputHTMLAttributes<HTMLInputElement> & {\n\n    defaultPlaceholder?: string;\n\n  }\n\n) {\n\n  const {\n\n    query,\n\n    search,\n\n    actions,\n\n    currentRootActionId,\n\n    activeIndex,\n\n    showing,\n\n    options,\n\n  } = useKBar((state) => ({\n\n    search: state.searchQuery,\n\n    currentRootActionId: state.currentRootActionId,\n\n    actions: state.actions,\n\n    activeIndex: state.activeIndex,\n\n    showing: state.visualState === VisualState.showing,\n\n  }));\n\n\n\n  const [inputValue, setInputValue] = React.useState(search);\n\n  React.useEffect(() => {\n\n    query.setSearch(inputValue);\n\n   }, [inputValue, query]);\n\n\n\n  const { defaultPlaceholder, ...rest } = props;\n\n\n\n  React.useEffect(() => {\n\n    query.setSearch(\"\");\n\n    query.getInput().focus();\n\n    return () => query.setSearch(\"\");\n\n  }, [currentRootActionId, query]);\n\n\n\n  const placeholder = React.useMemo((): string => {\n\n    const defaultText = defaultPlaceholder ?? \"Type a command or search\u2026\";\n\n    return currentRootActionId && actions[currentRootActionId]\n\n      ? actions[currentRootActionId].name\n\n      : defaultText;\n\n  }, [actions, currentRootActionId, defaultPlaceholder]);\n\n\n\n  return (\n\n    <input\n\n      {...rest}\n\n      ref={query.inputRefSetter}\n\n      autoFocus\n\n      autoComplete=\"off\"\n\n      role=\"combobox\"\n\n      spellCheck=\"false\"\n\n      aria-expanded={showing}\n\n      aria-controls={KBAR_LISTBOX}\n\n      aria-activedescendant={getListboxItemId(activeIndex)}\n\n      value={inputValue}\n\n      placeholder={placeholder}\n\n      onChange={(event) => {\n\n        props.onChange?.(event);\n\n        setInputValue(event.target.value);\n\n        options?.callbacks?.onQueryChange?.(event.target.value);\n\n      }}\n\n      onKeyDown={(event) => {\n\n        props.onKeyDown?.(event);\n\n        if (currentRootActionId && !search && event.key === \"Backspace\") {\n\n          const parent = actions[currentRootActionId].parent;\n\n          query.setCurrentRootAction(parent);\n\n        }\n\n      }}\n\n    />\n\n  );\n\n}\n",
    "line_range": [
        6,
        76
    ],
    "command_specific_fields": {
        "method_name": "KBarSearch"
    },
    "language": "typescript",
    "commit": "952d7c6badfe10c3b7b3bd46bbf42722ff03bfc8",
    "prompt": ""
}