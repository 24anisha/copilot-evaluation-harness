{
    "case_id": "case-472",
    "repo_name": "grid-js/gridjs",
    "file_path": "src/util/deepEqual.ts",
    "code_snippet": " */\n\nexport function deepEqual<A, B>(obj1: A, obj2: B) {\n\n  // If objects are not the same type, return false\n\n  if (typeof obj1 !== typeof obj2) {\n\n    return false;\n\n  }\n\n  // If objects are both null or undefined, return true\n\n  if (obj1 === null && obj2 === null) {\n\n    return true;\n\n  }\n\n  // If objects are both primitive types, compare them directly\n\n  if (typeof obj1 !== 'object') {\n\n    // eslint-disable-next-line\n\n    // @ts-ignore\n\n    return obj1 === obj2;\n\n  }\n\n  // If objects are arrays, compare their elements recursively\n\n  if (Array.isArray(obj1) && Array.isArray(obj2)) {\n\n    if (obj1.length !== obj2.length) {\n\n      return false;\n\n    }\n\n    for (let i = 0; i < obj1.length; i++) {\n\n      if (!deepEqual(obj1[i], obj2[i])) {\n\n        return false;\n\n      }\n\n    }\n\n    return true;\n\n  }\n\n  // If objects are VNodes, compare their props only\n\n  if (\n\n    // eslint-disable-next-line no-prototype-builtins\n\n    obj1.hasOwnProperty('constructor') &&\n\n    // eslint-disable-next-line no-prototype-builtins\n\n    obj2.hasOwnProperty('constructor') &&\n\n    // eslint-disable-next-line no-prototype-builtins\n\n    obj1.hasOwnProperty('props') &&\n\n    // eslint-disable-next-line no-prototype-builtins\n\n    obj2.hasOwnProperty('props') &&\n\n    // eslint-disable-next-line no-prototype-builtins\n\n    obj1.hasOwnProperty('key') &&\n\n    // eslint-disable-next-line no-prototype-builtins\n\n    obj2.hasOwnProperty('key') &&\n\n    // eslint-disable-next-line no-prototype-builtins\n\n    obj1.hasOwnProperty('ref') &&\n\n    // eslint-disable-next-line no-prototype-builtins\n\n    obj2.hasOwnProperty('ref') &&\n\n    // eslint-disable-next-line no-prototype-builtins\n\n    obj1.hasOwnProperty('type') &&\n\n    // eslint-disable-next-line no-prototype-builtins\n\n    obj2.hasOwnProperty('type')\n\n  ) {\n\n    return deepEqual(obj1['props'], obj2['props']);\n\n  }\n\n  // If objects are both objects, compare their properties recursively\n\n  const keys1 = Object.keys(obj1);\n\n  const keys2 = Object.keys(obj2);\n\n  if (keys1.length !== keys2.length) {\n\n    return false;\n\n  }\n\n  for (const key of keys1) {\n\n    // eslint-disable-next-line no-prototype-builtins\n\n    if (!obj2.hasOwnProperty(key) || !deepEqual(obj1[key], obj2[key])) {\n\n      return false;\n\n    }\n\n  }\n\n  return true;\n\n}\n",
    "line_range": [
        5,
        72
    ],
    "command_specific_fields": {
        "method_name": "deepEqual"
    },
    "language": "typescript",
    "commit": "9a6a53eacdc019c01decfdfa8e77cb800922de3d",
    "prompt": ""
}