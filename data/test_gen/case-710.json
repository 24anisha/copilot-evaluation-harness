{
    "case_id": "case-710",
    "repo_name": "databrickslabs/dolly",
    "file_path": "training/trainer.py",
    "code_snippet": "\n\ndef load_training_dataset(path_or_dataset: str = DEFAULT_TRAINING_DATASET) -> Dataset:\n\n    logger.info(f\"Loading dataset from {path_or_dataset}\")\n\n    dataset = load_dataset(path_or_dataset)[\"train\"]\n\n    logger.info(\"Found %d rows\", dataset.num_rows)\n\n\n\n    def _add_text(rec):\n\n        instruction = rec[\"instruction\"]\n\n        response = rec[\"response\"]\n\n        context = rec.get(\"context\")\n\n\n\n        if not instruction:\n\n            raise ValueError(f\"Expected an instruction in: {rec}\")\n\n\n\n        if not response:\n\n            raise ValueError(f\"Expected a response in: {rec}\")\n\n\n\n        # For some instructions there is an input that goes along with the instruction, providing context for the\n\n        # instruction.  For example, the input might be a passage from Wikipedia and the instruction says to extract\n\n        # some piece of information from it.  The response is that information to extract.  In other cases there is\n\n        # no input.  For example, the instruction might be open QA such as asking what year some historic figure was\n\n        # born.\n\n        if context:\n\n            rec[\"text\"] = PROMPT_WITH_INPUT_FORMAT.format(instruction=instruction, response=response, input=context)\n\n        else:\n\n            rec[\"text\"] = PROMPT_NO_INPUT_FORMAT.format(instruction=instruction, response=response)\n\n        return rec\n\n\n\n    dataset = dataset.map(_add_text)\n\n\n\n    return dataset\n",
    "line_range": [
        86,
        117
    ],
    "command_specific_fields": {
        "method_name": "load_training_dataset"
    },
    "language": "python",
    "commit": "e2d664ddf06e0723d818dc56d6c522ead4bd881d",
    "prompt": ""
}