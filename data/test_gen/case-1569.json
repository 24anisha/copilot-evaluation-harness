{
    "case_id": "case-1569",
    "repo_name": "networkx/networkx",
    "file_path": "networkx/generators/intersection.py",
    "code_snippet": "\n\n\n\n@py_random_state(3)\n\n@nx._dispatchable(graphs=None, returns_graph=True)\n\ndef general_random_intersection_graph(n, m, p, seed=None):\n\n    \"\"\"Returns a random intersection graph with independent probabilities\n\n    for connections between node and attribute sets.\n\n\n\n    Parameters\n\n    ----------\n\n    n : int\n\n        The number of nodes in the first bipartite set (nodes)\n\n    m : int\n\n        The number of nodes in the second bipartite set (attributes)\n\n    p : list of floats of length m\n\n        Probabilities for connecting nodes to each attribute\n\n    seed : integer, random_state, or None (default)\n\n        Indicator of random number generation state.\n\n        See :ref:`Randomness<randomness>`.\n\n\n\n    See Also\n\n    --------\n\n    gnp_random_graph, uniform_random_intersection_graph\n\n\n\n    References\n\n    ----------\n\n    .. [1] Nikoletseas, S. E., Raptopoulos, C., and Spirakis, P. G.\n\n       The existence and efficient construction of large independent sets\n\n       in general random intersection graphs. In ICALP (2004), J. D\u00b4\u0131az,\n\n       J. Karhum\u00a8aki, A. Lepist\u00a8o, and D. Sannella, Eds., vol. 3142\n\n       of Lecture Notes in Computer Science, Springer, pp. 1029\u20131040.\n\n    \"\"\"\n\n    if len(p) != m:\n\n        raise ValueError(\"Probability list p must have m elements.\")\n\n    G = nx.empty_graph(n + m)\n\n    mset = range(n, n + m)\n\n    for u in range(n):\n\n        for v, q in zip(mset, p):\n\n            if seed.random() < q:\n\n                G.add_edge(u, v)\n\n    return nx.projected_graph(G, range(n))\n",
    "line_range": [
        85,
        125
    ],
    "command_specific_fields": {
        "method_name": "general_random_intersection_graph"
    },
    "language": "python",
    "commit": "89718e0514bded93ded5b00aed755a4474c1dc6f",
    "prompt": ""
}