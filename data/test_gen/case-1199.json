{
    "case_id": "case-1199",
    "repo_name": "dbcli/mycli",
    "file_path": "mycli/sqlexecute.py",
    "code_snippet": "\n\n    def connect(self, database=None, user=None, password=None, host=None,\n\n                port=None, socket=None, charset=None, local_infile=None,\n\n                ssl=None, ssh_host=None, ssh_port=None, ssh_user=None,\n\n                ssh_password=None, ssh_key_filename=None, init_command=None):\n\n        db = (database or self.dbname)\n\n        user = (user or self.user)\n\n        password = (password or self.password)\n\n        host = (host or self.host)\n\n        port = (port or self.port)\n\n        socket = (socket or self.socket)\n\n        charset = (charset or self.charset)\n\n        local_infile = (local_infile or self.local_infile)\n\n        ssl = (ssl or self.ssl)\n\n        ssh_user = (ssh_user or self.ssh_user)\n\n        ssh_host = (ssh_host or self.ssh_host)\n\n        ssh_port = (ssh_port or self.ssh_port)\n\n        ssh_password = (ssh_password or self.ssh_password)\n\n        ssh_key_filename = (ssh_key_filename or self.ssh_key_filename)\n\n        init_command = (init_command or self.init_command)\n\n        _logger.debug(\n\n            'Connection DB Params: \\n'\n\n            '\\tdatabase: %r'\n\n            '\\tuser: %r'\n\n            '\\thost: %r'\n\n            '\\tport: %r'\n\n            '\\tsocket: %r'\n\n            '\\tcharset: %r'\n\n            '\\tlocal_infile: %r'\n\n            '\\tssl: %r'\n\n            '\\tssh_user: %r'\n\n            '\\tssh_host: %r'\n\n            '\\tssh_port: %r'\n\n            '\\tssh_password: %r'\n\n            '\\tssh_key_filename: %r'\n\n            '\\tinit_command: %r',\n\n            db, user, host, port, socket, charset, local_infile, ssl,\n\n            ssh_user, ssh_host, ssh_port, ssh_password, ssh_key_filename,\n\n            init_command\n\n        )\n\n        conv = conversions.copy()\n\n        conv.update({\n\n            FIELD_TYPE.TIMESTAMP: lambda obj: (convert_datetime(obj) or obj),\n\n            FIELD_TYPE.DATETIME: lambda obj: (convert_datetime(obj) or obj),\n\n            FIELD_TYPE.TIME: lambda obj: (convert_timedelta(obj) or obj),\n\n            FIELD_TYPE.DATE: lambda obj: (convert_date(obj) or obj),\n\n        })\n\n\n\n        defer_connect = False\n\n\n\n        if ssh_host:\n\n            defer_connect = True\n\n\n\n        client_flag = pymysql.constants.CLIENT.INTERACTIVE\n\n        if init_command and len(list(special.split_queries(init_command))) > 1:\n\n            client_flag |= pymysql.constants.CLIENT.MULTI_STATEMENTS\n\n\n\n        ssl_context = None\n\n        if ssl:\n\n            ssl_context = self._create_ssl_ctx(ssl)\n\n\n\n        conn = pymysql.connect(\n\n            database=db, user=user, password=password, host=host, port=port,\n\n            unix_socket=socket, use_unicode=True, charset=charset,\n\n            autocommit=True, client_flag=client_flag,\n\n            local_infile=local_infile, conv=conv, ssl=ssl_context, program_name=\"mycli\",\n\n            defer_connect=defer_connect, init_command=init_command\n\n        )\n\n\n\n        if ssh_host:\n\n            client = paramiko.SSHClient()\n\n            client.load_system_host_keys()\n\n            client.set_missing_host_key_policy(paramiko.WarningPolicy())\n\n            client.connect(\n\n                ssh_host, ssh_port, ssh_user, ssh_password,\n\n                key_filename=ssh_key_filename\n\n            )\n\n            chan = client.get_transport().open_channel(\n\n                'direct-tcpip',\n\n                (host, port),\n\n                ('0.0.0.0', 0),\n\n            )\n\n            conn.connect(chan)\n\n\n\n        if hasattr(self, 'conn'):\n\n            self.conn.close()\n\n        self.conn = conn\n\n        # Update them after the connection is made to ensure that it was a\n\n        # successful connection.\n\n        self.dbname = db\n\n        self.user = user\n\n        self.password = password\n\n        self.host = host\n\n        self.port = port\n\n        self.socket = socket\n\n        self.charset = charset\n\n        self.ssl = ssl\n\n        self.init_command = init_command\n\n        # retrieve connection id\n\n        self.reset_connection_id()\n\n        self.server_info = ServerInfo.from_version_string(conn.server_version)\n",
    "line_range": [
        121,
        222
    ],
    "command_specific_fields": {
        "method_name": "connect"
    },
    "language": "python",
    "commit": "af5a17d980450e184cfc25e56e0e91a1389d378d",
    "prompt": ""
}