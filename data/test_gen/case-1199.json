{
    "case_id": "case-1199",
    "repo_name": "dbcli/mycli",
    "file_path": "mycli/sqlexecute.py",
    "code_snippet": "        self.local_infile = local_infile\n        self.ssl = ssl\n        self.server_info = None\n        self.connection_id = None\n        self.ssh_user = ssh_user\n        self.ssh_host = ssh_host\n        self.ssh_port = ssh_port\n        self.ssh_password = ssh_password\n        self.ssh_key_filename = ssh_key_filename\n        self.init_command = init_command\n        self.connect()\n\n    def connect(\n        self,\n        database=None,\n        user=None,\n        password=None,\n        host=None,\n        port=None,\n        socket=None,\n        charset=None,\n        local_infile=None,\n        ssl=None,\n        ssh_host=None,\n        ssh_port=None,\n        ssh_user=None,\n        ssh_password=None,\n        ssh_key_filename=None,\n        init_command=None,\n    ):\n        db = database or self.dbname\n        user = user or self.user\n        password = password or self.password\n        host = host or self.host\n        port = port or self.port\n        socket = socket or self.socket\n        charset = charset or self.charset\n        local_infile = local_infile or self.local_infile\n        ssl = ssl or self.ssl\n        ssh_user = ssh_user or self.ssh_user\n        ssh_host = ssh_host or self.ssh_host\n        ssh_port = ssh_port or self.ssh_port\n        ssh_password = ssh_password or self.ssh_password\n        ssh_key_filename = ssh_key_filename or self.ssh_key_filename\n        init_command = init_command or self.init_command\n        _logger.debug(\n            \"Connection DB Params: \\n\"\n            \"\\tdatabase: %r\"\n            \"\\tuser: %r\"\n            \"\\thost: %r\"\n            \"\\tport: %r\"\n            \"\\tsocket: %r\"\n            \"\\tcharset: %r\"\n            \"\\tlocal_infile: %r\"\n            \"\\tssl: %r\"\n            \"\\tssh_user: %r\"\n            \"\\tssh_host: %r\"\n            \"\\tssh_port: %r\"\n            \"\\tssh_password: %r\"\n            \"\\tssh_key_filename: %r\"\n            \"\\tinit_command: %r\",\n            db,\n            user,\n            host,\n            port,\n            socket,\n            charset,\n            local_infile,\n            ssl,\n            ssh_user,\n            ssh_host,\n            ssh_port,\n            ssh_password,\n            ssh_key_filename,\n            init_command,\n        )\n        conv = conversions.copy()\n        conv.update(\n            {\n                FIELD_TYPE.TIMESTAMP: lambda obj: (convert_datetime(obj) or obj),\n                FIELD_TYPE.DATETIME: lambda obj: (convert_datetime(obj) or obj),\n                FIELD_TYPE.TIME: lambda obj: (convert_timedelta(obj) or obj),\n                FIELD_TYPE.DATE: lambda obj: (convert_date(obj) or obj),\n            }\n        )\n\n        defer_connect = False\n\n        if ssh_host:\n            defer_connect = True\n\n        client_flag = pymysql.constants.CLIENT.INTERACTIVE\n        if init_command and len(list(special.split_queries(init_command))) > 1:\n            client_flag |= pymysql.constants.CLIENT.MULTI_STATEMENTS\n\n        ssl_context = None\n        if ssl:\n            ssl_context = self._create_ssl_ctx(ssl)\n\n        conn = pymysql.connect(\n            database=db,\n            user=user,\n",
    "line_range": [
        121,
        222
    ],
    "command_specific_fields": {
        "method_name": "connect"
    },
    "language": "python",
    "commit": "af5a17d980450e184cfc25e56e0e91a1389d378d",
    "prompt": ""
}