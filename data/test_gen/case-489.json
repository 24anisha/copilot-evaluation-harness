{
    "case_id": "case-489",
    "repo_name": "cheeriojs/cheerio",
    "file_path": "src/parse.ts",
    "code_snippet": " * @returns The parse function with options.\n\n */\n\nexport function getParse(\n\n  parser: (\n\n    content: string,\n\n    options: InternalOptions,\n\n    isDocument: boolean,\n\n    context: ParentNode | null,\n\n  ) => Document,\n\n) {\n\n  /**\n\n   * Parse a HTML string or a node.\n\n   *\n\n   * @param content - The HTML string or node.\n\n   * @param options - The parser options.\n\n   * @param isDocument - If `content` is a document.\n\n   * @param context - The context node in the DOM tree.\n\n   * @returns The parsed document node.\n\n   */\n\n  return function parse(\n\n    content: string | Document | AnyNode | AnyNode[] | Buffer,\n\n    options: InternalOptions,\n\n    isDocument: boolean,\n\n    context: ParentNode | null,\n\n  ): Document {\n\n    if (typeof Buffer !== 'undefined' && Buffer.isBuffer(content)) {\n\n      content = content.toString();\n\n    }\n\n\n\n    if (typeof content === 'string') {\n\n      return parser(content, options, isDocument, context);\n\n    }\n\n\n\n    const doc = content as AnyNode | AnyNode[] | Document;\n\n\n\n    if (!Array.isArray(doc) && checkIsDocument(doc)) {\n\n      // If `doc` is already a root, just return it\n\n      return doc;\n\n    }\n\n\n\n    // Add conent to new root element\n\n    const root = new Document([]);\n\n\n\n    // Update the DOM using the root\n\n    update(doc, root);\n\n\n\n    return root;\n\n  };\n\n}\n",
    "line_range": [
        14,
        62
    ],
    "command_specific_fields": {
        "method_name": "getParse"
    },
    "language": "typescript",
    "commit": "da0b8840f42489030da52172f08d79d4509c999b",
    "prompt": ""
}