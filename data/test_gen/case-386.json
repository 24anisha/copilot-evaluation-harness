{
    "case_id": "case-386",
    "repo_name": "dthree/cash",
    "file_path": "src/commands/ls.js",
    "code_snippet": "  },\n\n\n\n  formatDetails(files, totalSize, options) {\n\n    let result;\n\n\n\n    // If we have the detail view, draw out\n\n    // all of the details of each file.\n\n    // Otherwise, just throw the file names\n\n    // into columns.\n\n    if (Array.isArray(files[0])) {\n\n      const longest = {};\n\n      for (let i = 0; i < files.length; ++i) {\n\n        for (let j = 0; j < files[i].length; ++j) {\n\n          const len = String(files[i][j]).length;\n\n          longest[j] = longest[j] || 0;\n\n          longest[j] = (len > longest[j]) ? len : longest[j];\n\n        }\n\n      }\n\n\n\n      const newFiles = [];\n\n      for (let i = 0; i < files.length; ++i) {\n\n        let glob = '';\n\n        for (let j = 0; j < files[i].length; ++j) {\n\n          const padFn = (j === files[i].length - 1) ? 'pad' : 'lpad';\n\n          if (j === files[i].length - 1) {\n\n            glob += String(files[i][j]);\n\n          } else {\n\n            glob += `${pads[padFn](String(files[i][j]), longest[j], ' ')} `;\n\n          }\n\n        }\n\n        newFiles.push(String(glob));\n\n      }\n\n      result = newFiles.join('\\n');\n\n    } else if (options['1']) {\n\n      result = files.join('\\n');\n\n    } else {\n\n      const opt = {};\n\n      if (options.width) {\n\n        opt.width = options.width;\n\n      }\n\n\n\n      result = columnify(files, opt);\n\n    }\n\n\n\n    return ({\n\n      size: (options.humanreadable) ? filesize(totalSize, {unix: true}) : totalSize,\n\n      results: result\n\n    });\n\n  },\n",
    "line_range": [
        297,
        345
    ],
    "command_specific_fields": {
        "method_name": "formatDetails"
    },
    "language": "javascript",
    "commit": "3e28dae8bdb71215d5034df9003f3ef2804c2754",
    "prompt": ""
}