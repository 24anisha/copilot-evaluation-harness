{
    "case_id": "case-1177",
    "repo_name": "Rapptz/discord.py",
    "file_path": "discord/app_commands/commands.py",
    "code_snippet": "\n\n\n\ndef private_channel_only(func: Optional[T] = None) -> Union[T, Callable[[T], T]]:\n\n    \"\"\"A decorator that indicates this command can only be used in the context of DMs and group DMs.\n\n\n\n    This is **not** implemented as a :func:`check`, and is instead verified by Discord server side.\n\n    Therefore, there is no error handler called when a command is used within a guild.\n\n\n\n    This decorator can be called with or without parentheses.\n\n\n\n    Due to a Discord limitation, this decorator does nothing in subcommands and is ignored.\n\n\n\n    .. versionadded:: 2.4\n\n\n\n    Examples\n\n    ---------\n\n\n\n    .. code-block:: python3\n\n\n\n        @app_commands.command()\n\n        @app_commands.private_channel_only()\n\n        async def my_private_channel_only_command(interaction: discord.Interaction) -> None:\n\n            await interaction.response.send_message('I am only available in DMs and GDMs!')\n\n    \"\"\"\n\n\n\n    def inner(f: T) -> T:\n\n        if isinstance(f, (Command, Group, ContextMenu)):\n\n            f.guild_only = False\n\n            allowed_contexts = f.allowed_contexts or AppCommandContext()\n\n            f.allowed_contexts = allowed_contexts\n\n        else:\n\n            allowed_contexts = getattr(f, '__discord_app_commands_contexts__', None) or AppCommandContext()\n\n            f.__discord_app_commands_contexts__ = allowed_contexts  # type: ignore # Runtime attribute assignment\n\n\n\n        allowed_contexts.private_channel = True\n\n\n\n        return f\n\n\n\n    # Check if called with parentheses or not\n\n    if func is None:\n\n        # Called with parentheses\n\n        return inner\n\n    else:\n\n        return inner(func)\n",
    "line_range": [
        2540,
        2583
    ],
    "command_specific_fields": {
        "method_name": "private_channel_only"
    },
    "language": "python",
    "commit": "ff638d393d0f5a83639ccc087bec9bf588b59a22",
    "prompt": ""
}