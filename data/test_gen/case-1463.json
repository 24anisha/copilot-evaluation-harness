{
    "case_id": "case-1463",
    "repo_name": "facebookresearch/detr",
    "file_path": "models/detr.py",
    "code_snippet": "        return losses\n\n\n\n    def loss_masks(self, outputs, targets, indices, num_boxes):\n\n        \"\"\"Compute the losses related to the masks: the focal loss and the dice loss.\n\n           targets dicts must contain the key \"masks\" containing a tensor of dim [nb_target_boxes, h, w]\n\n        \"\"\"\n\n        assert \"pred_masks\" in outputs\n\n\n\n        src_idx = self._get_src_permutation_idx(indices)\n\n        tgt_idx = self._get_tgt_permutation_idx(indices)\n\n        src_masks = outputs[\"pred_masks\"]\n\n        src_masks = src_masks[src_idx]\n\n        masks = [t[\"masks\"] for t in targets]\n\n        # TODO use valid to mask invalid areas due to padding in loss\n\n        target_masks, valid = nested_tensor_from_tensor_list(masks).decompose()\n\n        target_masks = target_masks.to(src_masks)\n\n        target_masks = target_masks[tgt_idx]\n\n\n\n        # upsample predictions to the target size\n\n        src_masks = interpolate(src_masks[:, None], size=target_masks.shape[-2:],\n\n                                mode=\"bilinear\", align_corners=False)\n\n        src_masks = src_masks[:, 0].flatten(1)\n\n\n\n        target_masks = target_masks.flatten(1)\n\n        target_masks = target_masks.view(src_masks.shape)\n\n        losses = {\n\n            \"loss_mask\": sigmoid_focal_loss(src_masks, target_masks, num_boxes),\n\n            \"loss_dice\": dice_loss(src_masks, target_masks, num_boxes),\n\n        }\n\n        return losses\n",
    "line_range": [
        162,
        191
    ],
    "command_specific_fields": {
        "method_name": "loss_masks"
    },
    "language": "python",
    "commit": "29901c51d7fe8712168b8d0d64351170bc0f83e0",
    "prompt": ""
}