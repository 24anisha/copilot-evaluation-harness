{
    "case_id": "case-1269",
    "repo_name": "networkx/networkx",
    "file_path": "networkx/algorithms/traversal/depth_first_search.py",
    "code_snippet": "\n\n@nx._dispatchable\n\ndef dfs_successors(G, source=None, depth_limit=None, *, sort_neighbors=None):\n\n    \"\"\"Returns dictionary of successors in depth-first-search from source.\n\n\n\n    Parameters\n\n    ----------\n\n    G : NetworkX graph\n\n\n\n    source : node, optional\n\n       Specify starting node for depth-first search.\n\n       Note that you will get successors for all nodes in the\n\n       component containing `source`. This input only specifies\n\n       where the DFS starts.\n\n\n\n    depth_limit : int, optional (default=len(G))\n\n       Specify the maximum search depth.\n\n\n\n    sort_neighbors : function (default=None)\n\n        A function that takes an iterator over nodes as the input, and\n\n        returns an iterable of the same nodes with a custom ordering.\n\n        For example, `sorted` will sort the nodes in increasing order.\n\n\n\n    Returns\n\n    -------\n\n    succ: dict\n\n       A dictionary with nodes as keys and list of successor nodes as values.\n\n\n\n    Examples\n\n    --------\n\n    >>> G = nx.path_graph(5)\n\n    >>> nx.dfs_successors(G, source=0)\n\n    {0: [1], 1: [2], 2: [3], 3: [4]}\n\n    >>> nx.dfs_successors(G, source=0, depth_limit=2)\n\n    {0: [1], 1: [2]}\n\n\n\n    Notes\n\n    -----\n\n    If a source is not specified then a source is chosen arbitrarily and\n\n    repeatedly until all components in the graph are searched.\n\n\n\n    The implementation of this function is adapted from David Eppstein's\n\n    depth-first search function in `PADS`_, with modifications\n\n    to allow depth limits based on the Wikipedia article\n\n    \"`Depth-limited search`_\".\n\n\n\n    .. _PADS: http://www.ics.uci.edu/~eppstein/PADS\n\n    .. _Depth-limited search: https://en.wikipedia.org/wiki/Depth-limited_search\n\n\n\n    See Also\n\n    --------\n\n    dfs_preorder_nodes\n\n    dfs_postorder_nodes\n\n    dfs_labeled_edges\n\n    :func:`~networkx.algorithms.traversal.edgedfs.edge_dfs`\n\n    :func:`~networkx.algorithms.traversal.breadth_first_search.bfs_tree`\n\n    \"\"\"\n\n    d = defaultdict(list)\n\n    for s, t in dfs_edges(\n\n        G,\n\n        source=source,\n\n        depth_limit=depth_limit,\n\n        sort_neighbors=sort_neighbors,\n\n    ):\n\n        d[s].append(t)\n\n    return dict(d)\n",
    "line_range": [
        226,
        292
    ],
    "command_specific_fields": {
        "method_name": "dfs_successors"
    },
    "language": "python",
    "commit": "89718e0514bded93ded5b00aed755a4474c1dc6f",
    "prompt": ""
}