{
    "case_id": "case-1715",
    "repo_name": "pypa/wheel",
    "file_path": "src/wheel/vendored/packaging/specifiers.py",
    "code_snippet": "        return all(s.contains(item, prereleases=prereleases) for s in self._specs)\n\n\n\n    def filter(\n\n        self, iterable: Iterable[UnparsedVersionVar], prereleases: Optional[bool] = None\n\n    ) -> Iterator[UnparsedVersionVar]:\n\n        \"\"\"Filter items in the given iterable, that match the specifiers in this set.\n\n\n\n        :param iterable:\n\n            An iterable that can contain version strings and :class:`Version` instances.\n\n            The items in the iterable will be filtered according to the specifier.\n\n        :param prereleases:\n\n            Whether or not to allow prereleases in the returned iterator. If set to\n\n            ``None`` (the default), it will be intelligently decide whether to allow\n\n            prereleases or not (based on the :attr:`prereleases` attribute, and\n\n            whether the only versions matching are prereleases).\n\n\n\n        This method is smarter than just ``filter(SpecifierSet(...).contains, [...])``\n\n        because it implements the rule from :pep:`440` that a prerelease item\n\n        SHOULD be accepted if no other versions match the given specifier.\n\n\n\n        >>> list(SpecifierSet(\">=1.2.3\").filter([\"1.2\", \"1.3\", \"1.5a1\"]))\n\n        ['1.3']\n\n        >>> list(SpecifierSet(\">=1.2.3\").filter([\"1.2\", \"1.3\", Version(\"1.4\")]))\n\n        ['1.3', <Version('1.4')>]\n\n        >>> list(SpecifierSet(\">=1.2.3\").filter([\"1.2\", \"1.5a1\"]))\n\n        []\n\n        >>> list(SpecifierSet(\">=1.2.3\").filter([\"1.3\", \"1.5a1\"], prereleases=True))\n\n        ['1.3', '1.5a1']\n\n        >>> list(SpecifierSet(\">=1.2.3\", prereleases=True).filter([\"1.3\", \"1.5a1\"]))\n\n        ['1.3', '1.5a1']\n\n\n\n        An \"empty\" SpecifierSet will filter items based on the presence of prerelease\n\n        versions in the set.\n\n\n\n        >>> list(SpecifierSet(\"\").filter([\"1.3\", \"1.5a1\"]))\n\n        ['1.3']\n\n        >>> list(SpecifierSet(\"\").filter([\"1.5a1\"]))\n\n        ['1.5a1']\n\n        >>> list(SpecifierSet(\"\", prereleases=True).filter([\"1.3\", \"1.5a1\"]))\n\n        ['1.3', '1.5a1']\n\n        >>> list(SpecifierSet(\"\").filter([\"1.3\", \"1.5a1\"], prereleases=True))\n\n        ['1.3', '1.5a1']\n\n        \"\"\"\n\n        # Determine if we're forcing a prerelease or not, if we're not forcing\n\n        # one for this particular filter call, then we'll use whatever the\n\n        # SpecifierSet thinks for whether or not we should support prereleases.\n\n        if prereleases is None:\n\n            prereleases = self.prereleases\n\n\n\n        # If we have any specifiers, then we want to wrap our iterable in the\n\n        # filter method for each one, this will act as a logical AND amongst\n\n        # each specifier.\n\n        if self._specs:\n\n            for spec in self._specs:\n\n                iterable = spec.filter(iterable, prereleases=bool(prereleases))\n\n            return iter(iterable)\n\n        # If we do not have any specifiers, then we need to have a rough filter\n\n        # which will filter out any pre-releases, unless there are no final\n\n        # releases.\n\n        else:\n\n            filtered: List[UnparsedVersionVar] = []\n\n            found_prereleases: List[UnparsedVersionVar] = []\n\n\n\n            for item in iterable:\n\n                parsed_version = _coerce_version(item)\n\n\n\n                # Store any item which is a pre-release for later unless we've\n\n                # already found a final version or we are accepting prereleases\n\n                if parsed_version.is_prerelease and not prereleases:\n\n                    if not filtered:\n\n                        found_prereleases.append(item)\n\n                else:\n\n                    filtered.append(item)\n\n\n\n            # If we've found no items except for pre-releases, then we'll go\n\n            # ahead and use the pre-releases\n\n            if not filtered and found_prereleases and prereleases is None:\n\n                return iter(found_prereleases)\n\n\n\n            return iter(filtered)\n",
    "line_range": [
        932,
        1011
    ],
    "command_specific_fields": {
        "method_name": "filter"
    },
    "language": "python",
    "commit": "1e00742acc9fb33f6e71460c3844c2b66532af7f",
    "prompt": ""
}