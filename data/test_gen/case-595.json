{
    "case_id": "case-595",
    "repo_name": "kelektiv/node-cron",
    "file_path": "src/job.ts",
    "code_snippet": "\n\t\tif (onComplete != null) {\n\t\t\t// casting to the correct type since we just made sure that WithOnComplete<OC> = true\n\t\t\tthis.onComplete = this._fnWrap(\n\t\t\t\tonComplete\n\t\t\t) as WithOnComplete<OC> extends true ? CronOnCompleteCallback : undefined;\n\t\t}\n\n\t\tif (this.cronTime.realDate) {\n\t\t\tthis.runOnce = true;\n\t\t}\n\n\t\tthis.addCallback(this._fnWrap(onTick));\n\n\t\tif (runOnInit) {\n\t\t\tthis.lastExecution = new Date();\n\t\t\tvoid this.fireOnTick();\n\t\t}\n\n\t\tif (start) this.start();\n\t}\n\n\tstatic from<OC extends CronOnCompleteCommand | null = null, C = null>(\n\t\tparams: CronJobParams<OC, C>\n\t) {\n\t\t// runtime check for JS users\n\t\t// eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n\t\tif (params.timeZone != null && params.utcOffset != null) {\n\t\t\tthrow new ExclusiveParametersError('timeZone', 'utcOffset');\n\t\t}\n\n\t\tif (params.timeZone != null) {\n\t\t\treturn new CronJob<OC, C>(\n\t\t\t\tparams.cronTime,\n\t\t\t\tparams.onTick,\n\t\t\t\tparams.onComplete,\n\t\t\t\tparams.start,\n\t\t\t\tparams.timeZone,\n\t\t\t\tparams.context,\n\t\t\t\tparams.runOnInit,\n\t\t\t\tparams.utcOffset,\n\t\t\t\tparams.unrefTimeout,\n\t\t\t\tparams.waitForCompletion,\n\t\t\t\tparams.errorHandler\n\t\t\t);\n\t\t} else if (params.utcOffset != null) {\n\t\t\treturn new CronJob<OC, C>(\n\t\t\t\tparams.cronTime,\n\t\t\t\tparams.onTick,\n",
    "line_range": [
        99,
        147
    ],
    "command_specific_fields": {
        "method_name": "from"
    },
    "language": "typescript",
    "commit": "1eb978b8cddf8a2f2bead841adcad408238333c6",
    "prompt": ""
}