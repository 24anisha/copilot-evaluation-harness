{
    "case_id": "case-758",
    "repo_name": "pypa/wheel",
    "file_path": "src/wheel/vendored/packaging/_musllinux.py",
    "code_snippet": "\n\n\n\ndef platform_tags(archs: Sequence[str]) -> Iterator[str]:\n\n    \"\"\"Generate musllinux tags compatible to the current platform.\n\n\n\n    :param archs: Sequence of compatible architectures.\n\n        The first one shall be the closest to the actual architecture and be the part of\n\n        platform tag after the ``linux_`` prefix, e.g. ``x86_64``.\n\n        The ``linux_`` prefix is assumed as a prerequisite for the current platform to\n\n        be musllinux-compatible.\n\n\n\n    :returns: An iterator of compatible musllinux tags.\n\n    \"\"\"\n\n    sys_musl = _get_musl_version(sys.executable)\n\n    if sys_musl is None:  # Python not dynamically linked against musl.\n\n        return\n\n    for arch in archs:\n\n        for minor in range(sys_musl.minor, -1, -1):\n\n            yield f\"musllinux_{sys_musl.major}_{minor}_{arch}\"\n",
    "line_range": [
        52,
        70
    ],
    "command_specific_fields": {
        "method_name": "platform_tags"
    },
    "language": "python",
    "commit": "1e00742acc9fb33f6e71460c3844c2b66532af7f",
    "prompt": ""
}