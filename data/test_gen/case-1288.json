{
    "case_id": "case-1288",
    "repo_name": "lra/mackup",
    "file_path": "mackup/application.py",
    "code_snippet": "\n\n    def restore(self):\n\n        \"\"\"\n\n        Restore the application config files.\n\n\n\n        Algorithm:\n\n            if exists mackup/file\n\n              if exists home/file\n\n                are you sure?\n\n                if sure\n\n                  rm home/file\n\n                  link mackup/file home/file\n\n              else\n\n                link mackup/file home/file\n\n        \"\"\"\n\n        # For each file used by the application\n\n        for filename in self.files:\n\n            (home_filepath, mackup_filepath) = self.getFilepaths(filename)\n\n\n\n            # If the file exists and is not already pointing to the mackup file\n\n            # and the folder makes sense on the current platform (Don't sync\n\n            # any subfolder of ~/Library on GNU/Linux)\n\n            file_or_dir_exists = os.path.isfile(mackup_filepath) or os.path.isdir(\n\n                mackup_filepath\n\n            )\n\n            pointing_to_mackup = (\n\n                os.path.islink(home_filepath)\n\n                and os.path.exists(mackup_filepath)\n\n                and os.path.samefile(mackup_filepath, home_filepath)\n\n            )\n\n            supported = utils.can_file_be_synced_on_current_platform(filename)\n\n\n\n            if file_or_dir_exists and not pointing_to_mackup and supported:\n\n                if self.verbose:\n\n                    print(\n\n                        \"Restoring\\n  linking {}\\n  to      {} ...\".format(\n\n                            home_filepath, mackup_filepath\n\n                        )\n\n                    )\n\n                else:\n\n                    print(\"Restoring {} ...\".format(filename))\n\n\n\n                if self.dry_run:\n\n                    continue\n\n\n\n                # Check if there is already a file in the home folder\n\n                if os.path.exists(home_filepath):\n\n                    # Name it right\n\n                    if os.path.isfile(home_filepath):\n\n                        file_type = \"file\"\n\n                    elif os.path.isdir(home_filepath):\n\n                        file_type = \"folder\"\n\n                    elif os.path.islink(home_filepath):\n\n                        file_type = \"link\"\n\n                    else:\n\n                        raise ValueError(\"Unsupported file: {}\".format(mackup_filepath))\n\n\n\n                    if utils.confirm(\n\n                        \"You already have a {} named {} in your\"\n\n                        \" home.\\nDo you want to replace it with\"\n\n                        \" your backup?\".format(file_type, filename)\n\n                    ):\n\n                        utils.delete(home_filepath)\n\n                        utils.link(mackup_filepath, home_filepath)\n\n                else:\n\n                    utils.link(mackup_filepath, home_filepath)\n\n            elif self.verbose:\n\n                if os.path.exists(home_filepath):\n\n                    print(\n\n                        \"Doing nothing\\n  {}\\n  already linked by\\n  {}\".format(\n\n                            mackup_filepath, home_filepath\n\n                        )\n\n                    )\n\n                elif os.path.islink(home_filepath):\n\n                    print(\n\n                        \"Doing nothing\\n  {}\\n  \"\n\n                        \"is a broken link, you might want to fix it.\".format(\n\n                            home_filepath\n\n                        )\n\n                    )\n\n                else:\n\n                    print(\n\n                        \"Doing nothing\\n  {}\\n  does not exist\".format(mackup_filepath)\n\n                    )\n",
    "line_range": [
        136,
        220
    ],
    "command_specific_fields": {
        "method_name": "restore"
    },
    "language": "python",
    "commit": "0def08b8543ac3a436257cce4426a5b109b31a2d",
    "prompt": ""
}