{
    "case_id": "case-1618",
    "repo_name": "cool-RR/PySnooper",
    "file_path": "pysnooper/tracer.py",
    "code_snippet": "        if not self._is_internal_frame(calling_frame):\n            calling_frame.f_trace = self.trace\n            self.target_frames.add(calling_frame)\n\n        stack = self.thread_local.__dict__.setdefault(\n            'original_trace_functions', []\n        )\n        stack.append(sys.gettrace())\n        self.start_times[calling_frame] = datetime_module.datetime.now()\n        sys.settrace(self.trace)\n\n    def __exit__(self, exc_type, exc_value, exc_traceback):\n        if DISABLED:\n            return\n        stack = self.thread_local.original_trace_functions\n        sys.settrace(stack.pop())\n        calling_frame = inspect.currentframe().f_back\n        self.target_frames.discard(calling_frame)\n        self.frame_to_local_reprs.pop(calling_frame, None)\n\n        ### Writing elapsed time: #############################################\n        #                                                                     #\n        _FOREGROUND_YELLOW = self._FOREGROUND_YELLOW\n        _STYLE_DIM = self._STYLE_DIM\n        _STYLE_NORMAL = self._STYLE_NORMAL\n        _STYLE_RESET_ALL = self._STYLE_RESET_ALL\n\n",
    "line_range": [
        354,
        380
    ],
    "command_specific_fields": {
        "method_name": "__exit__"
    },
    "language": "python",
    "commit": "f2c60de87f318a9c6b6c8b6887fe31bd07f91fb9",
    "prompt": ""
}