{
    "case_id": "case-517",
    "repo_name": "kelektiv/node-cron",
    "file_path": "src/time.ts",
    "code_snippet": "\t\t\treturn {\n\t\t\t\tvalid: false,\n\t\t\t\terror\n\t\t\t};\n\t\t}\n\t}\n\n\tprivate _getWeekDay(date: DateTime) {\n\t\treturn date.weekday === 7 ? 0 : date.weekday;\n\t}\n\n\t/**\n\t * Calculate the \"next\" scheduled time\n\t */\n\tsendAt(): DateTime;\n\tsendAt(i: number): DateTime[];\n\tsendAt(i?: number): DateTime | DateTime[] {\n\t\tlet date =\n\t\t\tthis.realDate && this.source instanceof DateTime\n\t\t\t\t? this.source\n\t\t\t\t: DateTime.local();\n\t\tif (this.timeZone) {\n\t\t\tdate = date.setZone(this.timeZone);\n\t\t}\n\n\t\tif (this.utcOffset !== undefined) {\n\t\t\tconst sign = this.utcOffset < 0 ? '-' : '+';\n\n\t\t\tconst offsetHours = Math.trunc(this.utcOffset / 60);\n\t\t\tconst offsetHoursStr = String(Math.abs(offsetHours)).padStart(2, '0');\n\n\t\t\tconst offsetMins = Math.abs(this.utcOffset - offsetHours * 60);\n\t\t\tconst offsetMinsStr = String(offsetMins).padStart(2, '0');\n\n\t\t\tconst utcZone = `UTC${sign}${offsetHoursStr}:${offsetMinsStr}`;\n\n\t\t\tdate = date.setZone(utcZone);\n\n\t\t\tif (!date.isValid) {\n\t\t\t\tthrow new CronError('ERROR: You specified an invalid UTC offset.');\n\t\t\t}\n\t\t}\n\n",
    "line_range": [
        88,
        130
    ],
    "command_specific_fields": {
        "method_name": "_verifyParse"
    },
    "language": "typescript",
    "commit": "1eb978b8cddf8a2f2bead841adcad408238333c6",
    "prompt": ""
}