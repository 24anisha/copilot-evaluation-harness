{
    "case_id": "case-517",
    "repo_name": "kelektiv/node-cron",
    "file_path": "src/time.ts",
    "code_snippet": "{\n\t\tconst months = getRecordKeys(this.month);\n\t\tconst daysOfMonth = getRecordKeys(this.dayOfMonth);\n\n\t\tlet isOk = false;\n\n\t\t/**\n\t\t * if a dayOfMonth is not found in all months, we only need to fix the last\n\t\t * wrong month to prevent infinite loop\n\t\t */\n\t\tlet lastWrongMonth: MonthRange | null = null;\n\t\tfor (const m of months) {\n\t\t\tconst con = MONTH_CONSTRAINTS[m];\n\n\t\t\tfor (const day of daysOfMonth) {\n\t\t\t\tif (day <= con) {\n\t\t\t\t\tisOk = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!isOk) {\n\t\t\t\t// save the month in order to be fixed if all months fails (infinite loop)\n\t\t\t\tlastWrongMonth = m;\n\t\t\t\tconsole.warn(`Month '${m}' is limited to '${con}' days.`);\n\t\t\t}\n\t\t}\n\n\t\t// infinite loop detected (dayOfMonth is not found in all months)\n\t\t// eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n\t\tif (!isOk && lastWrongMonth !== null) {\n\t\t\tconst notOkCon = MONTH_CONSTRAINTS[lastWrongMonth];\n\t\t\tfor (const notOkDay of daysOfMonth) {\n\t\t\t\tif (notOkDay > notOkCon) {\n\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n\t\t\t\t\tdelete this.dayOfMonth[notOkDay];\n\t\t\t\t\tconst fixedDay = (notOkDay % notOkCon) as DayOfMonthRange;\n\t\t\t\t\tthis.dayOfMonth[fixedDay] = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}",
    "line_range": [
        88,
        130
    ],
    "command_specific_fields": {
        "method_name": "_verifyParse"
    },
    "language": "typescript",
    "commit": "1eb978b8cddf8a2f2bead841adcad408238333c6",
    "prompt": ""
}