{
    "case_id": "case-666",
    "repo_name": "pallets/flask",
    "file_path": "src/flask/app.py",
    "code_snippet": "        return response\n\n\n\n    def do_teardown_request(\n\n        self,\n\n        exc: BaseException | None = _sentinel,  # type: ignore[assignment]\n\n    ) -> None:\n\n        \"\"\"Called after the request is dispatched and the response is\n\n        returned, right before the request context is popped.\n\n\n\n        This calls all functions decorated with\n\n        :meth:`teardown_request`, and :meth:`Blueprint.teardown_request`\n\n        if a blueprint handled the request. Finally, the\n\n        :data:`request_tearing_down` signal is sent.\n\n\n\n        This is called by\n\n        :meth:`RequestContext.pop() <flask.ctx.RequestContext.pop>`,\n\n        which may be delayed during testing to maintain access to\n\n        resources.\n\n\n\n        :param exc: An unhandled exception raised while dispatching the\n\n            request. Detected from the current exception information if\n\n            not passed. Passed to each teardown function.\n\n\n\n        .. versionchanged:: 0.9\n\n            Added the ``exc`` argument.\n\n        \"\"\"\n\n        if exc is _sentinel:\n\n            exc = sys.exc_info()[1]\n\n\n\n        for name in chain(request.blueprints, (None,)):\n\n            if name in self.teardown_request_funcs:\n\n                for func in reversed(self.teardown_request_funcs[name]):\n\n                    self.ensure_sync(func)(exc)\n\n\n\n        request_tearing_down.send(self, _async_wrapper=self.ensure_sync, exc=exc)\n",
    "line_range": [
        1303,
        1337
    ],
    "command_specific_fields": {
        "method_name": "do_teardown_request"
    },
    "language": "python",
    "commit": "a8956feba1e40105e7bc78fa62ce36c58d1c91e1",
    "prompt": ""
}