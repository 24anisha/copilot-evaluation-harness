{
    "case_id": "case-820",
    "repo_name": "benjaminp/six",
    "file_path": "six.py",
    "code_snippet": "                                 assigned=assigned, updated=updated)\n    wraps.__doc__ = functools.wraps.__doc__\n\nelse:\n    wraps = functools.wraps\n\n\ndef with_metaclass(meta, *bases):\n    \"\"\"Create a base class with a metaclass.\"\"\"\n    # This requires a bit of explanation: the basic idea is to make a dummy\n    # metaclass for one level of class instantiation that replaces itself with\n    # the actual metaclass.\n    class metaclass(type):\n\n        def __new__(cls, name, this_bases, d):\n            if sys.version_info[:2] >= (3, 7):\n                # This version introduced PEP 560 that requires a bit\n                # of extra care (we mimic what is done by __build_class__).\n                resolved_bases = types.resolve_bases(bases)\n                if resolved_bases is not bases:\n                    d['__orig_bases__'] = bases\n            else:\n                resolved_bases = bases\n            return meta(name, resolved_bases, d)\n",
    "line_range": [
        854,
        877
    ],
    "command_specific_fields": {
        "method_name": "with_metaclass"
    },
    "language": "python",
    "commit": "c1b416f24de52ebd8eaed3e379ab85ec9c3e935b",
    "prompt": ""
}