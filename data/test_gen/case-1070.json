{
    "case_id": "case-1070",
    "repo_name": "pallets/click",
    "file_path": "src/click/core.py",
    "code_snippet": "    ) -> t.Callable[[t.Callable[..., t.Any]], Command]: ...\n\n\n\n    def command(\n\n        self, *args: t.Any, **kwargs: t.Any\n\n    ) -> t.Callable[[t.Callable[..., t.Any]], Command] | Command:\n\n        \"\"\"A shortcut decorator for declaring and attaching a command to\n\n        the group. This takes the same arguments as :func:`command` and\n\n        immediately registers the created command with this group by\n\n        calling :meth:`add_command`.\n\n\n\n        To customize the command class used, set the\n\n        :attr:`command_class` attribute.\n\n\n\n        .. versionchanged:: 8.1\n\n            This decorator can be applied without parentheses.\n\n\n\n        .. versionchanged:: 8.0\n\n            Added the :attr:`command_class` attribute.\n\n        \"\"\"\n\n        from .decorators import command\n\n\n\n        func: t.Callable[..., t.Any] | None = None\n\n\n\n        if args and callable(args[0]):\n\n            assert (\n\n                len(args) == 1 and not kwargs\n\n            ), \"Use 'command(**kwargs)(callable)' to provide arguments.\"\n\n            (func,) = args\n\n            args = ()\n\n\n\n        if self.command_class and kwargs.get(\"cls\") is None:\n\n            kwargs[\"cls\"] = self.command_class\n\n\n\n        def decorator(f: t.Callable[..., t.Any]) -> Command:\n\n            cmd: Command = command(*args, **kwargs)(f)\n\n            self.add_command(cmd)\n\n            return cmd\n\n\n\n        if func is not None:\n\n            return decorator(func)\n\n\n\n        return decorator\n",
    "line_range": [
        1538,
        1579
    ],
    "command_specific_fields": {
        "method_name": "command"
    },
    "language": "python",
    "commit": "14f735cf59618941cf2930e633eb77651b1dc7cb",
    "prompt": ""
}