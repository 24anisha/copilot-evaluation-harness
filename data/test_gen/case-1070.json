{
    "case_id": "case-1070",
    "repo_name": "pallets/click",
    "file_path": "src/click/core.py",
    "code_snippet": "        # overridden with the :func:`result_callback` decorator.\n        self._result_callback = result_callback\n\n        if self.chain:\n            for param in self.params:\n                if isinstance(param, Argument) and not param.required:\n                    raise RuntimeError(\n                        \"A group in chain mode cannot have optional arguments.\"\n                    )\n\n    def to_info_dict(self, ctx: Context) -> dict[str, t.Any]:\n        info_dict = super().to_info_dict(ctx)\n        commands = {}\n\n        for name in self.list_commands(ctx):\n            command = self.get_command(ctx, name)\n\n            if command is None:\n                continue\n\n            sub_ctx = ctx._make_sub_context(command)\n\n            with sub_ctx.scope(cleanup=False):\n                commands[name] = command.to_info_dict(sub_ctx)\n\n        info_dict.update(commands=commands, chain=self.chain)\n        return info_dict\n\n    def add_command(self, cmd: Command, name: str | None = None) -> None:\n        \"\"\"Registers another :class:`Command` with this group.  If the name\n        is not provided, the name of the command is used.\n        \"\"\"\n        name = name or cmd.name\n        if name is None:\n            raise TypeError(\"Command has no name.\")\n        _check_nested_chain(self, name, cmd, register=True)\n        self.commands[name] = cmd\n\n    @t.overload\n    def command(self, __func: t.Callable[..., t.Any]) -> Command: ...\n\n    @t.overload\n",
    "line_range": [
        1538,
        1579
    ],
    "command_specific_fields": {
        "method_name": "command"
    },
    "language": "python",
    "commit": "14f735cf59618941cf2930e633eb77651b1dc7cb",
    "prompt": ""
}