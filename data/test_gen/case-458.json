{
    "case_id": "case-458",
    "repo_name": "nexe/nexe",
    "file_path": "src/compiler.ts",
    "code_snippet": "\n  constructor(public options: NexeOptions) {\n    const { python } = (this.options = options)\n    //SOMEDAY iterate over multiple targets with `--outDir`\n    this.targets = options.targets as NexeTarget[]\n    this.target = this.targets[0]\n    if (!/https?\\:\\/\\//.test(options.remote)) {\n      throw new NexeError(`Invalid remote URI scheme (must be http or https): ${options.remote}`)\n    }\n    this.remoteAsset = options.remote + this.target.toString()\n    this.src = join(this.options.temp, this.target.version)\n    this.configureScript = configure + (semverGt(this.target.version, '10.10.0') ? '.py' : '')\n    this.nodeSrcBinPath = isWindows\n      ? join(this.src, 'Release', 'node.exe')\n      : join(this.src, 'out', 'Release', 'node')\n    this.log.step('nexe ' + version, 'info')\n    this.bundle = new Bundle(options)\n    if (isWindows) {\n      const originalPath = process.env.PATH\n      delete process.env.PATH\n      this.env = { ...process.env }\n      this.env.PATH = python\n        ? (this.env.PATH = dequote(normalize(python)) + delimiter + originalPath)\n        : originalPath\n      process.env.PATH = originalPath\n    } else {\n      this.env = { ...process.env }\n      python && (this.env.PYTHON = python)\n    }\n  }\n",
    "line_range": [
        108,
        138
    ],
    "command_specific_fields": {
        "method_name": "constructor"
    },
    "language": "typescript",
    "commit": "5219a2ac74f97e644127ea37f000daa4b39da538",
    "prompt": ""
}