{
    "case_id": "case-329",
    "repo_name": "dthree/cash",
    "file_path": "src/commands/cat.js",
    "code_snippet": "\n\n  exec(args, options) {\n\n    const self = this;\n\n\n\n    // Input normalization\n\n    if (args === undefined) {\n\n      args = {\n\n        files: []\n\n      };\n\n    } else if (typeof args === 'string' || args instanceof String) {\n\n      args = {\n\n        files: [args]\n\n      };\n\n    } else if (Array.isArray(args)) {\n\n      args = {\n\n        files: args\n\n      };\n\n    }\n\n\n\n    options = options || {};\n\n\n\n    // -A handler\n\n    if (options.showall) {\n\n      options.shownonprinting = true;\n\n      options.showends = true;\n\n      options.showtabs = true;\n\n    }\n\n\n\n    // -e handler\n\n    if (options.e) {\n\n      options.shownonprinting = true;\n\n      options.showends = true;\n\n    }\n\n\n\n    // -t handler\n\n    if (options.t) {\n\n      options.shownonprinting = true;\n\n      options.showtabs = true;\n\n    }\n\n\n\n    let stdout = '';\n\n    try {\n\n      const stdin = fetch(args.files, args.stdin, {\n\n        onDirectory(name) {\n\n          return `cat: ${name}: Is a directory`;\n\n        },\n\n        onInvalidFile(name) {\n\n          return `cat: ${name}: No such file or directory`;\n\n        }\n\n      });\n\n      let ctr = 0;\n\n      for (let i = 0; i < stdin.length; ++i) {\n\n        // If -s, squeeze double blank lines to a\n\n        // single line.\n\n        if (options.squeezeblank) {\n\n          stdin[i] = stdin[i].replace(/\\n\\n\\s*\\n/g, '\\n\\n');\n\n        }\n\n        if (options.showtabs) {\n\n          stdin[i] = stdin[i].replace(/\\t/g, '^I');\n\n        }\n\n        // Get rid of trailing line break because\n\n        // node logging does it anyway.\n\n        stdin[i] = stdin[i].replace(/\\s$/, '');\n\n        const parts = String(stdin[i]).split('\\n');\n\n        for (let j = 0; j < parts.length; ++j) {\n\n          const blank = ((strip(parts[j])).trim() === '');\n\n          // If -b, number every non-blank line\n\n          // If -n, number every line\n\n          const numbered = ((!blank && options.numbernonblank) || (options.number && !options.numbernonblank));\n\n          if (numbered) {\n\n            ctr++;\n\n          }\n\n          const numStr = (numbered) ?\n\n              `${lpad(String(ctr), 6, ' ')}  ` :\n\n              '';\n\n          // If -E, append a $ to each line end.\n\n          const dollarStr = (options.showends) ? '$' : '';\n\n          const line =\n\n              numStr +\n\n              parts[j] +\n\n              dollarStr;\n\n          stdout += `${line}\\n`;\n\n        }\n\n      }\n\n\n\n      if (stdout.length > 0) {\n\n        self.log(stdout.slice(0, stdout.length - 1));\n\n      }\n\n\n\n      return 0;\n\n    } catch (e) {\n\n      /* istanbul ignore next */\n\n      self.log(e.stack);\n\n      /* istanbul ignore next */\n\n      return 1;\n\n    }\n\n  }\n",
    "line_range": [
        11,
        108
    ],
    "command_specific_fields": {
        "method_name": "exec"
    },
    "language": "javascript",
    "commit": "3e28dae8bdb71215d5034df9003f3ef2804c2754",
    "prompt": ""
}