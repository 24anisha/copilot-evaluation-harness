{
    "case_id": "case-591",
    "repo_name": "kelektiv/node-cron",
    "file_path": "src/time.ts",
    "code_snippet": "\t\tutcOffset?: CronJobParams['utcOffset']\n\n\t);\n\n\tconstructor(\n\n\t\tsource: CronJobParams['cronTime'],\n\n\t\ttimeZone?: CronJobParams['timeZone'],\n\n\t\tutcOffset?: CronJobParams['utcOffset']\n\n\t) {\n\n\t\t// runtime check for JS users\n\n\t\tif (timeZone != null && utcOffset != null) {\n\n\t\t\tthrow new ExclusiveParametersError('timeZone', 'utcOffset');\n\n\t\t}\n\n\n\n\t\tif (timeZone) {\n\n\t\t\tconst dt = DateTime.fromObject({}, { zone: timeZone });\n\n\t\t\tif (!dt.isValid) {\n\n\t\t\t\tthrow new CronError('Invalid timezone.');\n\n\t\t\t}\n\n\n\n\t\t\tthis.timeZone = timeZone;\n\n\t\t}\n\n\n\n\t\tif (utcOffset != null) {\n\n\t\t\tthis.utcOffset = utcOffset;\n\n\t\t}\n\n\n\n\t\tif (source instanceof Date || source instanceof DateTime) {\n\n\t\t\tthis.source =\n\n\t\t\t\tsource instanceof Date ? DateTime.fromJSDate(source) : source;\n\n\t\t\tthis.realDate = true;\n\n\t\t} else {\n\n\t\t\tthis.source = source;\n\n\t\t\tthis._parse(this.source);\n\n\t\t\tthis._verifyParse();\n\n\t\t}\n\n\t}\n",
    "line_range": [
        47,
        81
    ],
    "command_specific_fields": {
        "method_name": "constructor"
    },
    "language": "typescript",
    "commit": "1eb978b8cddf8a2f2bead841adcad408238333c6",
    "prompt": ""
}