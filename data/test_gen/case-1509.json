{
    "case_id": "case-1509",
    "repo_name": "boto/s3transfer",
    "file_path": "s3transfer/copies.py",
    "code_snippet": "    ]\n\n    def _submit(\n        self, client, config, osutil, request_executor, transfer_future\n    ):\n        \"\"\"\n        :param client: The client associated with the transfer manager\n\n        :type config: s3transfer.manager.TransferConfig\n        :param config: The transfer config associated with the transfer\n            manager\n\n        :type osutil: s3transfer.utils.OSUtil\n        :param osutil: The os utility associated to the transfer manager\n\n        :type request_executor: s3transfer.futures.BoundedExecutor\n        :param request_executor: The request executor associated with the\n            transfer manager\n\n        :type transfer_future: s3transfer.futures.TransferFuture\n        :param transfer_future: The transfer future associated with the\n            transfer request that tasks are being submitted for\n        \"\"\"\n        # Determine the size if it was not provided\n        if transfer_future.meta.size is None:\n            # If a size was not provided figure out the size for the\n            # user. Note that we will only use the client provided to\n            # the TransferManager. If the object is outside of the region\n            # of the client, they may have to provide the file size themselves\n            # with a completely new client.\n            call_args = transfer_future.meta.call_args\n            head_object_request = (\n                self._get_head_object_request_from_copy_source(\n                    call_args.copy_source\n                )\n            )\n            extra_args = call_args.extra_args\n\n            # Map any values that may be used in the head object that is\n            # used in the copy object\n            for param, value in extra_args.items():\n                if param in self.EXTRA_ARGS_TO_HEAD_ARGS_MAPPING:\n                    head_object_request[\n                        self.EXTRA_ARGS_TO_HEAD_ARGS_MAPPING[param]\n                    ] = value\n\n            response = call_args.source_client.head_object(\n                **head_object_request\n            )\n            transfer_future.meta.provide_transfer_size(\n                response['ContentLength']\n            )\n\n        # If it is greater than threshold do a multipart copy, otherwise\n        # do a regular copy object.\n        if transfer_future.meta.size < config.multipart_threshold:\n            self._submit_copy_request(\n                client, config, osutil, request_executor, transfer_future\n            )\n        else:\n            self._submit_multipart_request(\n                client, config, osutil, request_executor, transfer_future\n            )\n",
    "line_range": [
        78,
        140
    ],
    "command_specific_fields": {
        "method_name": "_submit"
    },
    "language": "python",
    "commit": "da68b50bb5a6b0c342ad0d87f9b1f80ab81dffce",
    "prompt": ""
}