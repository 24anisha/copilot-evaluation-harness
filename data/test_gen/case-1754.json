{
    "case_id": "case-1754",
    "repo_name": "magic-wormhole/magic-wormhole",
    "file_path": "src/wormhole/_key.py",
    "code_snippet": "\n\n    @m.output()\n\n    def compute_key(self, msg2):\n\n        assert isinstance(msg2, type(b\"\"))\n\n        with self._timing.add(\"pake2\", waiting=\"crypto\"):\n\n            key = self._sp.finish(msg2)\n\n        # TODO: make B.got_key() an eventual send, since it will fire the\n\n        # user/application-layer get_unverified_key() Deferred, and if that\n\n        # calls back into other wormhole APIs, bad things will happen\n\n        self._B.got_key(key)\n\n        phase = \"version\"\n\n        data_key = derive_phase_key(key, self._side, phase)\n\n        plaintext = dict_to_bytes(self._versions)\n\n        encrypted = encrypt_data(data_key, plaintext)\n\n        self._M.add_message(phase, encrypted)\n\n        # TODO: R.got_key() needs to be eventual-send too, as it can trigger\n\n        # app-level got_verifier() and got_message() Deferreds.\n\n        self._R.got_key(key)\n",
    "line_range": [
        194,
        212
    ],
    "command_specific_fields": {
        "method_name": "compute_key"
    },
    "language": "python",
    "commit": "bff2f6c71121fc054258b9fb515dbaca1f4de646",
    "prompt": ""
}