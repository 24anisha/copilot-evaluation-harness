{
    "case_id": "case-261",
    "repo_name": "nock/nock",
    "file_path": "lib/intercepted_request_router.js",
    "code_snippet": "  // However, actually implementation checks the state of finished and aborted before checking if the first arg is empty.\n\n  handleWrite(...args) {\n\n    debug('request write')\n\n\n\n    let [buffer, encoding] = args\n\n\n\n    const { req } = this\n\n\n\n    if (req.finished) {\n\n      const err = new Error('write after end')\n\n      err.code = 'ERR_STREAM_WRITE_AFTER_END'\n\n      process.nextTick(() => req.emit('error', err))\n\n\n\n      // It seems odd to return `true` here, not sure why you'd want to have\n\n      // the stream potentially written to more, but it's what Node does.\n\n      // https://github.com/nodejs/node/blob/a9270dcbeba4316b1e179b77ecb6c46af5aa8c20/lib/_http_outgoing.js#L662-L665\n\n      return true\n\n    }\n\n\n\n    if (req.socket && req.socket.destroyed) {\n\n      return false\n\n    }\n\n\n\n    if (!buffer) {\n\n      return true\n\n    }\n\n\n\n    if (!Buffer.isBuffer(buffer)) {\n\n      buffer = Buffer.from(buffer, encoding)\n\n    }\n\n    this.requestBodyBuffers.push(buffer)\n\n\n\n    // writable.write encoding param is optional\n\n    // so if callback is present it's the last argument\n\n    const callback = args.length > 1 ? args[args.length - 1] : undefined\n\n    // can't use instanceof Function because some test runners\n\n    // run tests in vm.runInNewContext where Function is not same\n\n    // as that in the current context\n\n    // https://github.com/nock/nock/pull/1754#issuecomment-571531407\n\n    if (typeof callback === 'function') {\n\n      callback()\n\n    }\n\n\n\n    common.setImmediate(function () {\n\n      req.emit('drain')\n\n    })\n\n\n\n    return false\n\n  }\n",
    "line_range": [
        144,
        193
    ],
    "command_specific_fields": {
        "method_name": "handleWrite"
    },
    "language": "javascript",
    "commit": "2b7836d36c4f22f449b36ad9fd1fff2d14e9200d",
    "prompt": ""
}