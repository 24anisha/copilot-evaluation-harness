{
    "case_id": "case-1558",
    "repo_name": "dbader/schedule",
    "file_path": "schedule/__init__.py",
    "code_snippet": "        return datetime.datetime.now() >= self.next_run\n\n    def run(self):\n        \"\"\"\n        Run the job and immediately reschedule it.\n        If the job's deadline is reached (configured using .until()), the job is not\n        run and CancelJob is returned immediately. If the next scheduled run exceeds\n        the job's deadline, CancelJob is returned after the execution. In this latter\n        case CancelJob takes priority over any other returned value.\n\n        :return: The return value returned by the `job_func`, or CancelJob if the job's\n                 deadline is reached.\n\n        \"\"\"\n        if self._is_overdue(datetime.datetime.now()):\n            logger.debug(\"Cancelling job %s\", self)\n            return CancelJob\n\n        logger.debug(\"Running job %s\", self)\n        ret = self.job_func()\n        self.last_run = datetime.datetime.now()\n        self._schedule_next_run()\n\n        if self._is_overdue(self.next_run):\n            logger.debug(\"Cancelling job %s\", self)\n            return CancelJob\n        return ret\n",
    "line_range": [
        672,
        698
    ],
    "command_specific_fields": {
        "method_name": "run"
    },
    "language": "python",
    "commit": "82a43db1b938d8fdf60103bd41f329e06c8d3651",
    "prompt": ""
}