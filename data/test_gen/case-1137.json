{
    "case_id": "case-1137",
    "repo_name": "darknessomi/musicbox",
    "file_path": "NEMbox/ui.py",
    "code_snippet": "\n\n    def update_lyrics(self, now_playing, lyrics, tlyrics):\n\n\n\n        timestap_regex = r\"[0-5][0-9]:[0-5][0-9]\\.[0-9]*\"\n\n\n\n        def get_timestap(lyric_line):\n\n            match_ret = re.match(r\"\\[(\" + timestap_regex + r\")\\]\", lyric_line)\n\n            if match_ret:\n\n                return match_ret.group(1)\n\n            else:\n\n                return \"\"\n\n\n\n        def get_lyric_time(lyric_line):\n\n            lyric_timestap = get_timestap(lyric_line)\n\n            if lyric_timestap == \"\":\n\n                return datetime.timedelta(seconds=now_playing)\n\n            else:\n\n                return (\n\n                    datetime.datetime.strptime(get_timestap(lyric_line), \"%M:%S.%f\")\n\n                    - datetime.datetime.strptime(\"00:00\", \"%M:%S\")\n\n                    - lyric_time_offset\n\n                )\n\n\n\n        def strip_timestap(lyric_line):\n\n            return re.sub(r\"\\[\" + timestap_regex + r\"\\]\", r\"\", lyric_line)\n\n\n\n        def append_translation(translated_lyric, origin_lyric):\n\n            translated_lyric = strip_timestap(translated_lyric)\n\n            origin_lyric = strip_timestap(origin_lyric)\n\n            if translated_lyric == \"\" or origin_lyric == \"\":\n\n                return translated_lyric + origin_lyric\n\n            return translated_lyric + \" || \" + origin_lyric\n\n\n\n        if (\n\n            tlyrics and self.now_tlyric_index >= len(tlyrics) - 1\n\n        ) or self.now_lyric_index >= len(lyrics) - 1:\n\n            self.post_lyric = \"\"\n\n            return\n\n\n\n        lyric_time_offset = datetime.timedelta(seconds=0.5)\n\n        next_lyric_time = get_lyric_time(lyrics[self.now_lyric_index + 1])\n\n        # now_lyric_time = get_lyric_time(lyrics[self.now_lyric_index])\n\n        now_time = datetime.timedelta(seconds=now_playing)\n\n        while now_time >= next_lyric_time and self.now_lyric_index < len(lyrics) - 2:\n\n            self.now_lyric_index = self.now_lyric_index + 1\n\n            next_lyric_time = get_lyric_time(lyrics[self.now_lyric_index + 1])\n\n\n\n        if tlyrics:\n\n            next_tlyric_time = get_lyric_time(tlyrics[self.now_tlyric_index + 1])\n\n            while (\n\n                now_time >= next_tlyric_time\n\n                and self.now_tlyric_index < len(tlyrics) - 2\n\n            ):\n\n                self.now_tlyric_index = self.now_tlyric_index + 1\n\n                next_tlyric_time = get_lyric_time(tlyrics[self.now_tlyric_index + 1])\n\n\n\n        if tlyrics:\n\n            self.now_lyric = append_translation(\n\n                tlyrics[self.now_tlyric_index], lyrics[self.now_lyric_index]\n\n            )\n\n            if (\n\n                self.now_tlyric_index < len(tlyrics) - 1\n\n                and self.now_lyric_index < len(lyrics) - 1\n\n            ):\n\n                self.post_lyric = append_translation(\n\n                    tlyrics[self.now_tlyric_index + 1], lyrics[self.now_lyric_index + 1]\n\n                )\n\n            else:\n\n                self.post_lyric = \"\"\n\n        else:\n\n            self.now_lyric = strip_timestap(lyrics[self.now_lyric_index])\n\n            if self.now_lyric_index < len(lyrics) - 1:\n\n                self.post_lyric = strip_timestap(lyrics[self.now_lyric_index + 1])\n\n            else:\n\n                self.post_lyric = \"\"\n",
    "line_range": [
        187,
        262
    ],
    "command_specific_fields": {
        "method_name": "update_lyrics"
    },
    "language": "python",
    "commit": "592e13d1b948201447d008f4f3e249d347f47f21",
    "prompt": ""
}