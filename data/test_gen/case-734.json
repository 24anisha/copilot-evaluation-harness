{
    "case_id": "case-734",
    "repo_name": "httpie/cli",
    "file_path": "httpie/manager/tasks/plugins.py",
    "code_snippet": "            self._clear_metadata(installation_line.split()[2:])\n\n    def _uninstall(self, target: str) -> Optional[ExitStatus]:\n        try:\n            distribution = importlib_metadata.distribution(target)\n        except importlib_metadata.PackageNotFoundError:\n            return self.fail('uninstall', target, 'package is not installed')\n\n        base_dir = Path(distribution.locate_file('.')).resolve()\n        if self.dir not in base_dir.parents:\n            # If the package is installed somewhere else (e.g on the site packages\n            # of the real python interpreter), than that means this package is not\n            # installed through us.\n            return self.fail('uninstall', target,\n                             'package is not installed through httpie plugins'\n                             ' interface')\n\n        files = distribution.files\n        if files is None:\n            return self.fail('uninstall', target, 'couldn\\'t locate the package')\n\n        # TODO: Consider handling failures here (e.g if it fails,\n        # just revert the operation and leave the site-packages\n        # in a proper shape).\n        for file in files:\n            with suppress(FileNotFoundError):\n                os.unlink(distribution.locate_file(file))\n\n        metadata_path = getattr(distribution, '_path', None)\n        if (\n            metadata_path\n            and metadata_path.exists()\n            and not any(metadata_path.iterdir())\n        ):\n            metadata_path.rmdir()\n\n        self.env.stdout.write(f'Successfully uninstalled {target}\\n')\n",
    "line_range": [
        146,
        182
    ],
    "command_specific_fields": {
        "method_name": "_uninstall"
    },
    "language": "python",
    "commit": "f4cf43ecdd6c5c52b5c4ba91086d5c6ccfebcd6d",
    "prompt": ""
}