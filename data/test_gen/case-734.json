{
    "case_id": "case-734",
    "repo_name": "httpie/cli",
    "file_path": "httpie/manager/tasks/plugins.py",
    "code_snippet": "\n\n    def _uninstall(self, target: str) -> Optional[ExitStatus]:\n\n        try:\n\n            distribution = importlib_metadata.distribution(target)\n\n        except importlib_metadata.PackageNotFoundError:\n\n            return self.fail('uninstall', target, 'package is not installed')\n\n\n\n        base_dir = Path(distribution.locate_file('.')).resolve()\n\n        if self.dir not in base_dir.parents:\n\n            # If the package is installed somewhere else (e.g on the site packages\n\n            # of the real python interpreter), than that means this package is not\n\n            # installed through us.\n\n            return self.fail('uninstall', target,\n\n                             'package is not installed through httpie plugins'\n\n                             ' interface')\n\n\n\n        files = distribution.files\n\n        if files is None:\n\n            return self.fail('uninstall', target, 'couldn\\'t locate the package')\n\n\n\n        # TODO: Consider handling failures here (e.g if it fails,\n\n        # just revert the operation and leave the site-packages\n\n        # in a proper shape).\n\n        for file in files:\n\n            with suppress(FileNotFoundError):\n\n                os.unlink(distribution.locate_file(file))\n\n\n\n        metadata_path = getattr(distribution, '_path', None)\n\n        if (\n\n            metadata_path\n\n            and metadata_path.exists()\n\n            and not any(metadata_path.iterdir())\n\n        ):\n\n            metadata_path.rmdir()\n\n\n\n        self.env.stdout.write(f'Successfully uninstalled {target}\\n')\n",
    "line_range": [
        146,
        182
    ],
    "command_specific_fields": {
        "method_name": "_uninstall"
    },
    "language": "python",
    "commit": "f4cf43ecdd6c5c52b5c4ba91086d5c6ccfebcd6d",
    "prompt": ""
}