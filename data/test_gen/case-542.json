{
    "case_id": "case-542",
    "repo_name": "kelektiv/node-cron",
    "file_path": "src/time.ts",
    "code_snippet": "\n\t\t\treturn date;\n\t\t}\n\n\t\tif (i === undefined || isNaN(i) || i < 0) {\n\t\t\t// just get the next scheduled time\n\t\t\treturn this.getNextDateFrom(date);\n\t\t} else {\n\t\t\t// return the next schedule times\n\t\t\tconst dates: DateTime[] = [];\n\t\t\tfor (; i > 0; i--) {\n\t\t\t\tdate = this.getNextDateFrom(date);\n\t\t\t\tdates.push(date);\n\t\t\t}\n\n\t\t\treturn dates;\n\t\t}\n\t}\n\n\t/**\n\t * Get the number of milliseconds in the future at which to fire our callbacks.\n\t */\n\tgetTimeout() {\n\t\treturn Math.max(-1, this.sendAt().toMillis() - DateTime.local().toMillis());\n\t}\n\n\t/**\n\t * writes out a cron string\n\t */\n\ttoString() {\n\t\treturn this.toJSON().join(' ');\n\t}\n\n\t/**\n\t * Json representation of the parsed cron syntax.\n\t */\n\ttoJSON() {\n\t\treturn TIME_UNITS.map(unit => {\n\t\t\treturn this._wcOrAll(unit);\n\t\t});\n\t}\n\n\t/**\n\t * Get next date matching the specified cron time.\n\t *\n\t * Algorithm:\n\t * - Start with a start date and a parsed crontime.\n\t * - Loop until 5 seconds have passed, or we found the next date.\n\t * - Within the loop:\n\t *   - If it took longer than 5 seconds to select a date, throw an exception.\n\t *   - Find the next month to run at.\n",
    "line_range": [
        135,
        185
    ],
    "command_specific_fields": {
        "method_name": "sendAt"
    },
    "language": "typescript",
    "commit": "1eb978b8cddf8a2f2bead841adcad408238333c6",
    "prompt": ""
}