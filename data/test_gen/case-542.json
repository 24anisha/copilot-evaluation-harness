{
    "case_id": "case-0",
    "repo_name": "kelektiv/node-cron",
    "file_path": "src/time.ts",
    "code_snippet": "{\n\t\tlet date =\n\t\t\tthis.realDate && this.source instanceof DateTime\n\t\t\t\t? this.source\n\t\t\t\t: DateTime.local();\n\t\tif (this.timeZone) {\n\t\t\tdate = date.setZone(this.timeZone);\n\t\t}\n\n\t\tif (this.utcOffset !== undefined) {\n\t\t\tconst sign = this.utcOffset < 0 ? '-' : '+';\n\n\t\t\tconst offsetHours = Math.trunc(this.utcOffset / 60);\n\t\t\tconst offsetHoursStr = String(Math.abs(offsetHours)).padStart(2, '0');\n\n\t\t\tconst offsetMins = Math.abs(this.utcOffset - offsetHours * 60);\n\t\t\tconst offsetMinsStr = String(offsetMins).padStart(2, '0');\n\n\t\t\tconst utcZone = `UTC${sign}${offsetHoursStr}:${offsetMinsStr}`;\n\n\t\t\tdate = date.setZone(utcZone);\n\n\t\t\tif (!date.isValid) {\n\t\t\t\tthrow new CronError('ERROR: You specified an invalid UTC offset.');\n\t\t\t}\n\t\t}\n\n\t\tif (this.realDate) {\n\t\t\tif (DateTime.local() > date) {\n\t\t\t\tthrow new CronError('WARNING: Date in past. Will never be fired.');\n\t\t\t}\n\n\t\t\treturn date;\n\t\t}\n\n\t\tif (i === undefined || isNaN(i) || i < 0) {\n\t\t\t// just get the next scheduled time\n\t\t\treturn this.getNextDateFrom(date);\n\t\t} else {\n\t\t\t// return the next schedule times\n\t\t\tconst dates: DateTime[] = [];\n\t\t\tfor (; i > 0; i--) {\n\t\t\t\tdate = this.getNextDateFrom(date);\n\t\t\t\tdates.push(date);\n\t\t\t}\n\n\t\t\treturn dates;\n\t\t}\n\t}",
    "line_range": [
        135,
        185
    ],
    "command_specific_fields": {
        "method_name": "sendAt"
    },
    "language": "typescript",
    "commit": "1eb978b8cddf8a2f2bead841adcad408238333c6",
    "prompt": ""
}