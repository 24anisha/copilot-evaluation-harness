{
    "case_id": "case-108",
    "repo_name": "winstonjs/winston",
    "file_path": "lib/winston/logger.js",
    "code_snippet": "   * @private\n\n   */\n\n  _transform(info, enc, callback) {\n\n    if (this.silent) {\n\n      return callback();\n\n    }\n\n\n\n    // [LEVEL] is only soft guaranteed to be set here since we are a proper\n\n    // stream. It is likely that `info` came in through `.log(info)` or\n\n    // `.info(info)`. If it is not defined, however, define it.\n\n    // This LEVEL symbol is provided by `triple-beam` and also used in:\n\n    // - logform\n\n    // - winston-transport\n\n    // - abstract-winston-transport\n\n    if (!info[LEVEL]) {\n\n      info[LEVEL] = info.level;\n\n    }\n\n\n\n    // Remark: really not sure what to do here, but this has been reported as\n\n    // very confusing by pre winston@2.0.0 users as quite confusing when using\n\n    // custom levels.\n\n    if (!this.levels[info[LEVEL]] && this.levels[info[LEVEL]] !== 0) {\n\n      // eslint-disable-next-line no-console\n\n      console.error('[winston] Unknown logger level: %s', info[LEVEL]);\n\n    }\n\n\n\n    // Remark: not sure if we should simply error here.\n\n    if (!this._readableState.pipes) {\n\n      // eslint-disable-next-line no-console\n\n      console.error(\n\n        '[winston] Attempt to write logs with no transports, which can increase memory usage: %j',\n\n        info\n\n      );\n\n    }\n\n\n\n    // Here we write to the `format` pipe-chain, which on `readable` above will\n\n    // push the formatted `info` Object onto the buffer for this instance. We trap\n\n    // (and re-throw) any errors generated by the user-provided format, but also\n\n    // guarantee that the streams callback is invoked so that we can continue flowing.\n\n    try {\n\n      this.push(this.format.transform(info, this.format.options));\n\n    } finally {\n\n      this._writableState.sync = false;\n\n      // eslint-disable-next-line callback-return\n\n      callback();\n\n    }\n\n  }\n",
    "line_range": [
        273,
        319
    ],
    "command_specific_fields": {
        "method_name": "_transform"
    },
    "language": "javascript",
    "commit": "17192754733c40d261d76b690d84d4d2608c05f1",
    "prompt": ""
}