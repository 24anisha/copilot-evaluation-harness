{
    "case_id": "case-583",
    "repo_name": "cheeriojs/cheerio",
    "file_path": "src/api/attributes.ts",
    "code_snippet": "): Cheerio<T>;\n\nexport function val<T extends AnyNode>(\n\n  this: Cheerio<T>,\n\n  value?: string | string[],\n\n): string | string[] | Cheerio<T> | undefined {\n\n  const querying = arguments.length === 0;\n\n  const element = this[0];\n\n\n\n  if (!element || !isTag(element)) return querying ? undefined : this;\n\n\n\n  switch (element.name) {\n\n    case 'textarea': {\n\n      return this.text(value as string);\n\n    }\n\n    case 'select': {\n\n      const option = this.find('option:selected');\n\n      if (!querying) {\n\n        if (this.attr('multiple') == null && typeof value === 'object') {\n\n          return this;\n\n        }\n\n\n\n        this.find('option').removeAttr('selected');\n\n\n\n        const values = typeof value === 'object' ? value : [value];\n\n        for (const val of values) {\n\n          this.find(`option[value=\"${val}\"]`).attr('selected', '');\n\n        }\n\n\n\n        return this;\n\n      }\n\n\n\n      return this.attr('multiple')\n\n        ? option.toArray().map((el) => text(el.children))\n\n        : option.attr('value');\n\n    }\n\n    case 'input':\n\n    case 'option': {\n\n      return querying\n\n        ? this.attr('value')\n\n        : this.attr('value', value as string);\n\n    }\n\n  }\n\n\n\n  return undefined;\n\n}\n",
    "line_range": [
        766,
        811
    ],
    "command_specific_fields": {
        "method_name": "val"
    },
    "language": "typescript",
    "commit": "da0b8840f42489030da52172f08d79d4509c999b",
    "prompt": ""
}