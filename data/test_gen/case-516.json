{
    "case_id": "case-516",
    "repo_name": "nexe/nexe",
    "file_path": "src/nexe.ts",
    "code_snippet": "import patches from './patches'\n\n\n\nasync function compile(\n\n  compilerOptions?: Partial<NexeOptions>,\n\n  callback?: (err: Error | null) => void\n\n) {\n\n  let error: Error | null = null,\n\n    options: NexeOptions | null = null,\n\n    compiler: NexeCompiler | null = null\n\n\n\n  try {\n\n    options = normalizeOptions(compilerOptions)\n\n    compiler = new NexeCompiler(options)\n\n    await compose(\n\n      clean,\n\n      resource,\n\n      cli,\n\n      bundle,\n\n      shim,\n\n      download,\n\n      options.build ? [artifacts, ...patches, ...(options.patches as NexePatch[])] : [],\n\n      options.plugins as NexePatch[]\n\n    )(compiler)\n\n  } catch (e: any) {\n\n    error = e\n\n  }\n\n\n\n  if (error) {\n\n    compiler && compiler.quit(error)\n\n    if (callback) return callback(error)\n\n    return Promise.reject(error)\n\n  }\n\n\n\n  if (callback) callback(null)\n\n}\n",
    "line_range": [
        12,
        46
    ],
    "command_specific_fields": {
        "method_name": "compile"
    },
    "language": "typescript",
    "commit": "5219a2ac74f97e644127ea37f000daa4b39da538",
    "prompt": ""
}