{
    "case_id": "case-13",
    "repo_name": "tj/commander.js",
    "file_path": "lib/suggestSimilar.js",
    "code_snippet": "\n\nfunction suggestSimilar(word, candidates) {\n\n  if (!candidates || candidates.length === 0) return '';\n\n  // remove possible duplicates\n\n  candidates = Array.from(new Set(candidates));\n\n\n\n  const searchingOptions = word.startsWith('--');\n\n  if (searchingOptions) {\n\n    word = word.slice(2);\n\n    candidates = candidates.map((candidate) => candidate.slice(2));\n\n  }\n\n\n\n  let similar = [];\n\n  let bestDistance = maxDistance;\n\n  const minSimilarity = 0.4;\n\n  candidates.forEach((candidate) => {\n\n    if (candidate.length <= 1) return; // no one character guesses\n\n\n\n    const distance = editDistance(word, candidate);\n\n    const length = Math.max(word.length, candidate.length);\n\n    const similarity = (length - distance) / length;\n\n    if (similarity > minSimilarity) {\n\n      if (distance < bestDistance) {\n\n        // better edit distance, throw away previous worse matches\n\n        bestDistance = distance;\n\n        similar = [candidate];\n\n      } else if (distance === bestDistance) {\n\n        similar.push(candidate);\n\n      }\n\n    }\n\n  });\n\n\n\n  similar.sort((a, b) => a.localeCompare(b));\n\n  if (searchingOptions) {\n\n    similar = similar.map((candidate) => `--${candidate}`);\n\n  }\n\n\n\n  if (similar.length > 1) {\n\n    return `\\n(Did you mean one of ${similar.join(', ')}?)`;\n\n  }\n\n  if (similar.length === 1) {\n\n    return `\\n(Did you mean ${similar[0]}?)`;\n\n  }\n\n  return '';\n\n}\n",
    "line_range": [
        54,
        99
    ],
    "command_specific_fields": {
        "method_name": "suggestSimilar"
    },
    "language": "javascript",
    "commit": "970ecae402b253de691e6a9066fea22f38fe7431",
    "prompt": ""
}