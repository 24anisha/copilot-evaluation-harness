{
    "case_id": "case-476",
    "repo_name": "peers/peerjs-server",
    "file_path": "__test__/services/webSocketServer/index.spec.ts",
    "code_snippet": "\n\nconst checkSequence = async (\n\n\tc: WebSocket,\n\n\tmsgs: { type: MessageType; error?: Errors }[],\n\n): Promise<boolean> => {\n\n\treturn new Promise((resolve) => {\n\n\t\tconst restMessages = [...msgs];\n\n\n\n\t\tconst finish = (success = false): void => {\n\n\t\t\tresolve(success);\n\n\t\t};\n\n\n\n\t\tc.onmessage = (event: object & { data?: string }): void => {\n\n\t\t\tconst [mes] = restMessages;\n\n\n\n\t\t\tif (!mes) {\n\n\t\t\t\treturn finish();\n\n\t\t\t}\n\n\n\n\t\t\trestMessages.shift();\n\n\n\n\t\t\tconst message = JSON.parse(event.data as string);\n\n\t\t\tif (message.type !== mes.type) {\n\n\t\t\t\treturn finish();\n\n\t\t\t}\n\n\n\n\t\t\tconst isOk = !mes.error || message.payload?.msg === mes.error;\n\n\n\n\t\t\tif (!isOk) {\n\n\t\t\t\treturn finish();\n\n\t\t\t}\n\n\n\n\t\t\tif (restMessages.length === 0) {\n\n\t\t\t\tfinish(true);\n\n\t\t\t}\n\n\t\t};\n\n\t});\n\n};\n",
    "line_range": [
        19,
        57
    ],
    "command_specific_fields": {
        "method_name": "checkSequence"
    },
    "language": "typescript",
    "commit": "aa4cdbac9cc28aac03c5054ef5b45e6fd6a1f5a3",
    "prompt": ""
}