{
    "case_id": "case-1717",
    "repo_name": "wkentaro/labelme",
    "file_path": "labelme/widgets/canvas.py",
    "code_snippet": "\n    _fill_drawing = False\n\n    def __init__(self, *args, **kwargs):\n        self.epsilon = kwargs.pop(\"epsilon\", 10.0)\n        self.double_click = kwargs.pop(\"double_click\", \"close\")\n        if self.double_click not in [None, \"close\"]:\n            raise ValueError(\n                \"Unexpected value for double_click event: {}\".format(self.double_click)\n            )\n        self.num_backups = kwargs.pop(\"num_backups\", 10)\n        self._crosshair = kwargs.pop(\n            \"crosshair\",\n            {\n                \"polygon\": False,\n                \"rectangle\": True,\n                \"circle\": False,\n                \"line\": False,\n                \"point\": False,\n                \"linestrip\": False,\n                \"ai_polygon\": False,\n                \"ai_mask\": False,\n            },\n        )\n        super(Canvas, self).__init__(*args, **kwargs)\n        # Initialise local state.\n        self.mode = self.EDIT\n        self.shapes = []\n        self.shapesBackups = []\n        self.current = None\n        self.selectedShapes = []  # save the selected shapes here\n        self.selectedShapesCopy = []\n        # self.line represents:\n        #   - createMode == 'polygon': edge from last point to current\n        #   - createMode == 'rectangle': diagonal line of the rectangle\n        #   - createMode == 'line': the line\n        #   - createMode == 'point': the point\n        self.line = Shape()\n        self.prevPoint = QtCore.QPoint()\n        self.prevMovePoint = QtCore.QPoint()\n        self.offsets = QtCore.QPoint(), QtCore.QPoint()\n        self.scale = 1.0\n        self.pixmap = QtGui.QPixmap()\n        self.visible = {}\n        self._hideBackround = False\n        self.hideBackround = False\n        self.hShape = None\n        self.prevhShape = None\n        self.hVertex = None\n        self.prevhVertex = None\n        self.hEdge = None\n        self.prevhEdge = None\n        self.movingShape = False\n        self.snapping = True\n        self.hShapeIsSelected = False\n        self._painter = QtGui.QPainter()\n        self._cursor = CURSOR_DEFAULT\n        # Menus:\n        # 0: right-click without selection and dragging of shapes\n        # 1: right-click with selection and dragging of shapes\n        self.menus = (QtWidgets.QMenu(), QtWidgets.QMenu())\n        # Set widget options.\n        self.setMouseTracking(True)\n        self.setFocusPolicy(QtCore.Qt.WheelFocus)\n\n",
    "line_range": [
        40,
        104
    ],
    "command_specific_fields": {
        "method_name": "__init__"
    },
    "language": "python",
    "commit": "aca3e64545f55c886760694981df634ae6eb1f32",
    "prompt": ""
}