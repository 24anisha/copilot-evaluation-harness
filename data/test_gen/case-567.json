{
    "case_id": "case-567",
    "repo_name": "kelektiv/node-cron",
    "file_path": "src/time.ts",
    "code_snippet": "\t\t};\n\n\t\t// Include the endHour: Selecting the right range still ensures no values outside the skip are checked.\n\t\tfor (let hour = startHour; hour <= endHour; ++hour) {\n\t\t\tif (!(hour in this.hour)) continue;\n\n\t\t\t// The hour matches, so if the minute is in the range, we have a match!\n\t\t\tconst usingRange = selectRange(hour);\n\n\t\t\tfor (const minute of usingRange) {\n\t\t\t\t// All minutes in any of the selected ranges represent minutes which are fully contained in the jump,\n\t\t\t\t// So we need not check the seconds. If the minute is in there, it is a match.\n\t\t\t\tif (minute in this.minute) return true;\n\t\t\t}\n\t\t}\n\n\t\t// The endMinute of the endHour was not checked in the loop, because only the 0th second of it is in the range.\n\t\t// Arriving here means no match was found yet, but this final check may turn up as a match.\n\t\treturn endHour in this.hour && endMinute in this.minute && 0 in this.second;\n\t}\n\n\t/**\n\t * Given expected and actual hours and minutes, report if a DST forward jump occurred.\n\t *\n\t * This is the case when the expected is smaller than the acutal.\n\t *\n\t * It is not sufficient to check only hours, because some parts of the world apply DST by shifting in minutes.\n\t * Better to account for it by checking minutes too, before an Australian of Lord Howe Island call us.\n\t * @param expectedHour\n\t * @param expectedMinute\n\t * @param {DateTime} actualDate\n\t */\n\tprivate _forwardDSTJump(\n\t\texpectedHour: number,\n\t\texpectedMinute: number,\n\t\tactualDate: DateTime\n\t) {\n\t\tconst actualHour = actualDate.hour;\n\t\tconst actualMinute = actualDate.minute;\n\n\t\tconst didHoursJumped = expectedHour % 24 < actualHour;\n\t\tconst didMinutesJumped = expectedMinute % 60 < actualMinute;\n\n\t\treturn didHoursJumped || didMinutesJumped;\n\t}\n\n\t/**\n\t * wildcard, or all params in array (for to string)\n\t */\n\tprivate _wcOrAll(unit: TimeUnit) {\n\t\tif (this._hasAll(unit)) {\n\t\t\treturn '*';\n\t\t}\n",
    "line_range": [
        577,
        629
    ],
    "command_specific_fields": {
        "method_name": "_checkTimeInSkippedRangeMultiHour"
    },
    "language": "typescript",
    "commit": "1eb978b8cddf8a2f2bead841adcad408238333c6",
    "prompt": ""
}