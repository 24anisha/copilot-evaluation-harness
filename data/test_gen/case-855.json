{
    "case_id": "case-855",
    "repo_name": "ranger/ranger",
    "file_path": "ranger/ext/signals.py",
    "code_snippet": "                pass\n\n\n\n    def signal_garbage_collect(self):\n\n        \"\"\"Remove all handlers with deleted weak references.\n\n\n\n        Usually this is not needed; every time you emit a signal, its handlers\n\n        are automatically checked in this way.  However, if you can't be sure\n\n        that a signal is ever emitted AND you keep binding weakly referenced\n\n        functions to the signal, this method should be regularly called to\n\n        avoid memory leaks in self._signals.\n\n\n\n        >>> sig = SignalDispatcher()\n\n\n\n        >>> # lambda:None is an anonymous function which has no references\n\n        >>> # so it should get deleted immediately\n\n        >>> handler = sig.signal_bind('test', lambda: None, weak=True)\n\n        >>> len(sig._signals['test'])\n\n        1\n\n        >>> # need to call garbage collect so that it's removed from the list.\n\n        >>> sig.signal_garbage_collect()\n\n        >>> len(sig._signals['test'])\n\n        0\n\n        >>> # This demonstrates that garbage collecting is not necessary\n\n        >>> # when using signal_emit().\n\n        >>> handler = sig.signal_bind('test', lambda: None, weak=True)\n\n        >>> sig.signal_emit('another_signal')\n\n        True\n\n        >>> len(sig._signals['test'])\n\n        1\n\n        >>> sig.signal_emit('test')\n\n        True\n\n        >>> len(sig._signals['test'])\n\n        0\n\n        \"\"\"\n\n        for handler_list in self._signals.values():\n\n            i = len(handler_list)\n\n            while i:\n\n                i -= 1\n\n                handler = handler_list[i]\n\n                try:\n\n                    if isinstance(handler.function, tuple):\n\n                        handler.function[1].__class__  # pylint: disable=pointless-statement\n\n                    else:\n\n                        handler.function.__class__  # pylint: disable=pointless-statement\n\n                except ReferenceError:\n\n                    handler.function = None\n\n                    del handler_list[i]\n",
    "line_range": [
        192,
        238
    ],
    "command_specific_fields": {
        "method_name": "signal_garbage_collect"
    },
    "language": "python",
    "commit": "80baec602c32208fc3c8a979ce48db53ccdd6725",
    "prompt": ""
}