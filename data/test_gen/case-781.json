{
    "case_id": "case-781",
    "repo_name": "KillianLucas/open-interpreter",
    "file_path": "interpreter/core/computer/mouse/mouse.py",
    "code_snippet": "            )\n\n    def move(self, *args, x=None, y=None, icon=None, text=None, screenshot=None):\n        \"\"\"\n        Moves the mouse to specified coordinates, an icon, or text.\n        \"\"\"\n        if len(args) > 1:\n            raise ValueError(\n                \"Too many positional arguments provided. To move/click specific coordinates, use kwargs (x=x, y=y).\\n\\nPlease take a screenshot with computer.display.view() to find text/icons to click, then use computer.mouse.click(text) or computer.mouse.click(icon=description_of_icon) if at all possible. This is **significantly** more accurate than using coordinates. Specifying (x=x, y=y) is highly likely to fail. Specifying ('text to click') is highly likely to succeed.\"\n            )\n        elif len(args) == 1 or text != None:\n            if len(args) == 1:\n                text = args[0]\n\n            if screenshot == None:\n                screenshot = self.computer.display.screenshot(show=False)\n\n            coordinates = self.computer.display.find(\n                '\"' + text + '\"', screenshot=screenshot\n            )\n\n            is_fuzzy = any([c[\"similarity\"] != 1 for c in coordinates])\n            # nah just hey, if it's fuzzy, then whatever, it prob wont see the message then decide something else (not really smart enough yet usually)\n            # so for now, just lets say it's always not fuzzy so if there's 1 coord it will pick it automatically\n            is_fuzzy = False\n\n            if len(coordinates) == 0:\n                return self.move(icon=text)  # Is this a better solution?\n\n                if self.computer.emit_images:\n                    plt.imshow(np.array(screenshot))\n                    with warnings.catch_warnings():\n                        warnings.simplefilter(\"ignore\")\n                        plt.show()\n                raise ValueError(\n                    f\"@@@HIDE_TRACEBACK@@@Your text ('{text}') was not found on the screen. Please try again. If you're 100% sure the text should be there, consider using `computer.mouse.scroll(-10)` to scroll down.\\n\\nYou can use `computer.display.get_text_as_list_of_lists()` to see all the text on the screen.\"\n                )\n            elif len(coordinates) > 1 or is_fuzzy:\n                if self.computer.emit_images:\n                    # Convert the screenshot to a numpy array for drawing\n                    img_array = np.array(screenshot)\n                    gray = cv2.cvtColor(img_array, cv2.COLOR_BGR2GRAY)\n                    img_draw = cv2.cvtColor(gray, cv2.COLOR_GRAY2RGB)\n\n                    # Iterate over the response items\n                    for i, item in enumerate(coordinates):\n                        width, height = screenshot.size\n                        x, y = item[\"coordinates\"]\n                        x *= width\n                        y *= height\n\n                        x = int(x)\n                        y = int(y)\n\n                        # Draw a solid blue circle around the found text\n                        cv2.circle(img_draw, (x, y), 20, (0, 0, 255), -1)\n                        # Put the index number in the center of the circle in white\n                        cv2.putText(\n                            img_draw,\n                            str(i),\n                            (x - 10, y + 10),\n                            cv2.FONT_HERSHEY_SIMPLEX,\n                            1,\n                            (255, 255, 255),\n                            2,\n                            cv2.LINE_AA,\n                        )\n\n                    img_pil = Image.fromarray(img_draw)\n                    display(img_pil)\n\n                coordinates = [\n                    f\"{i}: ({int(item['coordinates'][0]*self.computer.display.width)}, {int(item['coordinates'][1]*self.computer.display.height)}) \"\n                    + '\"'\n                    + item[\"text\"]\n                    + '\"'\n                    for i, item in enumerate(coordinates)\n                ]\n                if is_fuzzy:\n                    error_message = (\n                        f\"@@@HIDE_TRACEBACK@@@Your text ('{text}') was not found exactly, but some similar text was found. Please review the attached image, then click/move over one of the following coordinates with computer.mouse.click(x=x, y=y) or computer.mouse.move(x=x, y=y):\\n\"\n                        + \"\\n\".join(coordinates)\n                    )\n                else:\n                    error_message = (\n                        f\"@@@HIDE_TRACEBACK@@@Your text ('{text}') was found multiple times on the screen. Please review the attached image, then click/move over one of the following coordinates with computer.mouse.click(x=x, y=y) or computer.mouse.move(x=x, y=y):\\n\"\n                        + \"\\n\".join(coordinates)\n                    )\n                raise ValueError(error_message)\n            else:\n                x, y = coordinates[0][\"coordinates\"]\n                x *= self.computer.display.width\n                y *= self.computer.display.height\n                x = int(x)\n                y = int(y)\n\n        elif x is not None and y is not None:\n            print(\n                format_to_recipient(\n                    \"Unless you have just received these EXACT coordinates from a computer.mouse.move or computer.mouse.click command, PLEASE take a screenshot with computer.display.view() to find TEXT OR ICONS to click, then use computer.mouse.click(text) or computer.mouse.click(icon=description_of_icon) if at all possible. This is **significantly** more accurate than using coordinates. Specifying (x=x, y=y) is highly likely to fail. Specifying ('text to click') is highly likely to succeed.\",\n                    \"assistant\",\n                )\n            )\n        elif icon is not None:\n            if screenshot == None:\n                screenshot = self.computer.display.screenshot(show=False)\n\n            coordinates = self.computer.display.find(icon.strip('\"'), screenshot)\n\n            if len(coordinates) > 1:\n                if self.computer.emit_images:\n                    # Convert the screenshot to a numpy array for drawing\n                    img_array = np.array(screenshot)\n                    gray = cv2.cvtColor(img_array, cv2.COLOR_BGR2GRAY)\n                    img_draw = cv2.cvtColor(gray, cv2.COLOR_GRAY2RGB)\n\n                    # Iterate over the response items\n                    for i, item in enumerate(coordinates):\n                        width, height = screenshot.size\n                        x, y = item\n                        x *= width\n                        y *= height\n\n                        x = int(x)\n                        y = int(y)\n\n                        # Draw a solid blue circle around the found text\n                        cv2.circle(img_draw, (x, y), 20, (0, 0, 255), -1)\n                        # Put the index number in the center of the circle in white\n                        cv2.putText(\n                            img_draw,\n                            str(i),\n                            (x - 10, y + 10),\n                            cv2.FONT_HERSHEY_SIMPLEX,\n                            1,\n                            (255, 255, 255),\n                            2,\n                            cv2.LINE_AA,\n                        )\n\n                    plt.imshow(img_draw)\n                    with warnings.catch_warnings():\n                        warnings.simplefilter(\"ignore\")\n                        plt.show()\n\n                coordinates = [\n                    f\"{i}: {int(item[0]*self.computer.display.width)}, {int(item[1]*self.computer.display.height)}\"\n                    for i, item in enumerate(coordinates)\n                ]\n                error_message = (\n                    f\"Your icon ('{text}') was found multiple times on the screen. Please click one of the following coordinates with computer.mouse.move(x=x, y=y):\\n\"\n                    + \"\\n\".join(coordinates)\n                )\n                raise ValueError(error_message)\n            else:\n                x, y = coordinates[0]\n                x *= self.computer.display.width\n                y *= self.computer.display.height\n                x = int(x)\n                y = int(y)\n\n        else:\n            raise ValueError(\"Either text, icon, or both x and y must be provided\")\n\n        if self.computer.verbose:\n            if not screenshot:\n                screenshot = self.computer.display.screenshot(show=False)\n\n            # Convert the screenshot to a numpy array for drawing\n            img_array = np.array(screenshot)\n            gray = cv2.cvtColor(img_array, cv2.COLOR_BGR2GRAY)\n            img_draw = cv2.cvtColor(gray, cv2.COLOR_GRAY2RGB)\n\n            # Scale drawing_x and drawing_y from screen size to screenshot size for drawing purposes\n            drawing_x = int(x * screenshot.width / self.computer.display.width)\n            drawing_y = int(y * screenshot.height / self.computer.display.height)\n\n            # Draw a solid blue circle around the place we're clicking\n            cv2.circle(img_draw, (drawing_x, drawing_y), 20, (0, 0, 255), -1)\n\n            plt.imshow(img_draw)\n            with warnings.catch_warnings():\n                warnings.simplefilter(\"ignore\")\n                plt.show()\n\n        # pyautogui.moveTo(x, y, duration=0.5)\n        smooth_move_to(x, y)\n",
    "line_range": [
        42,
        228
    ],
    "command_specific_fields": {
        "method_name": "move"
    },
    "language": "python",
    "commit": "33d6e55e2f33509d62749b8f0466db82403170eb",
    "prompt": ""
}