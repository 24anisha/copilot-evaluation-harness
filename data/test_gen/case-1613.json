{
    "case_id": "case-1613",
    "repo_name": "Zulko/moviepy",
    "file_path": "moviepy/video/io/html_tools.py",
    "code_snippet": "\n\ndef ipython_display(\n\n    clip,\n\n    filetype=None,\n\n    maxduration=60,\n\n    t=None,\n\n    fps=None,\n\n    rd_kwargs=None,\n\n    center=True,\n\n    **html_kwargs,\n\n):\n\n    \"\"\"Displays clip content in an IPython Notebook.\n\n\n\n    Remarks: If your browser doesn't support HTML5, this should warn you.\n\n    If nothing is displayed, maybe your file or filename is wrong.\n\n    Important: The media will be physically embedded in the notebook.\n\n\n\n    Parameters\n\n    ----------\n\n\n\n    clip : moviepy.Clip.Clip\n\n      Either the name of a file, or a clip to preview. The clip will actually\n\n      be written to a file and embedded as if a filename was provided.\n\n\n\n    filetype : str, optional\n\n      One of ``\"video\"``, ``\"image\"`` or ``\"audio\"``. If None is given, it is\n\n      determined based on the extension of ``filename``, but this can bug.\n\n\n\n    maxduration : float, optional\n\n      An error will be raised if the clip's duration is more than the indicated\n\n      value (in seconds), to avoid spoiling the browser's cache and the RAM.\n\n\n\n    t : float, optional\n\n      If not None, only the frame at time t will be displayed in the notebook,\n\n      instead of a video of the clip.\n\n\n\n    fps : int, optional\n\n      Enables to specify an fps, as required for clips whose fps is unknown.\n\n\n\n    rd_kwargs : dict, optional\n\n      Keyword arguments for the rendering, like ``dict(fps=15, bitrate=\"50k\")``.\n\n      Allow you to give some options to the render process. You can, for\n\n      example, disable the logger bar passing ``dict(logger=None)``.\n\n\n\n    center : bool, optional\n\n      If true (default), the content will be wrapped in a\n\n      ``<div align=middle>`` HTML container, so the content will be displayed\n\n      at the center.\n\n\n\n    kwargs\n\n      Allow you to give some options, like ``width=260``, etc. When editing\n\n      looping gifs, a good choice is ``loop=1, autoplay=1``.\n\n\n\n    Examples\n\n    --------\n\n\n\n    >>> from moviepy.editor import *\n\n    >>> # later ...\n\n    >>> clip.ipython_display(width=360)\n\n    >>> clip.audio.ipython_display()\n\n\n\n    >>> clip.write_gif(\"test.gif\")\n\n    >>> ipython_display('test.gif')\n\n\n\n    >>> clip.save_frame(\"first_frame.jpeg\")\n\n    >>> ipython_display(\"first_frame.jpeg\")\n\n    \"\"\"\n\n    if not ipython_available:\n\n        raise ImportError(\"Only works inside an IPython Notebook\")\n\n\n\n    if rd_kwargs is None:\n\n        rd_kwargs = {}\n\n\n\n    if fps is not None:\n\n        rd_kwargs[\"fps\"] = fps\n\n\n\n    if t is not None:\n\n        clip = clip.to_ImageClip(t)\n\n\n\n    return HTML2(\n\n        html_embed(\n\n            clip,\n\n            filetype=filetype,\n\n            maxduration=maxduration,\n\n            center=center,\n\n            rd_kwargs=rd_kwargs,\n\n            **html_kwargs,\n\n        )\n\n    )\n",
    "line_range": [
        192,
        281
    ],
    "command_specific_fields": {
        "method_name": "ipython_display"
    },
    "language": "python",
    "commit": "0f6f6d4d9b96c69d109975549fe6293931f1a19d",
    "prompt": ""
}