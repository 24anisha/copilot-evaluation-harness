{
    "case_id": "case-322",
    "repo_name": "fluent-ffmpeg/node-fluent-ffmpeg",
    "file_path": "lib/fluent-ffmpeg.js",
    "code_snippet": " */\n\nfunction FfmpegCommand(input, options) {\n\n  // Make 'new' optional\n\n  if (!(this instanceof FfmpegCommand)) {\n\n    return new FfmpegCommand(input, options);\n\n  }\n\n\n\n  EventEmitter.call(this);\n\n\n\n  if (typeof input === 'object' && !('readable' in input)) {\n\n    // Options object passed directly\n\n    options = input;\n\n  } else {\n\n    // Input passed first\n\n    options = options || {};\n\n    options.source = input;\n\n  }\n\n\n\n  // Add input if present\n\n  this._inputs = [];\n\n  if (options.source) {\n\n    this.input(options.source);\n\n  }\n\n\n\n  // Add target-less output for backwards compatibility\n\n  this._outputs = [];\n\n  this.output();\n\n\n\n  // Create argument lists\n\n  var self = this;\n\n  ['_global', '_complexFilters'].forEach(function(prop) {\n\n    self[prop] = utils.args();\n\n  });\n\n\n\n  // Set default option values\n\n  options.stdoutLines = 'stdoutLines' in options ? options.stdoutLines : 100;\n\n  options.presets = options.presets || options.preset || path.join(__dirname, 'presets');\n\n  options.niceness = options.niceness || options.priority || 0;\n\n\n\n  // Save options\n\n  this.options = options;\n\n\n\n  // Setup logger\n\n  this.logger = options.logger || {\n\n    debug: function() {},\n\n    info: function() {},\n\n    warn: function() {},\n\n    error: function() {}\n\n  };\n\n}\n",
    "line_range": [
        29,
        79
    ],
    "command_specific_fields": {
        "method_name": "FfmpegCommand"
    },
    "language": "javascript",
    "commit": "fafb8d3a66f91485907145d776cc14272e402f48",
    "prompt": ""
}