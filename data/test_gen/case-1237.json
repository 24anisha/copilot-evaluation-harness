{
    "case_id": "case-1237",
    "repo_name": "alicevision/Meshroom",
    "file_path": "meshroom/core/graph.py",
    "code_snippet": "        return outputNodes[1:]  # exclude current node\n\n\n\n    @Slot(Node, result=int)\n\n    def canSubmitOrCompute(self, startNode):\n\n        \"\"\"\n\n        Check if a node can be submitted/computed.\n\n\n\n        Returns:\n\n            int: 0 = cannot be submitted or computed /\n\n                1 = can be computed /\n\n                2 = can be submitted /\n\n                3 = can be submitted and computed\n\n        \"\"\"\n\n        if startNode.isAlreadySubmittedOrFinished():\n\n            return 0\n\n\n\n        class SCVisitor(Visitor):\n\n            def __init__(self, reverse, dependenciesOnly):\n\n                super(SCVisitor, self).__init__(reverse, dependenciesOnly)\n\n\n\n            canCompute = True\n\n            canSubmit = True\n\n\n\n            def discoverVertex(self, vertex, graph):\n\n                if vertex.isAlreadySubmitted():\n\n                    self.canSubmit = False\n\n                    if vertex.isExtern():\n\n                        self.canCompute = False\n\n\n\n        visitor = SCVisitor(reverse=False, dependenciesOnly=True)\n\n        self.dfs(visitor=visitor, startNodes=[startNode])\n\n        return visitor.canCompute + (2 * visitor.canSubmit)\n",
    "line_range": [
        1254,
        1285
    ],
    "command_specific_fields": {
        "method_name": "canSubmitOrCompute"
    },
    "language": "python",
    "commit": "cadac0fa699e086dbf1d0713f67f3ee921f6b949",
    "prompt": ""
}