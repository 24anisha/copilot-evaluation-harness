{
    "case_id": "case-1237",
    "repo_name": "alicevision/Meshroom",
    "file_path": "meshroom/core/graph.py",
    "code_snippet": "        self.dfs(visitor=visitor, startNodes=[startNode])\n        return visitor.canCompute + (2 * visitor.canSubmit)\n\n    def _applyExpr(self):\n        with GraphModification(self):\n            for node in self._nodes:\n                node._applyExpr()\n\n    def toDict(self):\n        nodes = {k: node.toDict() for k, node in self._nodes.objects.items()}\n        nodes = dict(sorted(nodes.items()))\n        return nodes\n\n    @Slot(result=str)\n    def asString(self):\n        return str(self.toDict())\n\n    def copy(self) -> \"Graph\":\n        \"\"\"Create a copy of this Graph instance.\"\"\"\n        graph = Graph(\"\")\n        graph._deserialize(self.serialize())\n        return graph\n\n    def serialize(self, asTemplate: bool = False) -> dict:\n        \"\"\"Serialize this Graph instance.\n        \n        Args:\n            asTemplate: Whether to use the template serialization.\n\n        Returns:\n            The serialized graph data.\n        \"\"\"\n",
    "line_range": [
        1254,
        1285
    ],
    "command_specific_fields": {
        "method_name": "canSubmitOrCompute"
    },
    "language": "python",
    "commit": "cadac0fa699e086dbf1d0713f67f3ee921f6b949",
    "prompt": ""
}