{
    "case_id": "case-946",
    "repo_name": "google/yapf",
    "file_path": "yapf/yapflib/logical_line.py",
    "code_snippet": "        self._tokens[index].next_token = tok\n\n  def CalculateFormattingInformation(self):\n    \"\"\"Calculate the split penalty and total length for the tokens.\"\"\"\n    # Say that the first token in the line should have a space before it. This\n    # means only that if this logical line is joined with a predecessor line,\n    # then there will be a space between them.\n    self.first.spaces_required_before = 1\n    self.first.total_length = len(self.first.value)\n\n    prev_token = self.first\n    prev_length = self.first.total_length\n    for token in self._tokens[1:]:\n      if (token.spaces_required_before == 0 and\n          _SpaceRequiredBetween(prev_token, token, self.disable)):\n        token.spaces_required_before = 1\n\n      tok_len = len(token.value) if not token.is_pseudo else 0\n\n      spaces_required_before = token.spaces_required_before\n      if isinstance(spaces_required_before, list):\n        assert token.is_comment, token\n\n        # If here, we are looking at a comment token that appears on a line\n        # with other tokens (but because it is a comment, it is always the last\n        # token).  Rather than specifying the actual number of spaces here,\n        # hard code a value of 0 and then set it later. This logic only works\n        # because this comment token is guaranteed to be the last token in the\n        # list.\n        spaces_required_before = 0\n\n      token.total_length = prev_length + tok_len + spaces_required_before\n\n      # The split penalty has to be computed before {must|can}_break_before,\n      # because these may use it for their decision.\n      token.split_penalty += _SplitPenalty(prev_token, token)\n      token.must_break_before = _MustBreakBefore(prev_token, token)\n      token.can_break_before = (\n          token.must_break_before or _CanBreakBefore(prev_token, token))\n\n      prev_length = token.total_length\n      prev_token = token\n",
    "line_range": [
        60,
        101
    ],
    "command_specific_fields": {
        "method_name": "CalculateFormattingInformation"
    },
    "language": "python",
    "commit": "1afbf7112ae61a467276c9401b3c113e6f676d0f",
    "prompt": ""
}