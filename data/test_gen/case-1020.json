{
    "case_id": "case-1020",
    "repo_name": "ipython/ipython",
    "file_path": "IPython/core/completer.py",
    "code_snippet": "                        text=text_prefix + protect_filename(f), type=\"path\"\n                    )\n                    for f in self.glob(\"*\")\n                ],\n                \"suppress\": False,\n            }\n\n        # Compute the matches from the filesystem\n        if sys.platform == 'win32':\n            m0 = self.clean_glob(text)\n        else:\n            m0 = self.clean_glob(text.replace('\\\\', ''))\n\n        if has_protectables:\n            # If we had protectables, we need to revert our changes to the\n            # beginning of filename so that we don't double-write the part\n            # of the filename we have so far\n            len_lsplit = len(lsplit)\n            matches = [text_prefix + text0 +\n                       protect_filename(f[len_lsplit:]) for f in m0]\n        else:\n            if open_quotes:\n                # if we have a string with an open quote, we don't need to\n                # protect the names beyond the quote (and we _shouldn't_, as\n                # it would cause bugs when the filesystem call is made).\n                matches = m0 if sys.platform == \"win32\" else\\\n                    [protect_filename(f, open_quotes) for f in m0]\n            else:\n                matches = [text_prefix +\n                           protect_filename(f) for f in m0]\n\n        # Mark directories in input list by appending '/' to their names.\n        return {\n            \"completions\": [\n                SimpleCompletion(text=x + \"/\" if os.path.isdir(x) else x, type=\"path\")\n                for x in matches\n            ],\n            \"suppress\": False,\n        }\n\n    @context_matcher()\n    def magic_matcher(self, context: CompletionContext) -> SimpleMatcherResult:\n        \"\"\"Match magics.\"\"\"\n\n        # Get all shell magics now rather than statically, so magics loaded at\n        # runtime show up too.\n        text = context.token\n",
    "line_range": [
        2103,
        2149
    ],
    "command_specific_fields": {
        "method_name": "magic_matches"
    },
    "language": "python",
    "commit": "128bd582b9894b8ae9ff577aafe13f5fdb39c3cb",
    "prompt": ""
}