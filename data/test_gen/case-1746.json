{
    "case_id": "case-1746",
    "repo_name": "httpie/cli",
    "file_path": "httpie/cli/definition.py",
    "code_snippet": "\n\n\n\ndef format_auth_help(auth_plugins_mapping, *, isolation_mode: bool = False):\n\n    text = \"\"\"\n\n    The authentication mechanism to be used. Defaults to \"{default}\".\n\n\n\n    {auth_types}\n\n    \"\"\"\n\n\n\n    auth_plugins = list(auth_plugins_mapping.values())\n\n    if isolation_mode:\n\n        auth_plugins = [\n\n            auth_plugin\n\n            for auth_plugin in auth_plugins\n\n            if issubclass(auth_plugin, BuiltinAuthPlugin)\n\n        ]\n\n        text += '\\n'\n\n        text += 'To see all available auth types on your system, including ones installed via plugins, run:\\n\\n'\n\n        text += '    $ http --auth-type'\n\n\n\n    auth_types = '\\n\\n    '.join(\n\n        '\"{type}\": {name}{package}{description}'.format(\n\n            type=plugin.auth_type,\n\n            name=plugin.name,\n\n            package=(\n\n                ''\n\n                if issubclass(plugin, BuiltinAuthPlugin)\n\n                else f' (provided by {plugin.package_name})'\n\n            ),\n\n            description=(\n\n                ''\n\n                if not plugin.description\n\n                else '\\n      '\n\n                     + ('\\n      '.join(textwrap.wrap(plugin.description)))\n\n            ),\n\n        )\n\n        for plugin in auth_plugins\n\n    )\n\n\n\n    return text.format(\n\n        default=auth_plugins[0].auth_type,\n\n        auth_types=auth_types,\n\n    )\n",
    "line_range": [
        624,
        666
    ],
    "command_specific_fields": {
        "method_name": "format_auth_help"
    },
    "language": "python",
    "commit": "f4cf43ecdd6c5c52b5c4ba91086d5c6ccfebcd6d",
    "prompt": ""
}