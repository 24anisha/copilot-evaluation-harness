{
    "case_id": "case-1208",
    "repo_name": "Zulko/moviepy",
    "file_path": "moviepy/video/tools/tracking.py",
    "code_snippet": "\n\ndef autoTrack(clip, pattern, tt=None, fps=None, radius=20, xy0=None):\n\n    \"\"\"Tracks a given pattern (small image array) in a video clip.\n\n\n\n    Returns ``[(x1, y1), (x2, y2)...]`` where ``(xi, yi)`` are the coordinates\n\n    of the pattern in the clip on frame ``i``. To select the frames you can\n\n    either specify a list of times with ``tt`` or select a frame rate with\n\n    ``fps``.\n\n\n\n    This algorithm assumes that the pattern's aspect does not vary much and\n\n    that the distance between two occurrences of the pattern in two consecutive\n\n    frames is smaller than ``radius`` (if you set ``radius`` to -1 the pattern\n\n    will be searched in the whole screen at each frame). You can also provide\n\n    the original position of the pattern with xy0.\n\n\n\n    Parameters\n\n    ----------\n\n\n\n    clip : video.VideoClip.VideoClip\n\n      MoviePy video clip to track.\n\n\n\n    pattern : numpy.ndarray\n\n      Image to search inside the clip frames.\n\n\n\n    tt : numpy.ndarray, optional\n\n      Time frames used for auto tracking. As default is used the clip time\n\n      frames according to its fps.\n\n\n\n    fps : int, optional\n\n      Overwrites fps value used computing time frames. As default, clip's fps.\n\n\n\n    radius : int, optional\n\n      Maximum radius to search looking for the pattern. Set to ``-1``,\n\n      the pattern will be searched in the whole screen at each frame.\n\n\n\n    xy0 : tuple or list, optional\n\n      Original position of the pattern. If not provided, will be taken from the\n\n      first tracked frame of the clip.\n\n    \"\"\"\n\n    if not autotracking_possible:\n\n        raise IOError(\n\n            \"Sorry, autotrack requires OpenCV for the moment. \"\n\n            \"Install OpenCV (aka cv2) to use it.\"\n\n        )\n\n\n\n    if not xy0:\n\n        xy0 = findAround(clip.get_frame(tt[0]), pattern)\n\n\n\n    if tt is None:\n\n        tt = np.arange(0, clip.duration, 1.0 / fps)\n\n\n\n    xys = [xy0]\n\n    for t in tt[1:]:\n\n        xys.append(findAround(clip.get_frame(t), pattern, xy=xys[-1], r=radius))\n\n\n\n    xx, yy = zip(*xys)\n\n\n\n    return Trajectory(tt, xx, yy)\n",
    "line_range": [
        173,
        231
    ],
    "command_specific_fields": {
        "method_name": "autoTrack"
    },
    "language": "python",
    "commit": "0f6f6d4d9b96c69d109975549fe6293931f1a19d",
    "prompt": ""
}