{
    "case_id": "case-46",
    "repo_name": "Rob--W/cors-anywhere",
    "file_path": "lib/rate-limit.js",
    "code_snippet": "'use strict';\n\nmodule.exports = function createRateLimitChecker(CORSANYWHERE_RATELIMIT) {\n\n  // Configure rate limit. The following format is accepted for CORSANYWHERE_RATELIMIT:\n\n  // <max requests per period> <period in minutes> <non-ratelimited hosts>\n\n  // where <non-ratelimited hosts> is a space-separated list of strings or regexes (/.../) that\n\n  // matches the whole host (ports have to be listed explicitly if applicable).\n\n  // <period in minutes> cannot be zero.\n\n  //\n\n  // Examples:\n\n  // - Allow any origin to make one request per 5 minutes:\n\n  //   1 5\n\n  //\n\n  // - Allow example.com to make an unlimited number of requests, and the others 1 per 5 minutes.\n\n  //   1 5 example.com\n\n  //\n\n  // - Allow example.com, or any subdomain to make any number of requests and block the rest:\n\n  //   0 1 /(.*\\.)?example\\.com/\n\n  //\n\n  // - Allow example.com and www.example.com, and block the rest:\n\n  //   0 1 example.com www.example.com\n\n  var rateLimitConfig = /^(\\d+) (\\d+)(?:\\s*$|\\s+(.+)$)/.exec(CORSANYWHERE_RATELIMIT);\n\n  if (!rateLimitConfig) {\n\n    // No rate limit by default.\n\n    return function checkRateLimit() {};\n\n  }\n\n  var maxRequestsPerPeriod = parseInt(rateLimitConfig[1]);\n\n  var periodInMinutes = parseInt(rateLimitConfig[2]);\n\n  var unlimitedPattern = rateLimitConfig[3]; // Will become a RegExp or void.\n\n  if (unlimitedPattern) {\n\n    var unlimitedPatternParts = [];\n\n    unlimitedPattern.trim().split(/\\s+/).forEach(function(unlimitedHost, i) {\n\n      var startsWithSlash = unlimitedHost.charAt(0) === '/';\n\n      var endsWithSlash = unlimitedHost.slice(-1) === '/';\n\n      if (startsWithSlash || endsWithSlash) {\n\n        if (unlimitedHost.length === 1 || !startsWithSlash || !endsWithSlash) {\n\n          throw new Error('Invalid CORSANYWHERE_RATELIMIT. Regex at index ' + i +\n\n              ' must start and end with a slash (\"/\").');\n\n        }\n\n        unlimitedHost = unlimitedHost.slice(1, -1);\n\n        // Throws if the pattern is invalid.\n\n        new RegExp(unlimitedHost);\n\n      } else {\n\n        // Just escape RegExp characters even though they cannot appear in a host name.\n\n        // The only actual important escape is the dot.\n\n        unlimitedHost = unlimitedHost.replace(/[$()*+.?[\\\\\\]^{|}]/g, '\\\\$&');\n\n      }\n\n      unlimitedPatternParts.push(unlimitedHost);\n\n    });\n\n    unlimitedPattern = new RegExp('^(?:' + unlimitedPatternParts.join('|') + ')$', 'i');\n\n  }\n\n\n\n  var accessedHosts = Object.create(null);\n\n  setInterval(function() {\n\n    accessedHosts = Object.create(null);\n\n  }, periodInMinutes * 60000);\n\n\n\n  var rateLimitMessage = 'The number of requests is limited to ' + maxRequestsPerPeriod +\n\n    (periodInMinutes === 1 ? ' per minute' : ' per ' + periodInMinutes + ' minutes') + '. ' +\n\n    'Please self-host CORS Anywhere if you need more quota. ' +\n\n    'See https://github.com/Rob--W/cors-anywhere#demo-server';\n\n\n\n  return function checkRateLimit(origin) {\n\n    var host = origin.replace(/^[\\w\\-]+:\\/\\//i, '');\n\n    if (unlimitedPattern && unlimitedPattern.test(host)) {\n\n      return;\n\n    }\n\n    var count = accessedHosts[host] || 0;\n\n    ++count;\n\n    if (count > maxRequestsPerPeriod) {\n\n      return rateLimitMessage;\n\n    }\n\n    accessedHosts[host] = count;\n\n  };\n\n};\n",
    "line_range": [
        0,
        74
    ],
    "command_specific_fields": {
        "method_name": "createRateLimitChecker"
    },
    "language": "javascript",
    "commit": "70aaa22b3f9ad30c8566024bf25484fd1ed9bda9",
    "prompt": ""
}