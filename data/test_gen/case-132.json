{
    "case_id": "case-0",
    "repo_name": "dthree/cash",
    "file_path": "src/commands/source.js",
    "code_snippet": "{\n    options = options || {};\n    args = args || {};\n\n    if (typeof args === 'string') {\n      const params = args.split(/\\s+/);\n      args = {};\n      args.file = params[0];\n      if (params.length > 1) {\n        args.params = params.slice(1);\n      }\n    }\n\n    const vorpal = options.vorpal;\n\n    /* istanbul ignore next */\n    if (!vorpal) {\n      throw new Error('Source is not programatically supported.');\n    }\n\n    if (!args.file) {\n      this.log(usage);\n      return 2;\n    }\n    try {\n      // Once support for referencing parameters ($1, $2, etc.) gets added, this\n      // should swap these out with the value of args.params\n      fs.readFileSync(args.file, 'utf8').split('\\n').forEach(function (line) {\n        if (line) {\n          vorpal.execSync(line); // execute each line in the current environment\n        }\n      });\n    } catch (e) {\n      if (e.code === 'ENOENT') {\n        this.log(`-cash: ${args.file}: No such file or directory`);\n      } else if (e.code === 'EACCES') {\n        this.log(`-cash: ${args.file}: Permission denied`);\n      } else if (e.code === 'EISDIR') {\n        this.log(`-cash: source: ${args.file}: is a directory`);\n      } else {\n        /* istanbul ignore next */\n        this.log(`-cash: source: unable to read ${args.file}`);\n      }\n      return 1;\n    }\n\n    return 0;\n  }",
    "line_range": [
        9,
        58
    ],
    "command_specific_fields": {
        "method_name": "exec"
    },
    "language": "javascript",
    "commit": "3e28dae8bdb71215d5034df9003f3ef2804c2754",
    "prompt": ""
}