{
    "case_id": "case-1234",
    "repo_name": "pallets/click",
    "file_path": "src/click/utils.py",
    "code_snippet": "\n\ndef get_app_dir(app_name: str, roaming: bool = True, force_posix: bool = False) -> str:\n\n    r\"\"\"Returns the config folder for the application.  The default behavior\n\n    is to return whatever is most appropriate for the operating system.\n\n\n\n    To give you an idea, for an app called ``\"Foo Bar\"``, something like\n\n    the following folders could be returned:\n\n\n\n    Mac OS X:\n\n      ``~/Library/Application Support/Foo Bar``\n\n    Mac OS X (POSIX):\n\n      ``~/.foo-bar``\n\n    Unix:\n\n      ``~/.config/foo-bar``\n\n    Unix (POSIX):\n\n      ``~/.foo-bar``\n\n    Windows (roaming):\n\n      ``C:\\Users\\<user>\\AppData\\Roaming\\Foo Bar``\n\n    Windows (not roaming):\n\n      ``C:\\Users\\<user>\\AppData\\Local\\Foo Bar``\n\n\n\n    .. versionadded:: 2.0\n\n\n\n    :param app_name: the application name.  This should be properly capitalized\n\n                     and can contain whitespace.\n\n    :param roaming: controls if the folder should be roaming or not on Windows.\n\n                    Has no effect otherwise.\n\n    :param force_posix: if this is set to `True` then on any POSIX system the\n\n                        folder will be stored in the home folder with a leading\n\n                        dot instead of the XDG config home or darwin's\n\n                        application support folder.\n\n    \"\"\"\n\n    if WIN:\n\n        key = \"APPDATA\" if roaming else \"LOCALAPPDATA\"\n\n        folder = os.environ.get(key)\n\n        if folder is None:\n\n            folder = os.path.expanduser(\"~\")\n\n        return os.path.join(folder, app_name)\n\n    if force_posix:\n\n        return os.path.join(os.path.expanduser(f\"~/.{_posixify(app_name)}\"))\n\n    if sys.platform == \"darwin\":\n\n        return os.path.join(\n\n            os.path.expanduser(\"~/Library/Application Support\"), app_name\n\n        )\n\n    return os.path.join(\n\n        os.environ.get(\"XDG_CONFIG_HOME\", os.path.expanduser(\"~/.config\")),\n\n        _posixify(app_name),\n\n    )\n",
    "line_range": [
        447,
        495
    ],
    "command_specific_fields": {
        "method_name": "get_app_dir"
    },
    "language": "python",
    "commit": "14f735cf59618941cf2930e633eb77651b1dc7cb",
    "prompt": ""
}