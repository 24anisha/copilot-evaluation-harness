{
    "case_id": "case-1374",
    "repo_name": "networkx/networkx",
    "file_path": "networkx/algorithms/community/centrality.py",
    "code_snippet": "\n\n@nx._dispatchable(preserve_edge_attrs=\"most_valuable_edge\")\ndef girvan_newman(G, most_valuable_edge=None):\n    \"\"\"Finds communities in a graph using the Girvan\u2013Newman method.\n\n    Parameters\n    ----------\n    G : NetworkX graph\n\n    most_valuable_edge : function\n        Function that takes a graph as input and outputs an edge. The\n        edge returned by this function will be recomputed and removed at\n        each iteration of the algorithm.\n\n        If not specified, the edge with the highest\n        :func:`networkx.edge_betweenness_centrality` will be used.\n\n    Returns\n    -------\n    iterator\n        Iterator over tuples of sets of nodes in `G`. Each set of node\n        is a community, each tuple is a sequence of communities at a\n        particular level of the algorithm.\n\n    Examples\n    --------\n    To get the first pair of communities::\n\n        >>> G = nx.path_graph(10)\n        >>> comp = nx.community.girvan_newman(G)\n        >>> tuple(sorted(c) for c in next(comp))\n        ([0, 1, 2, 3, 4], [5, 6, 7, 8, 9])\n\n    To get only the first *k* tuples of communities, use\n    :func:`itertools.islice`::\n\n        >>> import itertools\n        >>> G = nx.path_graph(8)\n        >>> k = 2\n        >>> comp = nx.community.girvan_newman(G)\n        >>> for communities in itertools.islice(comp, k):\n        ...     print(tuple(sorted(c) for c in communities))\n        ...\n        ([0, 1, 2, 3], [4, 5, 6, 7])\n        ([0, 1], [2, 3], [4, 5, 6, 7])\n\n    To stop getting tuples of communities once the number of communities\n    is greater than *k*, use :func:`itertools.takewhile`::\n\n        >>> import itertools\n        >>> G = nx.path_graph(8)\n        >>> k = 4\n        >>> comp = nx.community.girvan_newman(G)\n        >>> limited = itertools.takewhile(lambda c: len(c) <= k, comp)\n        >>> for communities in limited:\n        ...     print(tuple(sorted(c) for c in communities))\n        ...\n        ([0, 1, 2, 3], [4, 5, 6, 7])\n        ([0, 1], [2, 3], [4, 5, 6, 7])\n        ([0, 1], [2, 3], [4, 5], [6, 7])\n\n    To just choose an edge to remove based on the weight::\n\n        >>> from operator import itemgetter\n        >>> G = nx.path_graph(10)\n        >>> edges = G.edges()\n        >>> nx.set_edge_attributes(G, {(u, v): v for u, v in edges}, \"weight\")\n        >>> def heaviest(G):\n        ...     u, v, w = max(G.edges(data=\"weight\"), key=itemgetter(2))\n        ...     return (u, v)\n        ...\n        >>> comp = nx.community.girvan_newman(G, most_valuable_edge=heaviest)\n        >>> tuple(sorted(c) for c in next(comp))\n        ([0, 1, 2, 3, 4, 5, 6, 7, 8], [9])\n\n    To utilize edge weights when choosing an edge with, for example, the\n    highest betweenness centrality::\n\n        >>> from networkx import edge_betweenness_centrality as betweenness\n        >>> def most_central_edge(G):\n        ...     centrality = betweenness(G, weight=\"weight\")\n        ...     return max(centrality, key=centrality.get)\n        ...\n        >>> G = nx.path_graph(10)\n        >>> comp = nx.community.girvan_newman(G, most_valuable_edge=most_central_edge)\n        >>> tuple(sorted(c) for c in next(comp))\n        ([0, 1, 2, 3, 4], [5, 6, 7, 8, 9])\n\n    To specify a different ranking algorithm for edges, use the\n    `most_valuable_edge` keyword argument::\n\n        >>> from networkx import edge_betweenness_centrality\n        >>> from random import random\n        >>> def most_central_edge(G):\n        ...     centrality = edge_betweenness_centrality(G)\n        ...     max_cent = max(centrality.values())\n        ...     # Scale the centrality values so they are between 0 and 1,\n        ...     # and add some random noise.\n        ...     centrality = {e: c / max_cent for e, c in centrality.items()}\n        ...     # Add some random noise.\n        ...     centrality = {e: c + random() for e, c in centrality.items()}\n        ...     return max(centrality, key=centrality.get)\n        ...\n        >>> G = nx.path_graph(10)\n        >>> comp = nx.community.girvan_newman(G, most_valuable_edge=most_central_edge)\n\n    Notes\n    -----\n    The Girvan\u2013Newman algorithm detects communities by progressively\n    removing edges from the original graph. The algorithm removes the\n    \"most valuable\" edge, traditionally the edge with the highest\n    betweenness centrality, at each step. As the graph breaks down into\n    pieces, the tightly knit community structure is exposed and the\n    result can be depicted as a dendrogram.\n\n    \"\"\"\n    # If the graph is already empty, simply return its connected\n    # components.\n    if G.number_of_edges() == 0:\n        yield tuple(nx.connected_components(G))\n        return\n    # If no function is provided for computing the most valuable edge,\n    # use the edge betweenness centrality.\n    if most_valuable_edge is None:\n\n        def most_valuable_edge(G):\n            \"\"\"Returns the edge with the highest betweenness centrality\n            in the graph `G`.\n\n            \"\"\"\n            # We have guaranteed that the graph is non-empty, so this\n            # dictionary will never be empty.\n            betweenness = nx.edge_betweenness_centrality(G)\n            return max(betweenness, key=betweenness.get)\n\n    # The copy of G here must include the edge weight data.\n    g = G.copy().to_undirected()\n    # Self-loops must be removed because their removal has no effect on\n    # the connected components of the graph.\n    g.remove_edges_from(nx.selfloop_edges(g))\n    while g.number_of_edges() > 0:\n        yield _without_most_central_edges(g, most_valuable_edge)\n",
    "line_range": [
        6,
        148
    ],
    "command_specific_fields": {
        "method_name": "girvan_newman"
    },
    "language": "python",
    "commit": "89718e0514bded93ded5b00aed755a4474c1dc6f",
    "prompt": ""
}