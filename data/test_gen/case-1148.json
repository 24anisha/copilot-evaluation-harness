{
    "case_id": "case-1148",
    "repo_name": "alicevision/Meshroom",
    "file_path": "meshroom/core/graph.py",
    "code_snippet": "    compatibilityNodes = Property(BaseObject, lambda self: self._compatibilityNodes, constant=True)\n\n\n\n    def dfsMaxEdgeLength(self, startNodes=None, dependenciesOnly=True):\n\n        \"\"\"\n\n        :param startNodes: list of starting nodes. Use all leaves if empty.\n\n        :return:\n\n        \"\"\"\n\n        nodesStack = []\n\n        edgesScore = defaultdict(lambda: 0)\n\n        visitor = Visitor(reverse=False, dependenciesOnly=dependenciesOnly)\n\n\n\n        def finishEdge(edge, graph):\n\n            u, v = edge\n\n            for i, n in enumerate(reversed(nodesStack)):\n\n                index = i + 1\n\n                if index > edgesScore[(n, v)]:\n\n                    edgesScore[(n, v)] = index\n\n\n\n        def finishVertex(vertex, graph):\n\n            v = nodesStack.pop()\n\n            assert v == vertex\n\n\n\n        visitor.discoverVertex = lambda vertex, graph: nodesStack.append(vertex)\n\n        visitor.finishVertex = finishVertex\n\n        visitor.finishEdge = finishEdge\n\n        self.dfs(visitor=visitor, startNodes=startNodes, longestPathFirst=True)\n\n        return edgesScore\n",
    "line_range": [
        1179,
        1205
    ],
    "command_specific_fields": {
        "method_name": "dfsMaxEdgeLength"
    },
    "language": "python",
    "commit": "cadac0fa699e086dbf1d0713f67f3ee921f6b949",
    "prompt": ""
}