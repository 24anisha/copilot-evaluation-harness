{
    "case_id": "case-1148",
    "repo_name": "alicevision/Meshroom",
    "file_path": "meshroom/core/graph.py",
    "code_snippet": "        original graph, there is also such a path in the reduction.\n\n        :param startNodes:\n        :return: the remaining edges after a transitive reduction of the graph.\n        \"\"\"\n        flowEdges = []\n        edgesScore = self.dfsMaxEdgeLength(startNodes, dependenciesOnly)\n\n        for link, score in edgesScore.items():\n            assert score != 0\n            if score == 1:\n                flowEdges.append(link)\n        return flowEdges\n\n    def getEdges(self, dependenciesOnly=False):\n        if not dependenciesOnly:\n            return self.edges\n\n        outEdges = []\n        for e in self.edges:\n            attr = e.src\n            if dependenciesOnly:\n                if attr.isLink:\n                    attr = attr.getLinkParam(recursive=True)\n                if not attr.isOutput:\n                    continue\n            newE = Edge(attr, e.dst)\n",
    "line_range": [
        1179,
        1205
    ],
    "command_specific_fields": {
        "method_name": "dfsMaxEdgeLength"
    },
    "language": "python",
    "commit": "cadac0fa699e086dbf1d0713f67f3ee921f6b949",
    "prompt": ""
}