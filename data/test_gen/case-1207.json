{
    "case_id": "case-1207",
    "repo_name": "Zulko/moviepy",
    "file_path": "moviepy/video/fx/headblur.py",
    "code_snippet": "\n\ndef headblur(clip, fx, fy, radius, intensity=None):\n\n    \"\"\"Returns a filter that will blur a moving part (a head ?) of the frames.\n\n\n\n    The position of the blur at time t is defined by (fx(t), fy(t)), the radius\n\n    of the blurring by ``radius`` and the intensity of the blurring by ``intensity``.\n\n\n\n    Requires OpenCV for the circling and the blurring. Automatically deals with the\n\n    case where part of the image goes offscreen.\n\n    \"\"\"\n\n    if intensity is None:\n\n        intensity = int(2 * radius / 3)\n\n\n\n    def filter(gf, t):\n\n        im = gf(t).copy()\n\n        h, w, d = im.shape\n\n        x, y = int(fx(t)), int(fy(t))\n\n        x1, x2 = max(0, x - radius), min(x + radius, w)\n\n        y1, y2 = max(0, y - radius), min(y + radius, h)\n\n        region_size = y2 - y1, x2 - x1\n\n\n\n        mask = np.zeros(region_size).astype(\"uint8\")\n\n        cv2.circle(mask, (radius, radius), radius, 255, -1, lineType=cv2.CV_AA)\n\n\n\n        mask = np.dstack(3 * [(1.0 / 255) * mask])\n\n\n\n        orig = im[y1:y2, x1:x2]\n\n        blurred = cv2.blur(orig, (intensity, intensity))\n\n        im[y1:y2, x1:x2] = mask * blurred + (1 - mask) * orig\n\n        return im\n\n\n\n    return clip.transform(filter)\n",
    "line_range": [
        14,
        46
    ],
    "command_specific_fields": {
        "method_name": "headblur"
    },
    "language": "python",
    "commit": "0f6f6d4d9b96c69d109975549fe6293931f1a19d",
    "prompt": ""
}