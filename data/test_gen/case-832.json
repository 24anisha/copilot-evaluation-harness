{
    "case_id": "case-832",
    "repo_name": "networkx/networkx",
    "file_path": "networkx/utils/decorators.py",
    "code_snippet": "        sig = inspect.signature(f, follow_wrapped=False)\n        def_sig = []\n        call_sig = []\n        names = {}\n\n        kind = None\n        args = None\n        kwargs = None\n        npos = 0\n        for i, param in enumerate(sig.parameters.values()):\n            \n            \n            \n            prev = kind\n            kind = param.kind\n            if prev == param.POSITIONAL_ONLY != kind:\n                \n                def_sig.append(\"/\")\n            if (\n                param.VAR_POSITIONAL\n                != prev\n                != param.KEYWORD_ONLY\n                == kind\n                != param.VAR_POSITIONAL\n            ):\n                \n                def_sig.append(\"*\")\n\n            \n            if kind == param.VAR_POSITIONAL:\n                name = \"*\" + param.name\n                args = param.name\n                count = 0\n            elif kind == param.VAR_KEYWORD:\n                name = \"**\" + param.name\n                kwargs = param.name\n                count = 0\n            else:\n                names[i] = names[param.name] = param.name\n                name = param.name\n                count = 1\n\n            \n            if kind == param.KEYWORD_ONLY:\n                call_sig.append(f\"{name} = {name}\")\n            else:\n                npos += count\n                call_sig.append(name)\n\n            def_sig.append(name)\n\n        fname = cls._name(f)\n        def_sig = f'def {fname}({\", \".join(def_sig)}):'\n\n        call_sig = f\"return {{}}({', '.join(call_sig)})\"\n\n        return cls.Signature(fname, sig, def_sig, call_sig, names, npos, args, kwargs)",
    "line_range": [
        1062,
        1154
    ],
    "command_specific_fields": {
        "method_name": "signature"
    },
    "language": "python",
    "commit": "89718e0514bded93ded5b00aed755a4474c1dc6f",
    "prompt": ""
}