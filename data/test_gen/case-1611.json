{
    "case_id": "case-0",
    "repo_name": "dbcli/mycli",
    "file_path": "mycli/packages/special/dbcommands.py",
    "code_snippet": "    query = 'SHOW GLOBAL STATUS;'\n    log.debug(query)\n    try:\n        cur.execute(query)\n    except ProgrammingError:\n        \n        query = 'SHOW STATUS;'\n        log.debug(query)\n        cur.execute(query)\n    status = dict(cur.fetchall())\n\n    query = 'SHOW GLOBAL VARIABLES;'\n    log.debug(query)\n    cur.execute(query)\n    variables = dict(cur.fetchall())\n\n    \n    if (isinstance(list(variables)[0], bytes) and\n            isinstance(list(status)[0], bytes)):\n        variables = {k.decode('utf-8'): v.decode('utf-8') for k, v\n                     in variables.items()}\n        status = {k.decode('utf-8'): v.decode('utf-8') for k, v\n                  in status.items()}\n\n    \n    title = []\n    output = []\n    footer = []\n\n    title.append('--------------')\n\n    \n    implementation = platform.python_implementation()\n    version = platform.python_version()\n    client_info = []\n    client_info.append('mycli {0},'.format(__version__))\n    client_info.append('running on {0} {1}'.format(implementation, version))\n    title.append(' '.join(client_info) + '\\n')\n\n    \n    output.append(('Connection id:', cur.connection.thread_id()))\n\n    query = 'SELECT DATABASE(), USER();'\n    log.debug(query)\n    cur.execute(query)\n    db, user = cur.fetchone()\n    if db is None:\n        db = ''\n\n    output.append(('Current database:', db))\n    output.append(('Current user:', user))\n\n    if iocommands.is_pager_enabled():\n        if 'PAGER' in os.environ:\n            pager = os.environ['PAGER']\n        else:\n            pager = 'System default'\n    else:\n        pager = 'stdout'\n    output.append(('Current pager:', pager))\n\n    output.append(('Server version:', '{0} {1}'.format(\n        variables['version'], variables['version_comment'])))\n    output.append(('Protocol version:', variables['protocol_version']))\n\n    if 'unix' in cur.connection.host_info.lower():\n        host_info = cur.connection.host_info\n    else:\n        host_info = '{0} via TCP/IP'.format(cur.connection.host)\n\n    output.append(('Connection:', host_info))\n\n    query = ('SELECT @@character_set_server, @@character_set_database, '\n             '@@character_set_client, @@character_set_connection LIMIT 1;')\n    log.debug(query)\n    cur.execute(query)\n    charset = cur.fetchone()\n    output.append(('Server characterset:', charset[0]))\n    output.append(('Db characterset:', charset[1]))\n    output.append(('Client characterset:', charset[2]))\n    output.append(('Conn. characterset:', charset[3]))\n\n    if 'TCP/IP' in host_info:\n        output.append(('TCP port:', cur.connection.port))\n    else:\n        output.append(('UNIX socket:', variables['socket']))\n\n    if 'Uptime' in status:\n        output.append(('Uptime:', format_uptime(status['Uptime'])))\n\n    if 'Threads_connected' in status:\n        \n        stats = []\n        stats.append('Connections: {0}'.format(status['Threads_connected']))\n        if 'Queries' in status:\n            stats.append('Queries: {0}'.format(status['Queries']))\n        stats.append('Slow queries: {0}'.format(status['Slow_queries']))\n        stats.append('Opens: {0}'.format(status['Opened_tables']))\n        if 'Flush_commands' in status:\n            stats.append('Flush tables: {0}'.format(status['Flush_commands']))\n        stats.append('Open tables: {0}'.format(status['Open_tables']))\n        if 'Queries' in status:\n            queries_per_second = int(status['Queries']) / int(status['Uptime'])\n            stats.append('Queries per second avg: {:.3f}'.format(\n                queries_per_second))\n        stats = '  '.join(stats)\n        footer.append('\\n' + stats)\n\n    footer.append('--------------')\n    return [('\\n'.join(title), output, '', '\\n'.join(footer))]",
    "line_range": [
        48,
        162
    ],
    "command_specific_fields": {
        "method_name": "status"
    },
    "language": "python",
    "commit": "af5a17d980450e184cfc25e56e0e91a1389d378d",
    "prompt": ""
}