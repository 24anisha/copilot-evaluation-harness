{
    "case_id": "case-1611",
    "repo_name": "dbcli/mycli",
    "file_path": "mycli/packages/special/dbcommands.py",
    "code_snippet": "\n\n@special_command('status', '\\\\s', 'Get status information from the server.',\n\n                 arg_type=RAW_QUERY, aliases=('\\\\s', ), case_sensitive=True)\n\ndef status(cur, **_):\n\n    query = 'SHOW GLOBAL STATUS;'\n\n    log.debug(query)\n\n    try:\n\n        cur.execute(query)\n\n    except ProgrammingError:\n\n        # Fallback in case query fail, as it does with Mysql 4\n\n        query = 'SHOW STATUS;'\n\n        log.debug(query)\n\n        cur.execute(query)\n\n    status = dict(cur.fetchall())\n\n\n\n    query = 'SHOW GLOBAL VARIABLES;'\n\n    log.debug(query)\n\n    cur.execute(query)\n\n    variables = dict(cur.fetchall())\n\n\n\n    # prepare in case keys are bytes, as with Python 3 and Mysql 4\n\n    if (isinstance(list(variables)[0], bytes) and\n\n            isinstance(list(status)[0], bytes)):\n\n        variables = {k.decode('utf-8'): v.decode('utf-8') for k, v\n\n                     in variables.items()}\n\n        status = {k.decode('utf-8'): v.decode('utf-8') for k, v\n\n                  in status.items()}\n\n\n\n    # Create output buffers.\n\n    title = []\n\n    output = []\n\n    footer = []\n\n\n\n    title.append('--------------')\n\n\n\n    # Output the mycli client information.\n\n    implementation = platform.python_implementation()\n\n    version = platform.python_version()\n\n    client_info = []\n\n    client_info.append('mycli {0},'.format(__version__))\n\n    client_info.append('running on {0} {1}'.format(implementation, version))\n\n    title.append(' '.join(client_info) + '\\n')\n\n\n\n    # Build the output that will be displayed as a table.\n\n    output.append(('Connection id:', cur.connection.thread_id()))\n\n\n\n    query = 'SELECT DATABASE(), USER();'\n\n    log.debug(query)\n\n    cur.execute(query)\n\n    db, user = cur.fetchone()\n\n    if db is None:\n\n        db = ''\n\n\n\n    output.append(('Current database:', db))\n\n    output.append(('Current user:', user))\n\n\n\n    if iocommands.is_pager_enabled():\n\n        if 'PAGER' in os.environ:\n\n            pager = os.environ['PAGER']\n\n        else:\n\n            pager = 'System default'\n\n    else:\n\n        pager = 'stdout'\n\n    output.append(('Current pager:', pager))\n\n\n\n    output.append(('Server version:', '{0} {1}'.format(\n\n        variables['version'], variables['version_comment'])))\n\n    output.append(('Protocol version:', variables['protocol_version']))\n\n\n\n    if 'unix' in cur.connection.host_info.lower():\n\n        host_info = cur.connection.host_info\n\n    else:\n\n        host_info = '{0} via TCP/IP'.format(cur.connection.host)\n\n\n\n    output.append(('Connection:', host_info))\n\n\n\n    query = ('SELECT @@character_set_server, @@character_set_database, '\n\n             '@@character_set_client, @@character_set_connection LIMIT 1;')\n\n    log.debug(query)\n\n    cur.execute(query)\n\n    charset = cur.fetchone()\n\n    output.append(('Server characterset:', charset[0]))\n\n    output.append(('Db characterset:', charset[1]))\n\n    output.append(('Client characterset:', charset[2]))\n\n    output.append(('Conn. characterset:', charset[3]))\n\n\n\n    if 'TCP/IP' in host_info:\n\n        output.append(('TCP port:', cur.connection.port))\n\n    else:\n\n        output.append(('UNIX socket:', variables['socket']))\n\n\n\n    if 'Uptime' in status:\n\n        output.append(('Uptime:', format_uptime(status['Uptime'])))\n\n\n\n    if 'Threads_connected' in status:\n\n        # Print the current server statistics.\n\n        stats = []\n\n        stats.append('Connections: {0}'.format(status['Threads_connected']))\n\n        if 'Queries' in status:\n\n            stats.append('Queries: {0}'.format(status['Queries']))\n\n        stats.append('Slow queries: {0}'.format(status['Slow_queries']))\n\n        stats.append('Opens: {0}'.format(status['Opened_tables']))\n\n        if 'Flush_commands' in status:\n\n            stats.append('Flush tables: {0}'.format(status['Flush_commands']))\n\n        stats.append('Open tables: {0}'.format(status['Open_tables']))\n\n        if 'Queries' in status:\n\n            queries_per_second = int(status['Queries']) / int(status['Uptime'])\n\n            stats.append('Queries per second avg: {:.3f}'.format(\n\n                queries_per_second))\n\n        stats = '  '.join(stats)\n\n        footer.append('\\n' + stats)\n\n\n\n    footer.append('--------------')\n\n    return [('\\n'.join(title), output, '', '\\n'.join(footer))]\n",
    "line_range": [
        48,
        162
    ],
    "command_specific_fields": {
        "method_name": "status"
    },
    "language": "python",
    "commit": "af5a17d980450e184cfc25e56e0e91a1389d378d",
    "prompt": ""
}