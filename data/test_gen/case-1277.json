{
    "case_id": "case-1277",
    "repo_name": "ipython/ipython",
    "file_path": "docs/sphinxext/apigen.py",
    "code_snippet": "        return ad\n\n\n\n    def _survives_exclude(self, matchstr, match_type):\n\n        ''' Returns True if *matchstr* does not match patterns\n\n\n\n        ``self.package_name`` removed from front of string if present\n\n\n\n        Examples\n\n        --------\n\n        >>> dw = ApiDocWriter('sphinx')\n\n        >>> dw._survives_exclude('sphinx.okpkg', 'package')\n\n        True\n\n        >>> dw.package_skip_patterns.append('^\\\\.badpkg$')\n\n        >>> dw._survives_exclude('sphinx.badpkg', 'package')\n\n        False\n\n        >>> dw._survives_exclude('sphinx.badpkg', 'module')\n\n        True\n\n        >>> dw._survives_exclude('sphinx.badmod', 'module')\n\n        True\n\n        >>> dw.module_skip_patterns.append('^\\\\.badmod$')\n\n        >>> dw._survives_exclude('sphinx.badmod', 'module')\n\n        False\n\n        '''\n\n        if match_type == 'module':\n\n            patterns = self.module_skip_patterns\n\n        elif match_type == 'package':\n\n            patterns = self.package_skip_patterns\n\n        else:\n\n            raise ValueError('Cannot interpret match type \"%s\"'\n\n                             % match_type)\n\n        # Match to URI without package name\n\n        L = len(self.package_name)\n\n        if matchstr[:L] == self.package_name:\n\n            matchstr = matchstr[L:]\n\n        for pat in patterns:\n\n            try:\n\n                pat.search\n\n            except AttributeError:\n\n                pat = re.compile(pat)\n\n            if pat.search(matchstr):\n\n                return False\n\n        return True\n",
    "line_range": [
        307,
        348
    ],
    "command_specific_fields": {
        "method_name": "_survives_exclude"
    },
    "language": "python",
    "commit": "128bd582b9894b8ae9ff577aafe13f5fdb39c3cb",
    "prompt": ""
}