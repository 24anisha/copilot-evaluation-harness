{
    "case_id": "case-1277",
    "repo_name": "ipython/ipython",
    "file_path": "docs/sphinxext/apigen.py",
    "code_snippet": "        return ad\n\n    def _survives_exclude(self, matchstr, match_type):\n        ''' Returns True if *matchstr* does not match patterns\n\n        ``self.package_name`` removed from front of string if present\n\n        Examples\n        --------\n        >>> dw = ApiDocWriter('sphinx')\n        >>> dw._survives_exclude('sphinx.okpkg', 'package')\n        True\n        >>> dw.package_skip_patterns.append('^\\\\.badpkg$')\n        >>> dw._survives_exclude('sphinx.badpkg', 'package')\n        False\n        >>> dw._survives_exclude('sphinx.badpkg', 'module')\n        True\n        >>> dw._survives_exclude('sphinx.badmod', 'module')\n        True\n        >>> dw.module_skip_patterns.append('^\\\\.badmod$')\n        >>> dw._survives_exclude('sphinx.badmod', 'module')\n        False\n        '''\n        if match_type == 'module':\n            patterns = self.module_skip_patterns\n        elif match_type == 'package':\n            patterns = self.package_skip_patterns\n        else:\n            raise ValueError('Cannot interpret match type \"%s\"'\n                             % match_type)\n        # Match to URI without package name\n        L = len(self.package_name)\n        if matchstr[:L] == self.package_name:\n            matchstr = matchstr[L:]\n        for pat in patterns:\n            try:\n                pat.search\n            except AttributeError:\n                pat = re.compile(pat)\n            if pat.search(matchstr):\n                return False\n        return True\n",
    "line_range": [
        307,
        348
    ],
    "command_specific_fields": {
        "method_name": "_survives_exclude"
    },
    "language": "python",
    "commit": "128bd582b9894b8ae9ff577aafe13f5fdb39c3cb",
    "prompt": ""
}