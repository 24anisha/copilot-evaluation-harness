{
    "case_id": "case-1530",
    "repo_name": "boto/s3transfer",
    "file_path": "s3transfer/crt.py",
    "code_snippet": "\n\ndef acquire_crt_s3_process_lock(name):\n\n    # Currently, the CRT S3 client performs best when there is only one\n\n    # instance of it running on a host. This lock allows an application to\n\n    # signal across processes whether there is another process of the same\n\n    # application using the CRT S3 client and prevent spawning more than one\n\n    # CRT S3 clients running on the system for that application.\n\n    #\n\n    # NOTE: When acquiring the CRT process lock, the lock automatically is\n\n    # released when the lock object is garbage collected. So, the CRT process\n\n    # lock is set as a global so that it is not unintentionally garbage\n\n    # collected/released if reference of the lock is lost.\n\n    global CRT_S3_PROCESS_LOCK\n\n    if CRT_S3_PROCESS_LOCK is None:\n\n        crt_lock = awscrt.s3.CrossProcessLock(name)\n\n        try:\n\n            crt_lock.acquire()\n\n        except RuntimeError:\n\n            # If there is another process that is holding the lock, the CRT\n\n            # returns a RuntimeError. We return None here to signal that our\n\n            # current process was not able to acquire the lock.\n\n            return None\n\n        CRT_S3_PROCESS_LOCK = crt_lock\n\n    return CRT_S3_PROCESS_LOCK\n",
    "line_range": [
        54,
        78
    ],
    "command_specific_fields": {
        "method_name": "acquire_crt_s3_process_lock"
    },
    "language": "python",
    "commit": "da68b50bb5a6b0c342ad0d87f9b1f80ab81dffce",
    "prompt": ""
}