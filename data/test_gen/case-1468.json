{
    "case_id": "case-1468",
    "repo_name": "alicevision/Meshroom",
    "file_path": "meshroom/core/cgroup.py",
    "code_snippet": "\n    return nList\n\n\n# Try to retrieve limits of cores for the current process' cgroup\ndef getCgroupCpuCount():\n\n    # First of all, get pid of process\n    pid = os.getpid()\n\n    # Get cgroup associated with pid\n    filename = f\"/proc/{pid}/cgroup\"\n\n    cgroup = None\n    try:\n        with open(filename, \"r\") as f:\n\n            # cgroup file is a ':' separated table\n            # lookup a line where the second field is \"memory\"\n            lines = f.readlines()\n            for line in lines:\n                tokens = line.rstrip(\"\\r\\n\").split(\":\")\n                if len(tokens) < 3:\n                    continue\n                if tokens[1] == \"cpuset\":\n                    cgroup = tokens[2]\n    except OSError:\n        pass\n\n    if cgroup is None:\n        return -1\n\n    size = -1\n    filename = f\"/sys/fs/cgroup/cpuset/{cgroup}/cpuset.cpus\"\n    try:\n        with open(filename, \"r\") as f:\n            value = f.read().rstrip(\"\\r\\n\")\n            nlist = parseNumericList(value)\n            size = len(nlist)\n\n    except OSError:\n",
    "line_range": [
        60,
        100
    ],
    "command_specific_fields": {
        "method_name": "getCgroupCpuCount"
    },
    "language": "python",
    "commit": "cadac0fa699e086dbf1d0713f67f3ee921f6b949",
    "prompt": ""
}