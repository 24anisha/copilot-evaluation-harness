{
    "case_id": "case-1511",
    "repo_name": "ipython/ipython",
    "file_path": "IPython/core/debugger.py",
    "code_snippet": "        \"\"\"\n        # if we are disabled don't skip\n        if not self._predicates[\"debuggerskip\"]:\n            return False\n\n        return self._cachable_skip(frame)\n\n    @lru_cache(1024)\n    def _cached_one_parent_frame_debuggerskip(self, frame):\n        \"\"\"\n        Cache looking up for DEBUGGERSKIP on parent frame.\n\n        This should speedup walking through deep frame when one of the highest\n        one does have a debugger skip.\n\n        This is likely to introduce fake positive though.\n        \"\"\"\n        while getattr(frame, \"f_back\", None):\n            frame = frame.f_back\n            if self._get_frame_locals(frame).get(DEBUGGERSKIP):\n                return True\n        return None\n\n    @lru_cache(1024)\n    def _cachable_skip(self, frame):\n        # if frame is tagged, skip by default.\n        if DEBUGGERSKIP in frame.f_code.co_varnames:\n            return True\n\n        # if one of the parent frame value set to True skip as well.\n        if self._cached_one_parent_frame_debuggerskip(frame):\n            return True\n\n        return False\n\n    def stop_here(self, frame):\n        if self._is_in_decorator_internal_and_should_skip(frame) is True:\n            return False\n\n        hidden = False\n        if self.skip_hidden:\n            hidden = self._hidden_predicate(frame)\n        if hidden:\n            if self.report_skipped:\n                print(\n",
    "line_range": [
        1013,
        1057
    ],
    "command_specific_fields": {
        "method_name": "do_down"
    },
    "language": "python",
    "commit": "128bd582b9894b8ae9ff577aafe13f5fdb39c3cb",
    "prompt": ""
}