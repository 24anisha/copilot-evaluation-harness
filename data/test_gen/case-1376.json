{
    "case_id": "case-1376",
    "repo_name": "maurosoria/dirsearch",
    "file_path": "lib/core/decorators.py",
    "code_snippet": "\n_lock = threading.Lock()\n_cache: dict[int, tuple[float, Any]] = {}\n_cache_lock = threading.Lock()\n\n# https://mypy.readthedocs.io/en/stable/generics.html#declaring-decorators\nP = ParamSpec(\"P\")\nT = TypeVar(\"T\")\n\n\ndef cached(timeout: int | float = 100) -> Callable[..., Any]:\n    def _cached(func: Callable[P, T]) -> Callable[P, T]:\n        @wraps(func)\n        def with_caching(*args: P.args, **kwargs: P.kwargs) -> T:\n            key = id(func)\n            for arg in args:\n                key += id(arg)\n            for k, v in kwargs.items():\n                key += id(k) + id(v)\n\n            # If it was cached and the cache timeout hasn't been reached\n            if key in _cache and time() - _cache[key][0] < timeout:\n                return _cache[key][1]\n\n            with _cache_lock:\n",
    "line_range": [
        27,
        51
    ],
    "command_specific_fields": {
        "method_name": "cached"
    },
    "language": "python",
    "commit": "59bc9ce43063a1036cf0077f2f1e68883397dac4",
    "prompt": ""
}