{
    "case_id": "case-1489",
    "repo_name": "google/yapf",
    "file_path": "yapf/pytree/split_penalty.py",
    "code_snippet": "      _SetStronglyConnected(node.children[-1])\n\n\n\n  def Visit_arglist(self, node):  # pylint: disable=invalid-name\n\n    # arglist ::= argument (',' argument)* [',']\n\n    if node.children[0].type == grammar_token.STAR:\n\n      # Python 3 treats a star expression as a specific expression type.\n\n      # Process it in that method.\n\n      self.Visit_star_expr(node)\n\n      return\n\n\n\n    self.DefaultNodeVisit(node)\n\n\n\n    for index in range(1, len(node.children)):\n\n      child = node.children[index]\n\n      if isinstance(child, pytree.Leaf) and child.value == ',':\n\n        _SetUnbreakable(child)\n\n\n\n    for child in node.children:\n\n      if pytree_utils.NodeName(child) == 'atom':\n\n        _IncreasePenalty(child, CONNECTED)\n",
    "line_range": [
        144,
        163
    ],
    "command_specific_fields": {
        "method_name": "Visit_arglist"
    },
    "language": "python",
    "commit": "1afbf7112ae61a467276c9401b3c113e6f676d0f",
    "prompt": ""
}