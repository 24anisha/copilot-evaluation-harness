{
    "case_id": "case-0",
    "repo_name": "lra/mackup",
    "file_path": "mackup/application.py",
    "code_snippet": "        for filename in self.files:\n            (home_filepath, mackup_filepath) = self.getFilepaths(filename)\n\n            \n            if (os.path.isfile(home_filepath) or os.path.isdir(home_filepath)) and not (\n                os.path.islink(home_filepath)\n                and (os.path.isfile(mackup_filepath) or os.path.isdir(mackup_filepath))\n                and os.path.samefile(home_filepath, mackup_filepath)\n            ):\n                if self.verbose:\n                    print(\n                        \"Backing up\\n  {}\\n  to\\n  {} ...\".format(\n                            home_filepath, mackup_filepath\n                        )\n                    )\n                else:\n                    print(\"Backing up {} ...\".format(filename))\n\n                if self.dry_run:\n                    continue\n\n                \n                if os.path.exists(mackup_filepath):\n                    \n                    if os.path.isfile(mackup_filepath):\n                        file_type = \"file\"\n                    elif os.path.isdir(mackup_filepath):\n                        file_type = \"folder\"\n                    elif os.path.islink(mackup_filepath):\n                        file_type = \"link\"\n                    else:\n                        raise ValueError(\"Unsupported file: {}\".format(mackup_filepath))\n\n                    \n                    if utils.confirm(\n                        \"A {} named {} already exists in the\"\n                        \" backup.\\nAre you sure that you want to\"\n                        \" replace it?\".format(file_type, mackup_filepath)\n                    ):\n                        \n                        utils.delete(mackup_filepath)\n                        \n                        utils.copy(home_filepath, mackup_filepath)\n                        \n                        utils.delete(home_filepath)\n                        \n                        utils.link(mackup_filepath, home_filepath)\n                else:\n                    \n                    utils.copy(home_filepath, mackup_filepath)\n                    \n                    utils.delete(home_filepath)\n                    \n                    utils.link(mackup_filepath, home_filepath)\n            elif self.verbose:\n                if os.path.exists(home_filepath):\n                    print(\n                        \"Doing nothing\\n  {}\\n  \"\n                        \"is already backed up to\\n  {}\".format(\n                            home_filepath, mackup_filepath\n                        )\n                    )\n                elif os.path.islink(home_filepath):\n                    print(\n                        \"Doing nothing\\n  {}\\n  \"\n                        \"is a broken link, you might want to fix it.\".format(\n                            home_filepath\n                        )\n                    )\n                else:\n                    print(\"Doing nothing\\n  {}\\n  does not exist\".format(home_filepath))",
    "line_range": [
        46,
        136
    ],
    "command_specific_fields": {
        "method_name": "backup"
    },
    "language": "python",
    "commit": "0def08b8543ac3a436257cce4426a5b109b31a2d"
}