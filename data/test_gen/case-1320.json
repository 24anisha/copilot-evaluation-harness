{
    "case_id": "case-1320",
    "repo_name": "lra/mackup",
    "file_path": "mackup/application.py",
    "code_snippet": "        )\n\n\n\n    def backup(self):\n\n        \"\"\"\n\n        Backup the application config files.\n\n\n\n        Algorithm:\n\n            if exists home/file\n\n              if home/file is a real file\n\n                if exists mackup/file\n\n                  are you sure?\n\n                  if sure\n\n                    rm mackup/file\n\n                    mv home/file mackup/file\n\n                    link mackup/file home/file\n\n                else\n\n                  mv home/file mackup/file\n\n                  link mackup/file home/file\n\n        \"\"\"\n\n        # For each file used by the application\n\n        for filename in self.files:\n\n            (home_filepath, mackup_filepath) = self.getFilepaths(filename)\n\n\n\n            # If the file exists and is not already a link pointing to Mackup\n\n            if (os.path.isfile(home_filepath) or os.path.isdir(home_filepath)) and not (\n\n                os.path.islink(home_filepath)\n\n                and (os.path.isfile(mackup_filepath) or os.path.isdir(mackup_filepath))\n\n                and os.path.samefile(home_filepath, mackup_filepath)\n\n            ):\n\n                if self.verbose:\n\n                    print(\n\n                        \"Backing up\\n  {}\\n  to\\n  {} ...\".format(\n\n                            home_filepath, mackup_filepath\n\n                        )\n\n                    )\n\n                else:\n\n                    print(\"Backing up {} ...\".format(filename))\n\n\n\n                if self.dry_run:\n\n                    continue\n\n\n\n                # Check if we already have a backup\n\n                if os.path.exists(mackup_filepath):\n\n                    # Name it right\n\n                    if os.path.isfile(mackup_filepath):\n\n                        file_type = \"file\"\n\n                    elif os.path.isdir(mackup_filepath):\n\n                        file_type = \"folder\"\n\n                    elif os.path.islink(mackup_filepath):\n\n                        file_type = \"link\"\n\n                    else:\n\n                        raise ValueError(\"Unsupported file: {}\".format(mackup_filepath))\n\n\n\n                    # Ask the user if he really wants to replace it\n\n                    if utils.confirm(\n\n                        \"A {} named {} already exists in the\"\n\n                        \" backup.\\nAre you sure that you want to\"\n\n                        \" replace it?\".format(file_type, mackup_filepath)\n\n                    ):\n\n                        # Delete the file in Mackup\n\n                        utils.delete(mackup_filepath)\n\n                        # Copy the file\n\n                        utils.copy(home_filepath, mackup_filepath)\n\n                        # Delete the file in the home\n\n                        utils.delete(home_filepath)\n\n                        # Link the backuped file to its original place\n\n                        utils.link(mackup_filepath, home_filepath)\n\n                else:\n\n                    # Copy the file\n\n                    utils.copy(home_filepath, mackup_filepath)\n\n                    # Delete the file in the home\n\n                    utils.delete(home_filepath)\n\n                    # Link the backuped file to its original place\n\n                    utils.link(mackup_filepath, home_filepath)\n\n            elif self.verbose:\n\n                if os.path.exists(home_filepath):\n\n                    print(\n\n                        \"Doing nothing\\n  {}\\n  \"\n\n                        \"is already backed up to\\n  {}\".format(\n\n                            home_filepath, mackup_filepath\n\n                        )\n\n                    )\n\n                elif os.path.islink(home_filepath):\n\n                    print(\n\n                        \"Doing nothing\\n  {}\\n  \"\n\n                        \"is a broken link, you might want to fix it.\".format(\n\n                            home_filepath\n\n                        )\n\n                    )\n\n                else:\n\n                    print(\"Doing nothing\\n  {}\\n  does not exist\".format(home_filepath))\n",
    "line_range": [
        46,
        136
    ],
    "command_specific_fields": {
        "method_name": "backup"
    },
    "language": "python",
    "commit": "0def08b8543ac3a436257cce4426a5b109b31a2d",
    "prompt": ""
}