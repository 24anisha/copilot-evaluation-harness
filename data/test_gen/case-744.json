{
    "case_id": "case-744",
    "repo_name": "KillianLucas/open-interpreter",
    "file_path": "interpreter/core/llm/run_tool_calling_llm.py",
    "code_snippet": "\n\n\n\ndef process_messages(messages):\n\n    processed_messages = []\n\n    last_tool_id = 0\n\n\n\n    i = 0\n\n    while i < len(messages):\n\n        message = messages[i]\n\n\n\n        if message.get(\"function_call\"):\n\n            last_tool_id += 1\n\n            tool_id = f\"toolu_{last_tool_id}\"\n\n\n\n            # Convert function_call to tool_calls\n\n            function = message.pop(\"function_call\")\n\n            message[\"tool_calls\"] = [\n\n                {\"id\": tool_id, \"type\": \"function\", \"function\": function}\n\n            ]\n\n            processed_messages.append(message)\n\n\n\n            # Process the next message if it's a function response\n\n            if i + 1 < len(messages) and messages[i + 1].get(\"role\") == \"function\":\n\n                next_message = messages[i + 1].copy()\n\n                next_message[\"role\"] = \"tool\"\n\n                next_message[\"tool_call_id\"] = tool_id\n\n                processed_messages.append(next_message)\n\n                i += 1  # Skip the next message as we've already processed it\n\n            else:\n\n                # Add an empty tool response if there isn't one\n\n                processed_messages.append(\n\n                    {\"role\": \"tool\", \"tool_call_id\": tool_id, \"content\": \"\"}\n\n                )\n\n\n\n        elif message.get(\"role\") == \"function\":\n\n            # This handles orphaned function responses\n\n            last_tool_id += 1\n\n            tool_id = f\"toolu_{last_tool_id}\"\n\n\n\n            # Add a tool call before this orphaned tool response\n\n            processed_messages.append(\n\n                {\n\n                    \"role\": \"assistant\",\n\n                    \"tool_calls\": [\n\n                        {\n\n                            \"id\": tool_id,\n\n                            \"type\": \"function\",\n\n                            \"function\": {\n\n                                \"name\": \"execute\",\n\n                                \"arguments\": \"# Automated tool call to fetch more output, triggered by the user.\",\n\n                            },\n\n                        }\n\n                    ],\n\n                }\n\n            )\n\n\n\n            # Process the function response\n\n            message[\"role\"] = \"tool\"\n\n            message[\"tool_call_id\"] = tool_id\n\n            processed_messages.append(message)\n\n\n\n        else:\n\n            # For non-tool-related messages, just add them as is\n\n            processed_messages.append(message)\n\n\n\n        i += 1\n\n\n\n    return processed_messages\n",
    "line_range": [
        28,
        95
    ],
    "command_specific_fields": {
        "method_name": "process_messages"
    },
    "language": "python",
    "commit": "33d6e55e2f33509d62749b8f0466db82403170eb",
    "prompt": ""
}