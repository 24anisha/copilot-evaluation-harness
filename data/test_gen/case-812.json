{
    "case_id": "case-812",
    "repo_name": "facebookresearch/detr",
    "file_path": "datasets/coco_eval.py",
    "code_snippet": "\n\ndef evaluate(self):\n\n    '''\n\n    Run per image evaluation on given images and store results (a list of dict) in self.evalImgs\n\n    :return: None\n\n    '''\n\n    # tic = time.time()\n\n    # print('Running per image evaluation...')\n\n    p = self.params\n\n    # add backward compatibility if useSegm is specified in params\n\n    if p.useSegm is not None:\n\n        p.iouType = 'segm' if p.useSegm == 1 else 'bbox'\n\n        print('useSegm (deprecated) is not None. Running {} evaluation'.format(p.iouType))\n\n    # print('Evaluate annotation type *{}*'.format(p.iouType))\n\n    p.imgIds = list(np.unique(p.imgIds))\n\n    if p.useCats:\n\n        p.catIds = list(np.unique(p.catIds))\n\n    p.maxDets = sorted(p.maxDets)\n\n    self.params = p\n\n\n\n    self._prepare()\n\n    # loop through images, area range, max detection number\n\n    catIds = p.catIds if p.useCats else [-1]\n\n\n\n    if p.iouType == 'segm' or p.iouType == 'bbox':\n\n        computeIoU = self.computeIoU\n\n    elif p.iouType == 'keypoints':\n\n        computeIoU = self.computeOks\n\n    self.ious = {\n\n        (imgId, catId): computeIoU(imgId, catId)\n\n        for imgId in p.imgIds\n\n        for catId in catIds}\n\n\n\n    evaluateImg = self.evaluateImg\n\n    maxDet = p.maxDets[-1]\n\n    evalImgs = [\n\n        evaluateImg(imgId, catId, areaRng, maxDet)\n\n        for catId in catIds\n\n        for areaRng in p.areaRng\n\n        for imgId in p.imgIds\n\n    ]\n\n    # this is NOT in the pycocotools code, but could be done outside\n\n    evalImgs = np.asarray(evalImgs).reshape(len(catIds), len(p.areaRng), len(p.imgIds))\n\n    self._paramsEval = copy.deepcopy(self.params)\n\n    # toc = time.time()\n\n    # print('DONE (t={:0.2f}s).'.format(toc-tic))\n\n    return p.imgIds, evalImgs\n",
    "line_range": [
        206,
        253
    ],
    "command_specific_fields": {
        "method_name": "evaluate"
    },
    "language": "python",
    "commit": "29901c51d7fe8712168b8d0d64351170bc0f83e0",
    "prompt": ""
}