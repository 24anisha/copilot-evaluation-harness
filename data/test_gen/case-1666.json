{
    "case_id": "case-1666",
    "repo_name": "Zulko/moviepy",
    "file_path": "moviepy/video/fx/margin.py",
    "code_snippet": "from moviepy.Clip import Clip\nfrom moviepy.Effect import Effect\nfrom moviepy.video.VideoClip import ImageClip\n\n\n@dataclass\nclass Margin(Effect):\n    \"\"\"Draws an external margin all around the frame.\n\n    Parameters\n    ----------\n\n    margin_size : int, optional\n      If not ``None``, then the new clip has a margin size of\n      size ``margin_size`` in pixels on the left, right, top, and bottom.\n\n    left : int, optional\n      If ``margin_size=None``, margin size for the new clip in left direction.\n\n    right : int, optional\n      If ``margin_size=None``, margin size for the new clip in right direction.\n\n    top : int, optional\n      If ``margin_size=None``, margin size for the new clip in top direction.\n\n    bottom : int, optional\n      If ``margin_size=None``, margin size for the new clip in bottom direction.\n\n    color : tuple, optional\n      Color of the margin.\n\n    opacity : float, optional\n      Opacity of the margin. Setting this value to 0 yields transparent margins.\n    \"\"\"\n\n    margin_size: int = None\n    left: int = 0\n    right: int = 0\n    top: int = 0\n    bottom: int = 0\n    color: tuple = (0, 0, 0)\n    opacity: float = 1.0\n\n    def add_margin(self, clip: Clip):\n        \"\"\"Add margins to the clip.\"\"\"\n        if (self.opacity != 1.0) and (clip.mask is None) and not (clip.is_mask):\n            clip = clip.with_mask()\n\n        if self.margin_size is not None:\n            self.left = self.right = self.top = self.bottom = self.margin_size\n\n        def make_bg(w, h):\n            new_w, new_h = w + self.left + self.right, h + self.top + self.bottom\n            if clip.is_mask:\n                shape = (new_h, new_w)\n                bg = np.tile(self.opacity, (new_h, new_w)).astype(float).reshape(shape)\n            else:\n                shape = (new_h, new_w, 3)\n                bg = np.tile(self.color, (new_h, new_w)).reshape(shape)\n            return bg\n\n        if isinstance(clip, ImageClip):\n            im = make_bg(clip.w, clip.h)\n            im[self.top : self.top + clip.h, self.left : self.left + clip.w] = clip.img\n            return clip.image_transform(lambda pic: im)\n\n        else:\n\n            def filter(get_frame, t):\n                pic = get_frame(t)\n                h, w = pic.shape[:2]\n                im = make_bg(w, h)\n",
    "line_range": [
        5,
        76
    ],
    "command_specific_fields": {
        "method_name": "margin"
    },
    "language": "python",
    "commit": "0f6f6d4d9b96c69d109975549fe6293931f1a19d",
    "prompt": ""
}