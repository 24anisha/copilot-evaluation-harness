{
    "case_id": "case-1666",
    "repo_name": "Zulko/moviepy",
    "file_path": "moviepy/video/fx/margin.py",
    "code_snippet": "\n\n\n\n@apply_to_mask\n\ndef margin(\n\n    clip,\n\n    margin_size=None,\n\n    left=0,\n\n    right=0,\n\n    top=0,\n\n    bottom=0,\n\n    color=(0, 0, 0),\n\n    opacity=1.0,\n\n):\n\n    \"\"\"\n\n    Draws an external margin all around the frame.\n\n\n\n    Parameters\n\n    ----------\n\n\n\n    margin_size : int, optional\n\n      If not ``None``, then the new clip has a margin size of\n\n      size ``margin_size`` in pixels on the left, right, top, and bottom.\n\n\n\n    left : int, optional\n\n      If ``margin_size=None``, margin size for the new clip in left direction.\n\n\n\n    right : int, optional\n\n      If ``margin_size=None``, margin size for the new clip in right direction.\n\n\n\n    top : int, optional\n\n      If ``margin_size=None``, margin size for the new clip in top direction.\n\n\n\n    bottom : int, optional\n\n      If ``margin_size=None``, margin size for the new clip in bottom direction.\n\n\n\n    color : tuple, optional\n\n      Color of the margin.\n\n\n\n    opacity : float, optional\n\n      Opacity of the margin. Setting this value to 0 yields transparent margins.\n\n    \"\"\"\n\n    if (opacity != 1.0) and (clip.mask is None) and not (clip.is_mask):\n\n        clip = clip.add_mask()\n\n\n\n    if margin_size is not None:\n\n        left = right = top = bottom = margin_size\n\n\n\n    def make_bg(w, h):\n\n        new_w, new_h = w + left + right, h + top + bottom\n\n        if clip.is_mask:\n\n            shape = (new_h, new_w)\n\n            bg = np.tile(opacity, (new_h, new_w)).astype(float).reshape(shape)\n\n        else:\n\n            shape = (new_h, new_w, 3)\n\n            bg = np.tile(color, (new_h, new_w)).reshape(shape)\n\n        return bg\n\n\n\n    if isinstance(clip, ImageClip):\n\n        im = make_bg(clip.w, clip.h)\n\n        im[top : top + clip.h, left : left + clip.w] = clip.img\n\n        return clip.image_transform(lambda pic: im)\n\n\n\n    else:\n\n\n\n        def filter(get_frame, t):\n\n            pic = get_frame(t)\n\n            h, w = pic.shape[:2]\n\n            im = make_bg(w, h)\n\n            im[top : top + h, left : left + w] = pic\n\n            return im\n\n\n\n        return clip.transform(filter)\n",
    "line_range": [
        5,
        76
    ],
    "command_specific_fields": {
        "method_name": "margin"
    },
    "language": "python",
    "commit": "0f6f6d4d9b96c69d109975549fe6293931f1a19d",
    "prompt": ""
}