{
    "case_id": "case-907",
    "repo_name": "networkx/networkx",
    "file_path": "networkx/generators/random_graphs.py",
    "code_snippet": "\n\n@py_random_state(4)\n\n@nx._dispatchable(graphs=None, returns_graph=True)\n\ndef connected_watts_strogatz_graph(n, k, p, tries=100, seed=None):\n\n    \"\"\"Returns a connected Watts\u2013Strogatz small-world graph.\n\n\n\n    Attempts to generate a connected graph by repeated generation of\n\n    Watts\u2013Strogatz small-world graphs.  An exception is raised if the maximum\n\n    number of tries is exceeded.\n\n\n\n    Parameters\n\n    ----------\n\n    n : int\n\n        The number of nodes\n\n    k : int\n\n        Each node is joined with its `k` nearest neighbors in a ring\n\n        topology.\n\n    p : float\n\n        The probability of rewiring each edge\n\n    tries : int\n\n        Number of attempts to generate a connected graph.\n\n    seed : integer, random_state, or None (default)\n\n        Indicator of random number generation state.\n\n        See :ref:`Randomness<randomness>`.\n\n\n\n    Notes\n\n    -----\n\n    First create a ring over $n$ nodes [1]_.  Then each node in the ring is joined\n\n    to its $k$ nearest neighbors (or $k - 1$ neighbors if $k$ is odd).\n\n    Then shortcuts are created by replacing some edges as follows: for each\n\n    edge $(u, v)$ in the underlying \"$n$-ring with $k$ nearest neighbors\"\n\n    with probability $p$ replace it with a new edge $(u, w)$ with uniformly\n\n    random choice of existing node $w$.\n\n    The entire process is repeated until a connected graph results.\n\n\n\n    See Also\n\n    --------\n\n    newman_watts_strogatz_graph\n\n    watts_strogatz_graph\n\n\n\n    References\n\n    ----------\n\n    .. [1] Duncan J. Watts and Steven H. Strogatz,\n\n       Collective dynamics of small-world networks,\n\n       Nature, 393, pp. 440--442, 1998.\n\n    \"\"\"\n\n    for i in range(tries):\n\n        # seed is an RNG so should change sequence each call\n\n        G = watts_strogatz_graph(n, k, p, seed)\n\n        if nx.is_connected(G):\n\n            return G\n\n    raise nx.NetworkXError(\"Maximum number of tries exceeded\")\n",
    "line_range": [
        438,
        490
    ],
    "command_specific_fields": {
        "method_name": "connected_watts_strogatz_graph"
    },
    "language": "python",
    "commit": "89718e0514bded93ded5b00aed755a4474c1dc6f",
    "prompt": ""
}