{
    "case_id": "case-907",
    "repo_name": "networkx/networkx",
    "file_path": "networkx/generators/random_graphs.py",
    "code_snippet": "        G = nx.complete_graph(n, create_using)\n        return G\n\n    G = nx.empty_graph(n, create_using=create_using)\n    nodes = list(range(n))  # nodes are labeled 0 to n-1\n    # connect each node to k/2 neighbors\n    for j in range(1, k // 2 + 1):\n        targets = nodes[j:] + nodes[0:j]  # first j nodes are now last in list\n        G.add_edges_from(zip(nodes, targets))\n    # rewire edges from each node\n    # loop over all nodes in order (label) and neighbors in order (distance)\n    # no self loops or multiple edges allowed\n    for j in range(1, k // 2 + 1):  # outer loop is neighbors\n        targets = nodes[j:] + nodes[0:j]  # first j nodes are now last in list\n        # inner loop in node order\n        for u, v in zip(nodes, targets):\n            if seed.random() < p:\n                w = seed.choice(nodes)\n                # Enforce no self-loops or multiple edges\n                while w == u or G.has_edge(u, w):\n                    w = seed.choice(nodes)\n                    if G.degree(u) >= n - 1:\n                        break  # skip this rewiring\n                else:\n                    G.remove_edge(u, v)\n                    G.add_edge(u, w)\n    return G\n\n\n@py_random_state(4)\n@nx._dispatchable(graphs=None, returns_graph=True)\ndef connected_watts_strogatz_graph(n, k, p, tries=100, seed=None, *, create_using=None):\n    \"\"\"Returns a connected Watts\u2013Strogatz small-world graph.\n\n    Attempts to generate a connected graph by repeated generation of\n    Watts\u2013Strogatz small-world graphs.  An exception is raised if the maximum\n    number of tries is exceeded.\n\n    Parameters\n    ----------\n    n : int\n        The number of nodes\n    k : int\n        Each node is joined with its `k` nearest neighbors in a ring\n        topology.\n    p : float\n        The probability of rewiring each edge\n    tries : int\n        Number of attempts to generate a connected graph.\n    seed : integer, random_state, or None (default)\n        Indicator of random number generation state.\n        See :ref:`Randomness<randomness>`.\n    create_using : Graph constructor, optional (default=nx.Graph)\n",
    "line_range": [
        438,
        490
    ],
    "command_specific_fields": {
        "method_name": "connected_watts_strogatz_graph"
    },
    "language": "python",
    "commit": "89718e0514bded93ded5b00aed755a4474c1dc6f",
    "prompt": ""
}