{
    "case_id": "case-662",
    "repo_name": "pallets/click",
    "file_path": "src/click/types.py",
    "code_snippet": "            )\n\n    def __repr__(self) -> str:\n        return \"UUID\"\n\n\nclass File(ParamType):\n    \"\"\"Declares a parameter to be a file for reading or writing.  The file\n    is automatically closed once the context tears down (after the command\n    finished working).\n\n    Files can be opened for reading or writing.  The special value ``-``\n    indicates stdin or stdout depending on the mode.\n\n    By default, the file is opened for reading text data, but it can also be\n    opened in binary mode or for writing.  The encoding parameter can be used\n    to force a specific encoding.\n\n    The `lazy` flag controls if the file should be opened immediately or upon\n    first IO. The default is to be non-lazy for standard input and output\n    streams as well as files opened for reading, `lazy` otherwise. When opening a\n    file lazily for reading, it is still opened temporarily for validation, but\n    will not be held open until first IO. lazy is mainly useful when opening\n    for writing to avoid creating the file until it is needed.\n\n    Starting with Click 2.0, files can also be opened atomically in which\n    case all writes go into a separate file in the same folder and upon\n    completion the file will be moved over to the original location.  This\n    is useful if a file regularly read by other users is modified.\n\n    See :ref:`file-args` for more information.\n    \"\"\"\n\n    name = \"filename\"\n    envvar_list_splitter: t.ClassVar[str] = os.path.pathsep\n\n    def __init__(\n        self,\n        mode: str = \"r\",\n        encoding: str | None = None,\n        errors: str | None = \"strict\",\n        lazy: bool | None = None,\n        atomic: bool = False,\n    ) -> None:\n",
    "line_range": [
        704,
        747
    ],
    "command_specific_fields": {
        "method_name": "convert"
    },
    "language": "python",
    "commit": "14f735cf59618941cf2930e633eb77651b1dc7cb",
    "prompt": ""
}