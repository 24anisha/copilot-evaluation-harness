{
    "case_id": "case-697",
    "repo_name": "dbader/schedule",
    "file_path": "schedule/__init__.py",
    "code_snippet": "        if self.unit not in (\"days\", \"hours\", \"minutes\") and not self.start_day:\n            raise ScheduleValueError(\n                \"Invalid unit (valid units are `days`, `hours`, and `minutes`)\"\n            )\n\n        if tz is not None:\n            import pytz\n\n            if isinstance(tz, str):\n                self.at_time_zone = pytz.timezone(tz)  \n            elif isinstance(tz, pytz.BaseTzInfo):\n                self.at_time_zone = tz\n            else:\n                raise ScheduleValueError(\n                    \"Timezone must be string or pytz.timezone object\"\n                )\n\n        if not isinstance(time_str, str):\n            raise TypeError(\"at() should be passed a string\")\n        if self.unit == \"days\" or self.start_day:\n            if not re.match(r\"^[0-2]\\d:[0-5]\\d(:[0-5]\\d)?$\", time_str):\n                raise ScheduleValueError(\n                    \"Invalid time format for a daily job (valid format is HH:MM(:SS)?)\"\n                )\n        if self.unit == \"hours\":\n            if not re.match(r\"^([0-5]\\d)?:[0-5]\\d$\", time_str):\n                raise ScheduleValueError(\n                    \"Invalid time format for an hourly job (valid format is (MM)?:SS)\"\n                )\n\n        if self.unit == \"minutes\":\n            if not re.match(r\"^:[0-5]\\d$\", time_str):\n                raise ScheduleValueError(\n                    \"Invalid time format for a minutely job (valid format is :SS)\"\n                )\n        time_values = time_str.split(\":\")\n        hour: Union[str, int]\n        minute: Union[str, int]\n        second: Union[str, int]\n        if len(time_values) == 3:\n            hour, minute, second = time_values\n        elif len(time_values) == 2 and self.unit == \"minutes\":\n            hour = 0\n            minute = 0\n            _, second = time_values\n        elif len(time_values) == 2 and self.unit == \"hours\" and len(time_values[0]):\n            hour = 0\n            minute, second = time_values\n        else:\n            hour, minute = time_values\n            second = 0\n        if self.unit == \"days\" or self.start_day:\n            hour = int(hour)\n            if not (0 <= hour <= 23):\n                raise ScheduleValueError(\n                    \"Invalid number of hours ({} is not between 0 and 23)\"\n                )\n        elif self.unit == \"hours\":\n            hour = 0\n        elif self.unit == \"minutes\":\n            hour = 0\n            minute = 0\n        hour = int(hour)\n        minute = int(minute)\n        second = int(second)\n        self.at_time = datetime.time(hour, minute, second)\n        return self",
    "line_range": [
        469,
        559
    ],
    "command_specific_fields": {
        "method_name": "at"
    },
    "language": "python",
    "commit": "82a43db1b938d8fdf60103bd41f329e06c8d3651",
    "prompt": ""
}