{
    "case_id": "case-1309",
    "repo_name": "python-hyper/rfc3986",
    "file_path": "src/rfc3986/validators.py",
    "code_snippet": "\n\n\n\ndef ensure_components_are_valid(\n\n    uri: \"uri.URIReference\",\n\n    validated_components: t.List[str],\n\n) -> None:\n\n    \"\"\"Assert that all components are valid in the URI.\"\"\"\n\n    invalid_components: set[str] = set()\n\n    for component in validated_components:\n\n        if component in _SUBAUTHORITY_VALIDATORS:\n\n            if not subauthority_component_is_valid(uri, component):\n\n                invalid_components.add(component)\n\n            # Python's peephole optimizer means that while this continue *is*\n\n            # actually executed, coverage.py cannot detect that. See also,\n\n            # https://bitbucket.org/ned/coveragepy/issues/198/continue-marked-as-not-covered\n\n            continue  # nocov: Python 2.7, 3.3, 3.4\n\n\n\n        validator = _COMPONENT_VALIDATORS[component]\n\n        if not validator(getattr(uri, component)):\n\n            invalid_components.add(component)\n\n\n\n    if invalid_components:\n\n        raise exceptions.InvalidComponentsError(uri, *invalid_components)\n",
    "line_range": [
        454,
        476
    ],
    "command_specific_fields": {
        "method_name": "ensure_components_are_valid"
    },
    "language": "python",
    "commit": "75e77baed146976442bb11d4adda0eb322c6a6b5",
    "prompt": ""
}