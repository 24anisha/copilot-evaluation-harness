{
    "case_id": "case-1755",
    "repo_name": "dbcli/mycli",
    "file_path": "mycli/sqlcompleter.py",
    "code_snippet": "\n\n    @staticmethod\n\n    def find_matches(text, collection, start_only=False, fuzzy=True, casing=None):\n\n        \"\"\"Find completion matches for the given text.\n\n\n\n        Given the user's input text and a collection of available\n\n        completions, find completions matching the last word of the\n\n        text.\n\n\n\n        If `start_only` is True, the text will match an available\n\n        completion only at the beginning. Otherwise, a completion is\n\n        considered a match if the text appears anywhere within it.\n\n\n\n        yields prompt_toolkit Completion instances for any matches found\n\n        in the collection of available completions.\n\n        \"\"\"\n\n        last = last_word(text, include='most_punctuations')\n\n        text = last.lower()\n\n\n\n        completions = []\n\n\n\n        if fuzzy:\n\n            regex = '.*?'.join(map(escape, text))\n\n            pat = compile('(%s)' % regex)\n\n            for item in collection:\n\n                r = pat.search(item.lower())\n\n                if r:\n\n                    completions.append((len(r.group()), r.start(), item))\n\n        else:\n\n            match_end_limit = len(text) if start_only else None\n\n            for item in collection:\n\n                match_point = item.lower().find(text, 0, match_end_limit)\n\n                if match_point >= 0:\n\n                    completions.append((len(text), match_point, item))\n\n\n\n        if casing == 'auto':\n\n            casing = 'lower' if last and last[-1].islower() else 'upper'\n\n\n\n        def apply_case(kw):\n\n            if casing == 'upper':\n\n                return kw.upper()\n\n            return kw.lower()\n\n\n\n        return (Completion(z if casing is None else apply_case(z), -len(text))\n\n                for x, y, z in completions)\n",
    "line_range": [
        355,
        400
    ],
    "command_specific_fields": {
        "method_name": "find_matches"
    },
    "language": "python",
    "commit": "af5a17d980450e184cfc25e56e0e91a1389d378d",
    "prompt": ""
}