{
    "case_id": "case-30",
    "repo_name": "winstonjs/winston",
    "file_path": "lib/winston/logger.js",
    "code_snippet": "  }\n\n  /* eslint-disable valid-jsdoc */\n  /**\n   * Helper method to get the highest logging level associated with a logger\n   *\n   * @returns { number | null } - The highest configured logging level, null\n   * for invalid configuration\n   */\n  getHighestLogLevel() {\n    // This can be null, if this.level has an invalid value\n    const configuredLevelValue = getLevelValue(this.levels, this.level);\n\n    // If there are no transports, return the level configured at the logger level\n    if (!this.transports || this.transports.length === 0) {\n      return configuredLevelValue;\n    }\n\n    return this.transports.reduce((max, transport) => {\n      const levelValue = getLevelValue(this.levels, transport.level);\n      return levelValue !== null && levelValue > max ? levelValue : max;\n    }, configuredLevelValue);\n  }\n\n  isLevelEnabled(level) {\n    const givenLevelValue = getLevelValue(this.levels, level);\n",
    "line_range": [
        150,
        175
    ],
    "command_specific_fields": {
        "method_name": "isLevelEnabled"
    },
    "language": "javascript",
    "commit": "17192754733c40d261d76b690d84d4d2608c05f1",
    "prompt": ""
}