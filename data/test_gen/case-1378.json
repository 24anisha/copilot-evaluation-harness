{
    "case_id": "case-1378",
    "repo_name": "dbcli/mycli",
    "file_path": "mycli/packages/parseutils.py",
    "code_snippet": "    return False\n\n\n\ndef extract_from_part(parsed, stop_at_punctuation=True):\n\n    tbl_prefix_seen = False\n\n    for item in parsed.tokens:\n\n        if tbl_prefix_seen:\n\n            if is_subselect(item):\n\n                for x in extract_from_part(item, stop_at_punctuation):\n\n                    yield x\n\n            elif stop_at_punctuation and item.ttype is Punctuation:\n\n                return\n\n            # Multiple JOINs in the same query won't work properly since\n\n            # \"ON\" is a keyword and will trigger the next elif condition.\n\n            # So instead of stooping the loop when finding an \"ON\" skip it\n\n            # eg: 'SELECT * FROM abc JOIN def ON abc.id = def.abc_id JOIN ghi'\n\n            elif item.ttype is Keyword and item.value.upper() == 'ON':\n\n                tbl_prefix_seen = False\n\n                continue\n\n            # An incomplete nested select won't be recognized correctly as a\n\n            # sub-select. eg: 'SELECT * FROM (SELECT id FROM user'. This causes\n\n            # the second FROM to trigger this elif condition resulting in a\n\n            # StopIteration. So we need to ignore the keyword if the keyword\n\n            # FROM.\n\n            # Also 'SELECT * FROM abc JOIN def' will trigger this elif\n\n            # condition. So we need to ignore the keyword JOIN and its variants\n\n            # INNER JOIN, FULL OUTER JOIN, etc.\n\n            elif item.ttype is Keyword and (\n\n                    not item.value.upper() == 'FROM') and (\n\n                    not item.value.upper().endswith('JOIN')):\n\n                return\n\n            else:\n\n                yield item\n\n        elif ((item.ttype is Keyword or item.ttype is Keyword.DML) and\n\n                item.value.upper() in ('COPY', 'FROM', 'INTO', 'UPDATE', 'TABLE', 'JOIN',)):\n\n            tbl_prefix_seen = True\n\n        # 'SELECT a, FROM abc' will detect FROM as part of the column list.\n\n        # So this check here is necessary.\n\n        elif isinstance(item, IdentifierList):\n\n            for identifier in item.get_identifiers():\n\n                if (identifier.ttype is Keyword and\n\n                        identifier.value.upper() == 'FROM'):\n\n                    tbl_prefix_seen = True\n\n                    break\n",
    "line_range": [
        73,
        115
    ],
    "command_specific_fields": {
        "method_name": "extract_from_part"
    },
    "language": "python",
    "commit": "af5a17d980450e184cfc25e56e0e91a1389d378d",
    "prompt": ""
}