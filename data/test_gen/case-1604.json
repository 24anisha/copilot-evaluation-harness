{
    "case_id": "case-0",
    "repo_name": "wkentaro/labelme",
    "file_path": "labelme/app.py",
    "code_snippet": "        if filename in self.imageList and (\n            self.fileListWidget.currentRow() != self.imageList.index(filename)\n        ):\n            self.fileListWidget.setCurrentRow(self.imageList.index(filename))\n            self.fileListWidget.repaint()\n            return\n\n        self.resetState()\n        self.canvas.setEnabled(False)\n        if filename is None:\n            filename = self.settings.value(\"filename\", \"\")\n        filename = str(filename)\n        if not QtCore.QFile.exists(filename):\n            self.errorMessage(\n                self.tr(\"Error opening file\"),\n                self.tr(\"No such file: <b>%s</b>\") % filename,\n            )\n            return False\n        \n        self.status(str(self.tr(\"Loading %s...\")) % osp.basename(str(filename)))\n        label_file = osp.splitext(filename)[0] + \".json\"\n        if self.output_dir:\n            label_file_without_path = osp.basename(label_file)\n            label_file = osp.join(self.output_dir, label_file_without_path)\n        if QtCore.QFile.exists(label_file) and LabelFile.is_label_file(label_file):\n            try:\n                self.labelFile = LabelFile(label_file)\n            except LabelFileError as e:\n                self.errorMessage(\n                    self.tr(\"Error opening file\"),\n                    self.tr(\n                        \"<p><b>%s</b></p>\"\n                        \"<p>Make sure <i>%s</i> is a valid label file.\"\n                    )\n                    % (e, label_file),\n                )\n                self.status(self.tr(\"Error reading %s\") % label_file)\n                return False\n            self.imageData = self.labelFile.imageData\n            self.imagePath = osp.join(\n                osp.dirname(label_file),\n                self.labelFile.imagePath,\n            )\n            self.otherData = self.labelFile.otherData\n        else:\n            self.imageData = LabelFile.load_image_file(filename)\n            if self.imageData:\n                self.imagePath = filename\n            self.labelFile = None\n        image = QtGui.QImage.fromData(self.imageData)\n\n        if image.isNull():\n            formats = [\n                \"*.{}\".format(fmt.data().decode())\n                for fmt in QtGui.QImageReader.supportedImageFormats()\n            ]\n            self.errorMessage(\n                self.tr(\"Error opening file\"),\n                self.tr(\n                    \"<p>Make sure <i>{0}</i> is a valid image file.<br/>\"\n                    \"Supported image formats: {1}</p>\"\n                ).format(filename, \",\".join(formats)),\n            )\n            self.status(self.tr(\"Error reading %s\") % filename)\n            return False\n        self.image = image\n        self.filename = filename\n        if self._config[\"keep_prev\"]:\n            prev_shapes = self.canvas.shapes\n        self.canvas.loadPixmap(QtGui.QPixmap.fromImage(image))\n        flags = {k: False for k in self._config[\"flags\"] or []}\n        if self.labelFile:\n            self.loadLabels(self.labelFile.shapes)\n            if self.labelFile.flags is not None:\n                flags.update(self.labelFile.flags)\n        self.loadFlags(flags)\n        if self._config[\"keep_prev\"] and self.noShapes():\n            self.loadShapes(prev_shapes, replace=False)\n            self.setDirty()\n        else:\n            self.setClean()\n        self.canvas.setEnabled(True)\n        \n        is_initial_load = not self.zoom_values\n        if self.filename in self.zoom_values:\n            self.zoomMode = self.zoom_values[self.filename][0]\n            self.setZoom(self.zoom_values[self.filename][1])\n        elif is_initial_load or not self._config[\"keep_prev_scale\"]:\n            self.adjustScale(initial=True)\n        \n        for orientation in self.scroll_values:\n            if self.filename in self.scroll_values[orientation]:\n                self.setScroll(\n                    orientation, self.scroll_values[orientation][self.filename]\n                )\n        \n        dialog = BrightnessContrastDialog(\n            utils.img_data_to_pil(self.imageData),\n            self.onNewBrightnessContrast,\n            parent=self,\n        )\n        brightness, contrast = self.brightnessContrast_values.get(\n            self.filename, (None, None)\n        )\n        if self._config[\"keep_prev_brightness\"] and self.recentFiles:\n            brightness, _ = self.brightnessContrast_values.get(\n                self.recentFiles[0], (None, None)\n            )\n        if self._config[\"keep_prev_contrast\"] and self.recentFiles:\n            _, contrast = self.brightnessContrast_values.get(\n                self.recentFiles[0], (None, None)\n            )\n        if brightness is not None:\n            dialog.slider_brightness.setValue(brightness)\n        if contrast is not None:\n            dialog.slider_contrast.setValue(contrast)\n        self.brightnessContrast_values[self.filename] = (brightness, contrast)\n        if brightness is not None or contrast is not None:\n            dialog.onNewValue(None)\n        self.paintCanvas()\n        self.addRecentFile(self.filename)\n        self.toggleActions(True)\n        self.canvas.setFocus()\n        self.status(str(self.tr(\"Loaded %s\")) % osp.basename(str(filename)))\n        return True",
    "line_range": [
        1579,
        1708
    ],
    "command_specific_fields": {
        "method_name": "loadFile"
    },
    "language": "python",
    "commit": "aca3e64545f55c886760694981df634ae6eb1f32"
}