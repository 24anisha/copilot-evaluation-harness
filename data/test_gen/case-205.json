{
    "case_id": "case-205",
    "repo_name": "dthree/cash",
    "file_path": "src/commands/echo.js",
    "code_snippet": "\n\n  exec(arg, options) {\n\n    const self = this;\n\n    options = options || {};\n\n\n\n    try {\n\n      let text = arg || '';\n\n      text = !Array.isArray(text) ? [text] : text;\n\n      let result = text.join(' ');\n\n      let out = '';\n\n      if (options.e && !options.E) {\n\n        for (let i = 0; i < result.length; ++i) {\n\n          const nxt = result[i] + (result[i + 1] || '');\n\n          if (nxt === '\\\\b') {\n\n            out = out.slice(0, out.length - 1);\n\n            i++;\n\n          } else if (nxt === '\\\\c') {\n\n            break;\n\n          } else if (nxt === '\\\\n') {\n\n            out += '\\n';\n\n            i++;\n\n          } else if (nxt === '\\\\r') {\n\n            out += '\\r';\n\n            i++;\n\n          } else if (nxt === '\\\\t') {\n\n            out += '     ';\n\n            i++;\n\n          } else if (nxt === '\\\\\\\\') {\n\n            out += '\\\\';\n\n            i += 2;\n\n          } else {\n\n            out += result[i];\n\n          }\n\n        }\n\n        result = out;\n\n      }\n\n\n\n      // Bug: If nothing is passed, ensure we keep\n\n      // a blank line. Vorpal is designed to just\n\n      // eat blank lines, so we have a problem.\n\n      result = result === ('') ? '' : result;\n\n\n\n      this.log(result);\n\n      return 0;\n\n    } catch (e) {\n\n      /* istanbul ignore next */\n\n      return echo.error.call(self, e);\n\n    }\n\n  },\n",
    "line_range": [
        6,
        55
    ],
    "command_specific_fields": {
        "method_name": "exec"
    },
    "language": "javascript",
    "commit": "3e28dae8bdb71215d5034df9003f3ef2804c2754",
    "prompt": ""
}