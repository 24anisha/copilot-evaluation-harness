{
    "case_id": "case-456",
    "repo_name": "rastapasta/mapscii",
    "file_path": "src/Canvas.js",
    "code_snippet": "\n\n  // Draws a filled triangle\n\n  _filledTriangle(pointA, pointB, pointC, color) {\n\n    const a = this._bresenham(pointB, pointC);\n\n    const b = this._bresenham(pointA, pointC);\n\n    const c = this._bresenham(pointA, pointB);\n\n    \n\n    const points = a.concat(b).concat(c).filter((point) => {\n\n      var ref;\n\n      return (0 <= (ref = point.y) && ref < this.height);\n\n    }).sort(function(a, b) {\n\n      if (a.y === b.y) {\n\n        return a.x - b.x;\n\n      } else {\n\n        return a.y - b.y;\n\n      }\n\n    });\n\n    \n\n    for (let i = 0; i < points.length; i++) {\n\n      const point = points[i];\n\n      const next = points[i * 1 + 1];\n\n      \n\n      if (point.y === (next || {}).y) {\n\n        const left = Math.max(0, point.x);\n\n        const right = Math.min(this.width - 1, next.x);\n\n        if (left >= 0 && right <= this.width) {\n\n          for (let x = left; x <= right; x++) {\n\n            this.buffer.setPixel(x, point.y, color);\n\n          }\n\n        }\n\n      } else {\n\n        this.buffer.setPixel(point.x, point.y, color);\n\n      }\n\n      if (!next) {\n\n        break;\n\n      }\n\n    }\n\n  }\n",
    "line_range": [
        160,
        197
    ],
    "command_specific_fields": {
        "method_name": "_filledTriangle"
    },
    "language": "javascript",
    "commit": "4fe9a60a0c9da952dadc5214a9ca5c68c447fdf8",
    "prompt": ""
}