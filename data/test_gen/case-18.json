{
    "case_id": "case-18",
    "repo_name": "jaredhanson/passport",
    "file_path": "lib/middleware/initialize.js",
    "code_snippet": " */\n\nmodule.exports = function initialize(passport, options) {\n\n  options = options || {};\n\n  \n\n  return function initialize(req, res, next) {\n\n    req.login =\n\n    req.logIn = req.logIn || IncomingMessageExt.logIn;\n\n    req.logout =\n\n    req.logOut = req.logOut || IncomingMessageExt.logOut;\n\n    req.isAuthenticated = req.isAuthenticated || IncomingMessageExt.isAuthenticated;\n\n    req.isUnauthenticated = req.isUnauthenticated || IncomingMessageExt.isUnauthenticated;\n\n    \n\n    req._sessionManager = passport._sm;\n\n    \n\n    if (options.userProperty) {\n\n      req._userProperty = options.userProperty;\n\n    }\n\n    \n\n    var compat = (options.compat === undefined) ? true : options.compat;\n\n    if (compat) {\n\n      // `passport@0.5.1` [removed][1] all internal use of `req._passport`.\n\n      // From the standpoint of this package, this should have been a\n\n      // non-breaking change.  However, some strategies (such as `passport-azure-ad`)\n\n      // depend directly on `passport@0.4.x` or earlier.  `require`-ing earlier\n\n      // versions of `passport` has the effect of monkeypatching `http.IncomingMessage`\n\n      // with `logIn`, `logOut`, `isAuthenticated` and `isUnauthenticated`\n\n      // functions that [expect][2] the `req._passport` property to exist.\n\n      // Since pre-existing functions on `req` are given [preference][3], this\n\n      // results in [issues][4].\n\n      //\n\n      // The changes here restore the expected properties needed when earlier\n\n      // versions of `passport` are `require`-ed.  This compatibility mode is\n\n      // enabled by default, and can be disabld by simply not `use`-ing `passport.initialize()`\n\n      // middleware or setting `compat: false` as an option to the middleware.\n\n      //\n\n      // An alternative approach to addressing this issue would be to not\n\n      // preferentially use pre-existing functions on `req`, but rather always\n\n      // overwrite `req.logIn`, etc. with the versions of those functions shiped\n\n      // with `authenticate()` middleware.  This option should be reconsidered\n\n      // in a future major version release.\n\n      //\n\n      // [1]: https://github.com/jaredhanson/passport/pull/875\n\n      // [2]: https://github.com/jaredhanson/passport/blob/v0.4.1/lib/http/request.js\n\n      // [3]: https://github.com/jaredhanson/passport/blob/v0.5.1/lib/middleware/authenticate.js#L96\n\n      // [4]: https://github.com/jaredhanson/passport/issues/877\n\n      passport._userProperty = options.userProperty || 'user';\n\n      \n\n      req._passport = {};\n\n      req._passport.instance = passport;\n\n    }\n\n    \n\n    next();\n\n  };\n\n};\n",
    "line_range": [
        46,
        100
    ],
    "command_specific_fields": {
        "method_name": "initialize"
    },
    "language": "javascript",
    "commit": "0575de90dc0e76c1b8ca9cc676af89bd301aec60",
    "prompt": ""
}