{
    "case_id": "case-371",
    "repo_name": "conventional-changelog/standard-version",
    "file_path": "index.js",
    "code_snippet": "const { resolveUpdaterObjectFromArgument } = require('./lib/updaters')\n\n\n\nmodule.exports = async function standardVersion (argv) {\n\n  const defaults = require('./defaults')\n\n  /**\n\n   * `--message` (`-m`) support will be removed in the next major version.\n\n   */\n\n  const message = argv.m || argv.message\n\n  if (message) {\n\n    /**\n\n     * The `--message` flag uses `%s` for version substitutions, we swap this\n\n     * for the substitution defined in the config-spec for future-proofing upstream\n\n     * handling.\n\n     */\n\n    argv.releaseCommitMessageFormat = message.replace(/%s/g, '{{currentTag}}')\n\n    if (!argv.silent) {\n\n      console.warn('[standard-version]: --message (-m) will be removed in the next major release. Use --releaseCommitMessageFormat.')\n\n    }\n\n  }\n\n\n\n  if (argv.changelogHeader) {\n\n    argv.header = argv.changelogHeader\n\n    if (!argv.silent) {\n\n      console.warn('[standard-version]: --changelogHeader will be removed in the next major release. Use --header.')\n\n    }\n\n  }\n\n\n\n  if (argv.header && argv.header.search(changelog.START_OF_LAST_RELEASE_PATTERN) !== -1) {\n\n    throw Error(`custom changelog header must not match ${changelog.START_OF_LAST_RELEASE_PATTERN}`)\n\n  }\n\n\n\n  /**\n\n   * If an argument for `packageFiles` provided, we include it as a \"default\" `bumpFile`.\n\n   */\n\n  if (argv.packageFiles) {\n\n    defaults.bumpFiles = defaults.bumpFiles.concat(argv.packageFiles)\n\n  }\n\n\n\n  const args = Object.assign({}, defaults, argv)\n\n  let pkg\n\n  for (const packageFile of args.packageFiles) {\n\n    const updater = resolveUpdaterObjectFromArgument(packageFile)\n\n    if (!updater) return\n\n    const pkgPath = path.resolve(process.cwd(), updater.filename)\n\n    try {\n\n      const contents = fs.readFileSync(pkgPath, 'utf8')\n\n      pkg = {\n\n        version: updater.updater.readVersion(contents),\n\n        private: typeof updater.updater.isPrivate === 'function' ? updater.updater.isPrivate(contents) : false\n\n      }\n\n      break\n\n    } catch (err) {}\n\n  }\n\n  try {\n\n    let version\n\n    if (pkg) {\n\n      version = pkg.version\n\n    } else if (args.gitTagFallback) {\n\n      version = await latestSemverTag(args.tagPrefix)\n\n    } else {\n\n      throw new Error('no package file found')\n\n    }\n\n\n\n    const newVersion = await bump(args, version)\n\n    await changelog(args, newVersion)\n\n    await commit(args, newVersion)\n\n    await tag(newVersion, pkg ? pkg.private : false, args)\n\n  } catch (err) {\n\n    printError(args, err.message)\n\n    throw err\n\n  }\n\n}\n",
    "line_range": [
        9,
        80
    ],
    "command_specific_fields": {
        "method_name": "standardVersion"
    },
    "language": "javascript",
    "commit": "d70752c463991d34fa192e0332d7e4efacad78ba",
    "prompt": ""
}