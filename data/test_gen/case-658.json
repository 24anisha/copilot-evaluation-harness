{
    "case_id": "case-658",
    "repo_name": "python-hyper/rfc3986",
    "file_path": "src/rfc3986/normalizers.py",
    "code_snippet": "\n\ndef encode_component(\n\n    uri_component: t.Optional[str],\n\n    encoding: str,\n\n) -> t.Optional[str]:\n\n    \"\"\"Encode the specific component in the provided encoding.\"\"\"\n\n    if uri_component is None:\n\n        return uri_component\n\n\n\n    # Try to see if the component we're encoding is already percent-encoded\n\n    # so we can skip all '%' characters but still encode all others.\n\n    percent_encodings = len(\n\n        PERCENT_MATCHER.findall(compat.to_str(uri_component, encoding))\n\n    )\n\n\n\n    uri_bytes = compat.to_bytes(uri_component, encoding)\n\n    is_percent_encoded = percent_encodings == uri_bytes.count(b\"%\")\n\n\n\n    encoded_uri = bytearray()\n\n\n\n    for i in range(0, len(uri_bytes)):\n\n        # Will return a single character bytestring on both Python 2 & 3\n\n        byte = uri_bytes[i : i + 1]\n\n        byte_ord = ord(byte)\n\n        if (is_percent_encoded and byte == b\"%\") or (\n\n            byte_ord < 128 and byte.decode() in misc.NON_PCT_ENCODED\n\n        ):\n\n            encoded_uri.extend(byte)\n\n            continue\n\n        encoded_uri.extend(f\"%{byte_ord:02x}\".encode().upper())\n\n\n\n    return encoded_uri.decode(encoding)\n",
    "line_range": [
        176,
        208
    ],
    "command_specific_fields": {
        "method_name": "encode_component"
    },
    "language": "python",
    "commit": "75e77baed146976442bb11d4adda0eb322c6a6b5",
    "prompt": ""
}