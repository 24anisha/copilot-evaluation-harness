{
    "case_id": "case-1030",
    "repo_name": "Zulko/moviepy",
    "file_path": "moviepy/tools.py",
    "code_snippet": "\n\n\n\ndef deprecated_version_of(func, old_name):\n\n    \"\"\"Indicates that a function is deprecated and has a new name.\n\n\n\n    `func` is the new function and `old_name` is the name of the deprecated\n\n    function.\n\n\n\n    Returns\n\n    -------\n\n\n\n    deprecated_func\n\n      A function that does the same thing as `func`, but with a docstring\n\n      and a printed message on call which say that the function is\n\n      deprecated and that you should use `func` instead.\n\n\n\n    Examples\n\n    --------\n\n\n\n    >>> # The badly named method 'to_file' is replaced by 'write_file'\n\n    >>> class Clip:\n\n    >>>    def write_file(self, some args):\n\n    >>>        # blablabla\n\n    >>>\n\n    >>> Clip.to_file = deprecated_version_of(Clip.write_file, 'to_file')\n\n    \"\"\"\n\n    # Detect new name of func\n\n    new_name = func.__name__\n\n\n\n    warning = (\n\n        \"The function ``%s`` is deprecated and is kept temporarily \"\n\n        \"for backwards compatibility.\\nPlease use the new name, \"\n\n        \"``%s``, instead.\"\n\n    ) % (old_name, new_name)\n\n\n\n    def deprecated_func(*args, **kwargs):\n\n        warnings.warn(\"MoviePy: \" + warning, PendingDeprecationWarning)\n\n        return func(*args, **kwargs)\n\n\n\n    deprecated_func.__doc__ = warning\n\n\n\n    return deprecated_func\n",
    "line_range": [
        84,
        125
    ],
    "command_specific_fields": {
        "method_name": "deprecated_version_of"
    },
    "language": "python",
    "commit": "0f6f6d4d9b96c69d109975549fe6293931f1a19d",
    "prompt": ""
}