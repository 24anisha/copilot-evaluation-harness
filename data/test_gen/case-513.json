{
    "case_id": "case-513",
    "repo_name": "cheeriojs/cheerio",
    "file_path": "src/api/attributes.ts",
    "code_snippet": "export function prop<T extends AnyNode>(this: Cheerio<T>, name: string): string;\n\nexport function prop<T extends AnyNode>(\n\n  this: Cheerio<T>,\n\n  name: string | Record<string, string | Element[keyof Element] | boolean>,\n\n  value?:\n\n    | ((\n\n        this: Element,\n\n        i: number,\n\n        prop: string | undefined,\n\n      ) => string | Element[keyof Element] | boolean)\n\n    | unknown,\n\n): Cheerio<T> | string | undefined | null | Element[keyof Element] | StyleProp {\n\n  if (typeof name === 'string' && value === undefined) {\n\n    const el = this[0];\n\n\n\n    if (!el || !isTag(el)) return undefined;\n\n\n\n    switch (name) {\n\n      case 'style': {\n\n        const property = this.css() as StyleProp;\n\n        const keys = Object.keys(property);\n\n        for (let i = 0; i < keys.length; i++) {\n\n          property[i] = keys[i];\n\n        }\n\n\n\n        property.length = keys.length;\n\n\n\n        return property;\n\n      }\n\n      case 'tagName':\n\n      case 'nodeName': {\n\n        return el.name.toUpperCase();\n\n      }\n\n\n\n      case 'href':\n\n      case 'src': {\n\n        const prop = el.attribs?.[name];\n\n\n\n        /* eslint-disable n/no-unsupported-features/node-builtins */\n\n        if (\n\n          typeof URL !== 'undefined' &&\n\n          ((name === 'href' && (el.tagName === 'a' || el.name === 'link')) ||\n\n            (name === 'src' &&\n\n              (el.tagName === 'img' ||\n\n                el.tagName === 'iframe' ||\n\n                el.tagName === 'audio' ||\n\n                el.tagName === 'video' ||\n\n                el.tagName === 'source'))) &&\n\n          prop !== undefined &&\n\n          this.options.baseURI\n\n        ) {\n\n          return new URL(prop, this.options.baseURI).href;\n\n        }\n\n        /* eslint-enable n/no-unsupported-features/node-builtins */\n\n\n\n        return prop;\n\n      }\n\n\n\n      case 'innerText': {\n\n        return innerText(el);\n\n      }\n\n\n\n      case 'textContent': {\n\n        return textContent(el);\n\n      }\n\n\n\n      case 'outerHTML': {\n\n        return this.clone().wrap('<container />').parent().html();\n\n      }\n\n\n\n      case 'innerHTML': {\n\n        return this.html();\n\n      }\n\n\n\n      default: {\n\n        return getProp(el, name, this.options.xmlMode);\n\n      }\n\n    }\n\n  }\n\n\n\n  if (typeof name === 'object' || value !== undefined) {\n\n    if (typeof value === 'function') {\n\n      if (typeof name === 'object') {\n\n        throw new TypeError('Bad combination of arguments.');\n\n      }\n\n      return domEach(this, (el, i) => {\n\n        if (isTag(el)) {\n\n          setProp(\n\n            el,\n\n            name,\n\n            value.call(el, i, getProp(el, name, this.options.xmlMode)),\n\n            this.options.xmlMode,\n\n          );\n\n        }\n\n      });\n\n    }\n\n\n\n    return domEach(this, (el) => {\n\n      if (!isTag(el)) return;\n\n\n\n      if (typeof name === 'object') {\n\n        for (const key of Object.keys(name)) {\n\n          const val = name[key];\n\n          setProp(el, key, val, this.options.xmlMode);\n\n        }\n\n      } else {\n\n        setProp(el, name, value, this.options.xmlMode);\n\n      }\n\n    });\n\n  }\n\n\n\n  return undefined;\n\n}\n",
    "line_range": [
        394,
        507
    ],
    "command_specific_fields": {
        "method_name": "prop"
    },
    "language": "typescript",
    "commit": "da0b8840f42489030da52172f08d79d4509c999b",
    "prompt": ""
}