{
    "case_id": "case-1697",
    "repo_name": "python-hyper/rfc3986",
    "file_path": "src/rfc3986/_mixin.py",
    "code_snippet": "        return tuple(self.normalize()) == tuple(other_ref.normalize())\n\n\n\n    def resolve_with(  # noqa: C901\n\n        self,\n\n        base_uri: t.Union[str, \"uri.URIReference\"],\n\n        strict: bool = False,\n\n    ) -> _Self:\n\n        \"\"\"Use an absolute URI Reference to resolve this relative reference.\n\n\n\n        Assuming this is a relative reference that you would like to resolve,\n\n        use the provided base URI to resolve it.\n\n\n\n        See http://tools.ietf.org/html/rfc3986#section-5 for more information.\n\n\n\n        :param base_uri: Either a string or URIReference. It must be an\n\n            absolute URI or it will raise an exception.\n\n        :returns: A new URIReference which is the result of resolving this\n\n            reference using ``base_uri``.\n\n        :rtype: :class:`URIReference`\n\n        :raises rfc3986.exceptions.ResolutionError:\n\n            If the ``base_uri`` does not at least have a scheme.\n\n        \"\"\"\n\n        if not isinstance(base_uri, URIMixin):\n\n            base_uri = type(self).from_string(base_uri)\n\n\n\n        if t.TYPE_CHECKING:\n\n            base_uri = t.cast(uri.URIReference, base_uri)\n\n\n\n        try:\n\n            self._validator.validate(base_uri)\n\n        except exc.ValidationError:\n\n            raise exc.ResolutionError(base_uri)\n\n\n\n        # This is optional per\n\n        # http://tools.ietf.org/html/rfc3986#section-5.2.1\n\n        base_uri = base_uri.normalize()\n\n\n\n        # The reference we're resolving\n\n        resolving = self\n\n\n\n        if not strict and resolving.scheme == base_uri.scheme:\n\n            resolving = resolving.copy_with(scheme=None)\n\n\n\n        # http://tools.ietf.org/html/rfc3986#page-32\n\n        if resolving.scheme is not None:\n\n            target = resolving.copy_with(\n\n                path=normalizers.normalize_path(resolving.path)\n\n            )\n\n        else:\n\n            if resolving.authority is not None:\n\n                target = resolving.copy_with(\n\n                    scheme=base_uri.scheme,\n\n                    path=normalizers.normalize_path(resolving.path),\n\n                )\n\n            else:\n\n                if resolving.path is None:\n\n                    if resolving.query is not None:\n\n                        query = resolving.query\n\n                    else:\n\n                        query = base_uri.query\n\n                    target = resolving.copy_with(\n\n                        scheme=base_uri.scheme,\n\n                        authority=base_uri.authority,\n\n                        path=base_uri.path,\n\n                        query=query,\n\n                    )\n\n                else:\n\n                    if resolving.path.startswith(\"/\"):\n\n                        path = normalizers.normalize_path(resolving.path)\n\n                    else:\n\n                        path = normalizers.normalize_path(\n\n                            misc.merge_paths(base_uri, resolving.path)\n\n                        )\n\n                    target = resolving.copy_with(\n\n                        scheme=base_uri.scheme,\n\n                        authority=base_uri.authority,\n\n                        path=path,\n\n                        query=resolving.query,\n\n                    )\n\n        return target\n",
    "line_range": [
        272,
        351
    ],
    "command_specific_fields": {
        "method_name": "resolve_with"
    },
    "language": "python",
    "commit": "75e77baed146976442bb11d4adda0eb322c6a6b5",
    "prompt": ""
}