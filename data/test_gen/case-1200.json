{
    "case_id": "case-1200",
    "repo_name": "networkx/networkx",
    "file_path": "networkx/convert_matrix.py",
    "code_snippet": "\n\n@nx._dispatchable(graphs=None, returns_graph=True)\n\ndef from_pandas_edgelist(\n\n    df,\n\n    source=\"source\",\n\n    target=\"target\",\n\n    edge_attr=None,\n\n    create_using=None,\n\n    edge_key=None,\n\n):\n\n    \"\"\"Returns a graph from Pandas DataFrame containing an edge list.\n\n\n\n    The Pandas DataFrame should contain at least two columns of node names and\n\n    zero or more columns of edge attributes. Each row will be processed as one\n\n    edge instance.\n\n\n\n    Note: This function iterates over DataFrame.values, which is not\n\n    guaranteed to retain the data type across columns in the row. This is only\n\n    a problem if your row is entirely numeric and a mix of ints and floats. In\n\n    that case, all values will be returned as floats. See the\n\n    DataFrame.iterrows documentation for an example.\n\n\n\n    Parameters\n\n    ----------\n\n    df : Pandas DataFrame\n\n        An edge list representation of a graph\n\n\n\n    source : str or int\n\n        A valid column name (string or integer) for the source nodes (for the\n\n        directed case).\n\n\n\n    target : str or int\n\n        A valid column name (string or integer) for the target nodes (for the\n\n        directed case).\n\n\n\n    edge_attr : str or int, iterable, True, or None\n\n        A valid column name (str or int) or iterable of column names that are\n\n        used to retrieve items and add them to the graph as edge attributes.\n\n        If `True`, all columns will be added except `source`, `target` and `edge_key`.\n\n        If `None`, no edge attributes are added to the graph.\n\n\n\n    create_using : NetworkX graph constructor, optional (default=nx.Graph)\n\n        Graph type to create. If graph instance, then cleared before populated.\n\n\n\n    edge_key : str or None, optional (default=None)\n\n        A valid column name for the edge keys (for a MultiGraph). The values in\n\n        this column are used for the edge keys when adding edges if create_using\n\n        is a multigraph.\n\n\n\n    If you have node attributes stored in a separate dataframe `df_nodes`,\n\n    you can load those attributes to the graph `G` using the following code:\n\n\n\n    ```\n\n    df_nodes = pd.DataFrame({\"node_id\": [1, 2, 3], \"attribute1\": [\"A\", \"B\", \"C\"]})\n\n    G.add_nodes_from((n, dict(d)) for n, d in df_nodes.iterrows())\n\n    ```\n\n\n\n    See Also\n\n    --------\n\n    to_pandas_edgelist\n\n\n\n    Examples\n\n    --------\n\n    Simple integer weights on edges:\n\n\n\n    >>> import pandas as pd\n\n    >>> pd.options.display.max_columns = 20\n\n    >>> import numpy as np\n\n    >>> rng = np.random.RandomState(seed=5)\n\n    >>> ints = rng.randint(1, 11, size=(3, 2))\n\n    >>> a = [\"A\", \"B\", \"C\"]\n\n    >>> b = [\"D\", \"A\", \"E\"]\n\n    >>> df = pd.DataFrame(ints, columns=[\"weight\", \"cost\"])\n\n    >>> df[0] = a\n\n    >>> df[\"b\"] = b\n\n    >>> df[[\"weight\", \"cost\", 0, \"b\"]]\n\n       weight  cost  0  b\n\n    0       4     7  A  D\n\n    1       7     1  B  A\n\n    2      10     9  C  E\n\n    >>> G = nx.from_pandas_edgelist(df, 0, \"b\", [\"weight\", \"cost\"])\n\n    >>> G[\"E\"][\"C\"][\"weight\"]\n\n    10\n\n    >>> G[\"E\"][\"C\"][\"cost\"]\n\n    9\n\n    >>> edges = pd.DataFrame(\n\n    ...     {\n\n    ...         \"source\": [0, 1, 2],\n\n    ...         \"target\": [2, 2, 3],\n\n    ...         \"weight\": [3, 4, 5],\n\n    ...         \"color\": [\"red\", \"blue\", \"blue\"],\n\n    ...     }\n\n    ... )\n\n    >>> G = nx.from_pandas_edgelist(edges, edge_attr=True)\n\n    >>> G[0][2][\"color\"]\n\n    'red'\n\n\n\n    Build multigraph with custom keys:\n\n\n\n    >>> edges = pd.DataFrame(\n\n    ...     {\n\n    ...         \"source\": [0, 1, 2, 0],\n\n    ...         \"target\": [2, 2, 3, 2],\n\n    ...         \"my_edge_key\": [\"A\", \"B\", \"C\", \"D\"],\n\n    ...         \"weight\": [3, 4, 5, 6],\n\n    ...         \"color\": [\"red\", \"blue\", \"blue\", \"blue\"],\n\n    ...     }\n\n    ... )\n\n    >>> G = nx.from_pandas_edgelist(\n\n    ...     edges,\n\n    ...     edge_key=\"my_edge_key\",\n\n    ...     edge_attr=[\"weight\", \"color\"],\n\n    ...     create_using=nx.MultiGraph(),\n\n    ... )\n\n    >>> G[0][2]\n\n    AtlasView({'A': {'weight': 3, 'color': 'red'}, 'D': {'weight': 6, 'color': 'blue'}})\n\n\n\n\n\n    \"\"\"\n\n    g = nx.empty_graph(0, create_using)\n\n\n\n    if edge_attr is None:\n\n        if g.is_multigraph() and edge_key is not None:\n\n            for u, v, k in zip(df[source], df[target], df[edge_key]):\n\n                g.add_edge(u, v, k)\n\n        else:\n\n            g.add_edges_from(zip(df[source], df[target]))\n\n        return g\n\n\n\n    reserved_columns = [source, target]\n\n    if g.is_multigraph() and edge_key is not None:\n\n        reserved_columns.append(edge_key)\n\n\n\n    # Additional columns requested\n\n    attr_col_headings = []\n\n    attribute_data = []\n\n    if edge_attr is True:\n\n        attr_col_headings = [c for c in df.columns if c not in reserved_columns]\n\n    elif isinstance(edge_attr, list | tuple):\n\n        attr_col_headings = edge_attr\n\n    else:\n\n        attr_col_headings = [edge_attr]\n\n    if len(attr_col_headings) == 0:\n\n        raise nx.NetworkXError(\n\n            f\"Invalid edge_attr argument: No columns found with name: {attr_col_headings}\"\n\n        )\n\n\n\n    try:\n\n        attribute_data = zip(*[df[col] for col in attr_col_headings])\n\n    except (KeyError, TypeError) as err:\n\n        msg = f\"Invalid edge_attr argument: {edge_attr}\"\n\n        raise nx.NetworkXError(msg) from err\n\n\n\n    if g.is_multigraph():\n\n        # => append the edge keys from the df to the bundled data\n\n        if edge_key is not None:\n\n            try:\n\n                multigraph_edge_keys = df[edge_key]\n\n                attribute_data = zip(attribute_data, multigraph_edge_keys)\n\n            except (KeyError, TypeError) as err:\n\n                msg = f\"Invalid edge_key argument: {edge_key}\"\n\n                raise nx.NetworkXError(msg) from err\n\n\n\n        for s, t, attrs in zip(df[source], df[target], attribute_data):\n\n            if edge_key is not None:\n\n                attrs, multigraph_edge_key = attrs\n\n                key = g.add_edge(s, t, key=multigraph_edge_key)\n\n            else:\n\n                key = g.add_edge(s, t)\n\n\n\n            g[s][t][key].update(zip(attr_col_headings, attrs))\n\n    else:\n\n        for s, t, attrs in zip(df[source], df[target], attribute_data):\n\n            g.add_edge(s, t)\n\n            g[s][t].update(zip(attr_col_headings, attrs))\n\n\n\n    return g\n",
    "line_range": [
        312,
        489
    ],
    "command_specific_fields": {
        "method_name": "from_pandas_edgelist"
    },
    "language": "python",
    "commit": "89718e0514bded93ded5b00aed755a4474c1dc6f",
    "prompt": ""
}