{
    "case_id": "case-1200",
    "repo_name": "networkx/networkx",
    "file_path": "networkx/convert_matrix.py",
    "code_snippet": "    g = nx.empty_graph(0, create_using)\n\n    if edge_attr is None:\n        if g.is_multigraph() and edge_key is not None:\n            for u, v, k in zip(df[source], df[target], df[edge_key]):\n                g.add_edge(u, v, k)\n        else:\n            g.add_edges_from(zip(df[source], df[target]))\n        return g\n\n    reserved_columns = [source, target]\n    if g.is_multigraph() and edge_key is not None:\n        reserved_columns.append(edge_key)\n\n    \n    attr_col_headings = []\n    attribute_data = []\n    if edge_attr is True:\n        attr_col_headings = [c for c in df.columns if c not in reserved_columns]\n    elif isinstance(edge_attr, list | tuple):\n        attr_col_headings = edge_attr\n    else:\n        attr_col_headings = [edge_attr]\n    if len(attr_col_headings) == 0:\n        raise nx.NetworkXError(\n            f\"Invalid edge_attr argument: No columns found with name: {attr_col_headings}\"\n        )\n\n    try:\n        attribute_data = zip(*[df[col] for col in attr_col_headings])\n    except (KeyError, TypeError) as err:\n        msg = f\"Invalid edge_attr argument: {edge_attr}\"\n        raise nx.NetworkXError(msg) from err\n\n    if g.is_multigraph():\n        \n        if edge_key is not None:\n            try:\n                multigraph_edge_keys = df[edge_key]\n                attribute_data = zip(attribute_data, multigraph_edge_keys)\n            except (KeyError, TypeError) as err:\n                msg = f\"Invalid edge_key argument: {edge_key}\"\n                raise nx.NetworkXError(msg) from err\n\n        for s, t, attrs in zip(df[source], df[target], attribute_data):\n            if edge_key is not None:\n                attrs, multigraph_edge_key = attrs\n                key = g.add_edge(s, t, key=multigraph_edge_key)\n            else:\n                key = g.add_edge(s, t)\n\n            g[s][t][key].update(zip(attr_col_headings, attrs))\n    else:\n        for s, t, attrs in zip(df[source], df[target], attribute_data):\n            g.add_edge(s, t)\n            g[s][t].update(zip(attr_col_headings, attrs))\n\n    return g",
    "line_range": [
        312,
        489
    ],
    "command_specific_fields": {
        "method_name": "from_pandas_edgelist"
    },
    "language": "python",
    "commit": "89718e0514bded93ded5b00aed755a4474c1dc6f",
    "prompt": ""
}