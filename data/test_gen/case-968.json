{
    "case_id": "case-968",
    "repo_name": "networkx/networkx",
    "file_path": "networkx/algorithms/isomorphism/vf2pp.py",
    "code_snippet": "\n\ndef _initialize_parameters(G1, G2, G2_degree, node_label=None, default_label=-1):\n\n    \"\"\"Initializes all the necessary parameters for VF2++\n\n\n\n    Parameters\n\n    ----------\n\n    G1,G2: NetworkX Graph or MultiGraph instances.\n\n        The two graphs to check for isomorphism or monomorphism\n\n\n\n    G1_labels,G2_labels: dict\n\n        The label of every node in G1 and G2 respectively\n\n\n\n    Returns\n\n    -------\n\n    graph_params: namedtuple\n\n        Contains all the Graph-related parameters:\n\n\n\n        G1,G2\n\n        G1_labels,G2_labels: dict\n\n\n\n    state_params: namedtuple\n\n        Contains all the State-related parameters:\n\n\n\n        mapping: dict\n\n            The mapping as extended so far. Maps nodes of G1 to nodes of G2\n\n\n\n        reverse_mapping: dict\n\n            The reverse mapping as extended so far. Maps nodes from G2 to nodes of G1. It's basically \"mapping\" reversed\n\n\n\n        T1, T2: set\n\n            Ti contains uncovered neighbors of covered nodes from Gi, i.e. nodes that are not in the mapping, but are\n\n            neighbors of nodes that are.\n\n\n\n        T1_out, T2_out: set\n\n            Ti_out contains all the nodes from Gi, that are neither in the mapping nor in Ti\n\n    \"\"\"\n\n    G1_labels = dict(G1.nodes(data=node_label, default=default_label))\n\n    G2_labels = dict(G2.nodes(data=node_label, default=default_label))\n\n\n\n    graph_params = _GraphParameters(\n\n        G1,\n\n        G2,\n\n        G1_labels,\n\n        G2_labels,\n\n        nx.utils.groups(G1_labels),\n\n        nx.utils.groups(G2_labels),\n\n        nx.utils.groups(G2_degree),\n\n    )\n\n\n\n    T1, T1_in = set(), set()\n\n    T2, T2_in = set(), set()\n\n    if G1.is_directed():\n\n        T1_tilde, T1_tilde_in = (\n\n            set(G1.nodes()),\n\n            set(),\n\n        )  # todo: do we need Ti_tilde_in? What nodes does it have?\n\n        T2_tilde, T2_tilde_in = set(G2.nodes()), set()\n\n    else:\n\n        T1_tilde, T1_tilde_in = set(G1.nodes()), set()\n\n        T2_tilde, T2_tilde_in = set(G2.nodes()), set()\n\n\n\n    state_params = _StateParameters(\n\n        {},\n\n        {},\n\n        T1,\n\n        T1_in,\n\n        T1_tilde,\n\n        T1_tilde_in,\n\n        T2,\n\n        T2_in,\n\n        T2_tilde,\n\n        T2_tilde_in,\n\n    )\n\n\n\n    return graph_params, state_params\n",
    "line_range": [
        294,
        369
    ],
    "command_specific_fields": {
        "method_name": "_initialize_parameters"
    },
    "language": "python",
    "commit": "89718e0514bded93ded5b00aed755a4474c1dc6f",
    "prompt": ""
}