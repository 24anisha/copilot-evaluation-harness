{
    "case_id": "case-5",
    "repo_name": "ecrmnn/collect.js",
    "file_path": "src/methods/where.js",
    "code_snippet": "\n\nmodule.exports = function where(key, operator, value) {\n\n  let comparisonOperator = operator;\n\n  let comparisonValue = value;\n\n\n\n  const items = values(this.items);\n\n\n\n  if (operator === undefined || operator === true) {\n\n    return new this.constructor(items.filter(item => nestedValue(item, key)));\n\n  }\n\n\n\n  if (operator === false) {\n\n    return new this.constructor(items.filter(item => !nestedValue(item, key)));\n\n  }\n\n\n\n  if (value === undefined) {\n\n    comparisonValue = operator;\n\n    comparisonOperator = '===';\n\n  }\n\n\n\n  const collection = items.filter((item) => {\n\n    switch (comparisonOperator) {\n\n      case '==':\n\n        return nestedValue(item, key) === Number(comparisonValue)\n\n          || nestedValue(item, key) === comparisonValue.toString();\n\n\n\n      default:\n\n      case '===':\n\n        return nestedValue(item, key) === comparisonValue;\n\n\n\n      case '!=':\n\n      case '<>':\n\n        return nestedValue(item, key) !== Number(comparisonValue)\n\n          && nestedValue(item, key) !== comparisonValue.toString();\n\n\n\n      case '!==':\n\n        return nestedValue(item, key) !== comparisonValue;\n\n\n\n      case '<':\n\n        return nestedValue(item, key) < comparisonValue;\n\n\n\n      case '<=':\n\n        return nestedValue(item, key) <= comparisonValue;\n\n\n\n      case '>':\n\n        return nestedValue(item, key) > comparisonValue;\n\n\n\n      case '>=':\n\n        return nestedValue(item, key) >= comparisonValue;\n\n    }\n\n  });\n\n\n\n  return new this.constructor(collection);\n\n};\n",
    "line_range": [
        4,
        58
    ],
    "command_specific_fields": {
        "method_name": "where"
    },
    "language": "javascript",
    "commit": "eb37a5a98fca58c69424544fa64e3607f2a1f88f",
    "prompt": ""
}