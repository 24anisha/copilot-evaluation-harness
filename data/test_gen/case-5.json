{
    "case_id": "case-5",
    "repo_name": "ecrmnn/collect.js",
    "file_path": "src/methods/where.js",
    "code_snippet": "const nestedValue = require('../helpers/nestedValue');\n\nmodule.exports = function where(key, operator, value) {\n  let comparisonOperator = operator;\n  let comparisonValue = value;\n\n  const items = values(this.items);\n\n  if (operator === undefined || operator === true) {\n    return new this.constructor(items.filter(item => nestedValue(item, key)));\n  }\n\n  if (operator === false) {\n    return new this.constructor(items.filter(item => !nestedValue(item, key)));\n  }\n\n  if (value === undefined) {\n    comparisonValue = operator;\n    comparisonOperator = '===';\n  }\n\n  const collection = items.filter((item) => {\n    switch (comparisonOperator) {\n      case '==':\n        return nestedValue(item, key) === Number(comparisonValue)\n          || nestedValue(item, key) === comparisonValue.toString();\n\n      default:\n      case '===':\n        return nestedValue(item, key) === comparisonValue;\n\n      case '!=':\n      case '<>':\n        return nestedValue(item, key) !== Number(comparisonValue)\n          && nestedValue(item, key) !== comparisonValue.toString();\n\n      case '!==':\n        return nestedValue(item, key) !== comparisonValue;\n\n      case '<':\n        return nestedValue(item, key) < comparisonValue;\n\n      case '<=':\n        return nestedValue(item, key) <= comparisonValue;\n\n      case '>':\n        return nestedValue(item, key) > comparisonValue;\n\n      case '>=':\n        return nestedValue(item, key) >= comparisonValue;\n    }\n  });\n\n  return new this.constructor(collection);\n};\n",
    "line_range": [
        4,
        58
    ],
    "command_specific_fields": {
        "method_name": "where"
    },
    "language": "javascript",
    "commit": "eb37a5a98fca58c69424544fa64e3607f2a1f88f",
    "prompt": ""
}